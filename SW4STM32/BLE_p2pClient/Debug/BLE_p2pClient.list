
BLE_p2pClient.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c054  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000788  0800c194  0800c194  0001c194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c91c  0800c91c  0001c91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c924  0800c924  0001c924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c928  0800c928  0001c928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000004  0800c92c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  2000009c  0800c9c4  0002009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_APP_CONTEXT 000000ac  20000138  0800ca5d  00020138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 00000034  200001e4  0800cb09  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  20000218  0800cb3d  00020218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000139c  2000022c  0800cb4e  0002022c  2**2
                  ALLOC
 12 ._user_heap_stack 00001400  200015c8  0800cb4e  000215c8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030a34  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000020  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       00000194  20030020  20030020  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301b4  200301b4  000301b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 17 .debug_line   0002281e  00000000  00000000  00030a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   00034c58  00000000  00000000  00053282  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000062e9  00000000  00000000  00087eda  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 00002598  00000000  00000000  0008e1c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    000efde3  00000000  00000000  00090760  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 000022e0  00000000  00000000  00180548  2**3
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0002b38d  00000000  00000000  00182828  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001adbb5  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000a2d4  00000000  00000000  001adc30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000022c 	.word	0x2000022c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c17c 	.word	0x0800c17c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000230 	.word	0x20000230
 800017c:	0800c17c 	.word	0x0800c17c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b972 	b.w	800052c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	4688      	mov	r8, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14b      	bne.n	8000306 <__udivmoddi4+0xa6>
 800026e:	428a      	cmp	r2, r1
 8000270:	4615      	mov	r5, r2
 8000272:	d967      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0720 	rsb	r7, r2, #32
 800027e:	fa01 f302 	lsl.w	r3, r1, r2
 8000282:	fa20 f707 	lsr.w	r7, r0, r7
 8000286:	4095      	lsls	r5, r2
 8000288:	ea47 0803 	orr.w	r8, r7, r3
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbb8 f7fe 	udiv	r7, r8, lr
 8000298:	fa1f fc85 	uxth.w	ip, r5
 800029c:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a4:	fb07 f10c 	mul.w	r1, r7, ip
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18eb      	adds	r3, r5, r3
 80002ae:	f107 30ff 	add.w	r0, r7, #4294967295
 80002b2:	f080 811b 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8118 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002bc:	3f02      	subs	r7, #2
 80002be:	442b      	add	r3, r5
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d4:	45a4      	cmp	ip, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	192c      	adds	r4, r5, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	f080 8107 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002e2:	45a4      	cmp	ip, r4
 80002e4:	f240 8104 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002e8:	3802      	subs	r0, #2
 80002ea:	442c      	add	r4, r5
 80002ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f0:	eba4 040c 	sub.w	r4, r4, ip
 80002f4:	2700      	movs	r7, #0
 80002f6:	b11e      	cbz	r6, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d909      	bls.n	800031e <__udivmoddi4+0xbe>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80eb 	beq.w	80004e6 <__udivmoddi4+0x286>
 8000310:	2700      	movs	r7, #0
 8000312:	e9c6 0100 	strd	r0, r1, [r6]
 8000316:	4638      	mov	r0, r7
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	fab3 f783 	clz	r7, r3
 8000322:	2f00      	cmp	r7, #0
 8000324:	d147      	bne.n	80003b6 <__udivmoddi4+0x156>
 8000326:	428b      	cmp	r3, r1
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xd0>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 80fa 	bhi.w	8000524 <__udivmoddi4+0x2c4>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb61 0303 	sbc.w	r3, r1, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4698      	mov	r8, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e0      	beq.n	8000300 <__udivmoddi4+0xa0>
 800033e:	e9c6 4800 	strd	r4, r8, [r6]
 8000342:	e7dd      	b.n	8000300 <__udivmoddi4+0xa0>
 8000344:	b902      	cbnz	r2, 8000348 <__udivmoddi4+0xe8>
 8000346:	deff      	udf	#255	; 0xff
 8000348:	fab2 f282 	clz	r2, r2
 800034c:	2a00      	cmp	r2, #0
 800034e:	f040 808f 	bne.w	8000470 <__udivmoddi4+0x210>
 8000352:	1b49      	subs	r1, r1, r5
 8000354:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000358:	fa1f f885 	uxth.w	r8, r5
 800035c:	2701      	movs	r7, #1
 800035e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000362:	0c23      	lsrs	r3, r4, #16
 8000364:	fb0e 111c 	mls	r1, lr, ip, r1
 8000368:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800036c:	fb08 f10c 	mul.w	r1, r8, ip
 8000370:	4299      	cmp	r1, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x124>
 8000374:	18eb      	adds	r3, r5, r3
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4299      	cmp	r1, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2bc>
 8000382:	4684      	mov	ip, r0
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000390:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x14c>
 800039c:	192c      	adds	r4, r5, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x14a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80b6 	bhi.w	8000516 <__udivmoddi4+0x2b6>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e79f      	b.n	80002f6 <__udivmoddi4+0x96>
 80003b6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ba:	40bb      	lsls	r3, r7
 80003bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c4:	fa01 f407 	lsl.w	r4, r1, r7
 80003c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d4:	4325      	orrs	r5, r4
 80003d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003da:	0c2c      	lsrs	r4, r5, #16
 80003dc:	fb08 3319 	mls	r3, r8, r9, r3
 80003e0:	fa1f fa8e 	uxth.w	sl, lr
 80003e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ec:	429c      	cmp	r4, r3
 80003ee:	fa02 f207 	lsl.w	r2, r2, r7
 80003f2:	fa00 f107 	lsl.w	r1, r0, r7
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1e 0303 	adds.w	r3, lr, r3
 80003fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000400:	f080 8087 	bcs.w	8000512 <__udivmoddi4+0x2b2>
 8000404:	429c      	cmp	r4, r3
 8000406:	f240 8084 	bls.w	8000512 <__udivmoddi4+0x2b2>
 800040a:	f1a9 0902 	sub.w	r9, r9, #2
 800040e:	4473      	add	r3, lr
 8000410:	1b1b      	subs	r3, r3, r4
 8000412:	b2ad      	uxth	r5, r5
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000420:	fb00 fa0a 	mul.w	sl, r0, sl
 8000424:	45a2      	cmp	sl, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1e 0404 	adds.w	r4, lr, r4
 800042c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000430:	d26b      	bcs.n	800050a <__udivmoddi4+0x2aa>
 8000432:	45a2      	cmp	sl, r4
 8000434:	d969      	bls.n	800050a <__udivmoddi4+0x2aa>
 8000436:	3802      	subs	r0, #2
 8000438:	4474      	add	r4, lr
 800043a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043e:	fba0 8902 	umull	r8, r9, r0, r2
 8000442:	eba4 040a 	sub.w	r4, r4, sl
 8000446:	454c      	cmp	r4, r9
 8000448:	46c2      	mov	sl, r8
 800044a:	464b      	mov	r3, r9
 800044c:	d354      	bcc.n	80004f8 <__udivmoddi4+0x298>
 800044e:	d051      	beq.n	80004f4 <__udivmoddi4+0x294>
 8000450:	2e00      	cmp	r6, #0
 8000452:	d069      	beq.n	8000528 <__udivmoddi4+0x2c8>
 8000454:	ebb1 050a 	subs.w	r5, r1, sl
 8000458:	eb64 0403 	sbc.w	r4, r4, r3
 800045c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000460:	40fd      	lsrs	r5, r7
 8000462:	40fc      	lsrs	r4, r7
 8000464:	ea4c 0505 	orr.w	r5, ip, r5
 8000468:	e9c6 5400 	strd	r5, r4, [r6]
 800046c:	2700      	movs	r7, #0
 800046e:	e747      	b.n	8000300 <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f703 	lsr.w	r7, r0, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	fa21 f303 	lsr.w	r3, r1, r3
 8000482:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000486:	4338      	orrs	r0, r7
 8000488:	0c01      	lsrs	r1, r0, #16
 800048a:	fbb3 f7fe 	udiv	r7, r3, lr
 800048e:	fa1f f885 	uxth.w	r8, r5
 8000492:	fb0e 3317 	mls	r3, lr, r7, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb07 f308 	mul.w	r3, r7, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	fa04 f402 	lsl.w	r4, r4, r2
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x256>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ac:	d22f      	bcs.n	800050e <__udivmoddi4+0x2ae>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d92d      	bls.n	800050e <__udivmoddi4+0x2ae>
 80004b2:	3f02      	subs	r7, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1acb      	subs	r3, r1, r3
 80004b8:	b281      	uxth	r1, r0
 80004ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80004be:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c6:	fb00 f308 	mul.w	r3, r0, r8
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x27e>
 80004ce:	1869      	adds	r1, r5, r1
 80004d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d4:	d217      	bcs.n	8000506 <__udivmoddi4+0x2a6>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d915      	bls.n	8000506 <__udivmoddi4+0x2a6>
 80004da:	3802      	subs	r0, #2
 80004dc:	4429      	add	r1, r5
 80004de:	1ac9      	subs	r1, r1, r3
 80004e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e4:	e73b      	b.n	800035e <__udivmoddi4+0xfe>
 80004e6:	4637      	mov	r7, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e709      	b.n	8000300 <__udivmoddi4+0xa0>
 80004ec:	4607      	mov	r7, r0
 80004ee:	e6e7      	b.n	80002c0 <__udivmoddi4+0x60>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6fb      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f4:	4541      	cmp	r1, r8
 80004f6:	d2ab      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000500:	3801      	subs	r0, #1
 8000502:	4613      	mov	r3, r2
 8000504:	e7a4      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000506:	4660      	mov	r0, ip
 8000508:	e7e9      	b.n	80004de <__udivmoddi4+0x27e>
 800050a:	4618      	mov	r0, r3
 800050c:	e795      	b.n	800043a <__udivmoddi4+0x1da>
 800050e:	4667      	mov	r7, ip
 8000510:	e7d1      	b.n	80004b6 <__udivmoddi4+0x256>
 8000512:	4681      	mov	r9, r0
 8000514:	e77c      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000516:	3802      	subs	r0, #2
 8000518:	442c      	add	r4, r5
 800051a:	e747      	b.n	80003ac <__udivmoddi4+0x14c>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	442b      	add	r3, r5
 8000522:	e72f      	b.n	8000384 <__udivmoddi4+0x124>
 8000524:	4638      	mov	r0, r7
 8000526:	e708      	b.n	800033a <__udivmoddi4+0xda>
 8000528:	4637      	mov	r7, r6
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0xa0>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000530:	480d      	ldr	r0, [pc, #52]	; (8000568 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000532:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000534:	480d      	ldr	r0, [pc, #52]	; (800056c <LoopForever+0x6>)
  ldr r1, =_edata
 8000536:	490e      	ldr	r1, [pc, #56]	; (8000570 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000538:	4a0e      	ldr	r2, [pc, #56]	; (8000574 <LoopForever+0xe>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800053c:	e002      	b.n	8000544 <LoopCopyDataInit>

0800053e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000542:	3304      	adds	r3, #4

08000544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000548:	d3f9      	bcc.n	800053e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054a:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <LoopForever+0x12>)
  ldr r4, =_ebss
 800054c:	4c0b      	ldr	r4, [pc, #44]	; (800057c <LoopForever+0x16>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000550:	e001      	b.n	8000556 <LoopFillZerobss>

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000554:	3204      	adds	r2, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800055a:	f003 fad9 	bl	8003b10 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800055e:	f00a fe29 	bl	800b1b4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000562:	f001 fa87 	bl	8001a74 <main>

08000566 <LoopForever>:

LoopForever:
  b LoopForever
 8000566:	e7fe      	b.n	8000566 <LoopForever>
  ldr   r0, =_estack
 8000568:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800056c:	20000004 	.word	0x20000004
  ldr r1, =_edata
 8000570:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000574:	0800c92c 	.word	0x0800c92c
  ldr r2, =_sbss
 8000578:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 800057c:	200015c8 	.word	0x200015c8

08000580 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000580:	e7fe      	b.n	8000580 <ADC1_IRQHandler>

08000582 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b086      	sub	sp, #24
 8000586:	af00      	add	r7, sp, #0
 8000588:	60f8      	str	r0, [r7, #12]
 800058a:	60b9      	str	r1, [r7, #8]
 800058c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
 8000592:	e00a      	b.n	80005aa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000594:	f3af 8000 	nop.w
 8000598:	4601      	mov	r1, r0
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	1c5a      	adds	r2, r3, #1
 800059e:	60ba      	str	r2, [r7, #8]
 80005a0:	b2ca      	uxtb	r2, r1
 80005a2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	3301      	adds	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	697a      	ldr	r2, [r7, #20]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	dbf0      	blt.n	8000594 <_read+0x12>
	}

return len;
 80005b2:	687b      	ldr	r3, [r7, #4]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3718      	adds	r7, #24
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <_sbrk+0x50>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d102      	bne.n	80005d2 <_sbrk+0x16>
		heap_end = &end;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <_sbrk+0x50>)
 80005ce:	4a10      	ldr	r2, [pc, #64]	; (8000610 <_sbrk+0x54>)
 80005d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <_sbrk+0x50>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <_sbrk+0x50>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4413      	add	r3, r2
 80005e0:	466a      	mov	r2, sp
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d907      	bls.n	80005f6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80005e6:	f00a fddf 	bl	800b1a8 <__errno>
 80005ea:	4602      	mov	r2, r0
 80005ec:	230c      	movs	r3, #12
 80005ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	e006      	b.n	8000604 <_sbrk+0x48>
	}

	heap_end += incr;
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <_sbrk+0x50>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	4a03      	ldr	r2, [pc, #12]	; (800060c <_sbrk+0x50>)
 8000600:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000602:	68fb      	ldr	r3, [r7, #12]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	2000024c 	.word	0x2000024c
 8000610:	200015c8 	.word	0x200015c8

08000614 <_close>:

int _close(int file)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	return -1;
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000620:	4618      	mov	r0, r3
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800063c:	605a      	str	r2, [r3, #4]
	return 0;
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <_isatty>:

int _isatty(int file)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	return 1;
 8000654:	2301      	movs	r3, #1
}
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000662:	b480      	push	{r7}
 8000664:	b085      	sub	sp, #20
 8000666:	af00      	add	r7, sp, #0
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	607a      	str	r2, [r7, #4]
	return 0;
 800066e:	2300      	movs	r3, #0
}
 8000670:	4618      	mov	r0, r3
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000686:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800068a:	4905      	ldr	r1, [pc, #20]	; (80006a0 <LL_EXTI_EnableIT_32_63+0x24>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4313      	orrs	r3, r2
 8000690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	58000800 	.word	0x58000800

080006a4 <LL_C2_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 80006ae:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80006b2:	4905      	ldr	r1, [pc, #20]	; (80006c8 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	58000800 	.word	0x58000800

080006cc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80006d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80006de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4313      	orrs	r3, r2
 80006e6:	608b      	str	r3, [r1, #8]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80006f8:	f000 f824 	bl	8000744 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80006fc:	4908      	ldr	r1, [pc, #32]	; (8000720 <APPE_Init+0x2c>)
 80006fe:	2000      	movs	r0, #0
 8000700:	f000 fd20 	bl	8001144 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  Init_Debug();
 8000704:	f000 f80e 	bl	8000724 <Init_Debug>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000708:	2101      	movs	r1, #1
 800070a:	2001      	movs	r0, #1
 800070c:	f00a fb22 	bl	800ad54 <UTIL_LPM_SetOffMode>

  Led_Init();
 8000710:	f000 f873 	bl	80007fa <Led_Init>

  Button_Init();
 8000714:	f000 f881 	bl	800081a <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000718:	f000 f81e 	bl	8000758 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 800071c:	bf00      	nop
}
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20001524 	.word	0x20001524

08000724 <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug( void )
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000728:	f003 fb44 	bl	8003db4 <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800072c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000730:	f7ff ffa4 	bl	800067c <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000734:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000738:	f7ff ffb4 	bl	80006a4 <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 800073c:	f008 fff6 	bl	800972c <DbgTraceInit>
#endif

  return;
 8000740:	bf00      	nop
}
 8000742:	bd80      	pop	{r7, pc}

08000744 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000748:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800074c:	f7ff ffbe 	bl	80006cc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8000750:	f00a faee 	bl	800ad30 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000754:	bf00      	nop
}
 8000756:	bd80      	pop	{r7, pc}

08000758 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800075e:	f00a f939 	bl	800a9d4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <appe_Tl_Init+0x50>)
 8000764:	2100      	movs	r1, #0
 8000766:	2040      	movs	r0, #64	; 0x40
 8000768:	f00a fbfe 	bl	800af68 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <appe_Tl_Init+0x54>)
 800076e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <appe_Tl_Init+0x58>)
 8000772:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000774:	463b      	mov	r3, r7
 8000776:	4619      	mov	r1, r3
 8000778:	480e      	ldr	r0, [pc, #56]	; (80007b4 <appe_Tl_Init+0x5c>)
 800077a:	f009 fa37 	bl	8009bec <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <appe_Tl_Init+0x60>)
 8000780:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <appe_Tl_Init+0x64>)
 8000784:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <appe_Tl_Init+0x68>)
 8000788:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800078a:	f240 533c 	movw	r3, #1340	; 0x53c
 800078e:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	4618      	mov	r0, r3
 8000796:	f00a fa25 	bl	800abe4 <TL_MM_Init>

  TL_Enable();
 800079a:	f00a f915 	bl	800a9c8 <TL_Enable>

  return;
 800079e:	bf00      	nop
}
 80007a0:	3720      	adds	r7, #32
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	08009c25 	.word	0x08009c25
 80007ac:	200306f0 	.word	0x200306f0
 80007b0:	080007c5 	.word	0x080007c5
 80007b4:	080007db 	.word	0x080007db
 80007b8:	20030908 	.word	0x20030908
 80007bc:	200307fc 	.word	0x200307fc
 80007c0:	200301b4 	.word	0x200301b4

080007c4 <APPE_SysStatusNot>:



static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80007ce:	bf00      	nop
}
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 80007e2:	f00a fa6f 	bl	800acc4 <TL_TRACES_Init>

  APP_BLE_Init( );
 80007e6:	f001 fd45 	bl	8002274 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80007ea:	2100      	movs	r1, #0
 80007ec:	2001      	movs	r0, #1
 80007ee:	f00a fab1 	bl	800ad54 <UTIL_LPM_SetOffMode>
  return;
 80007f2:	bf00      	nop
}
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 80007fe:	2000      	movs	r0, #0
 8000800:	f003 f8a6 	bl	8003950 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000804:	2001      	movs	r0, #1
 8000806:	f003 f8a3 	bl	8003950 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800080a:	2002      	movs	r0, #2
 800080c:	f003 f8a0 	bl	8003950 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8000810:	2001      	movs	r0, #1
 8000812:	f003 f8d7 	bl	80039c4 <BSP_LED_On>
#endif

  return;
 8000816:	bf00      	nop
}
 8000818:	bd80      	pop	{r7, pc}

0800081a <Button_Init>:

static void Button_Init( void )
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800081e:	2101      	movs	r1, #1
 8000820:	2000      	movs	r0, #0
 8000822:	f003 f903 	bl	8003a2c <BSP_PB_Init>
#endif

  return;
 8000826:	bf00      	nop
}
 8000828:	bd80      	pop	{r7, pc}

0800082a <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 800082e:	bf00      	nop
}
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000842:	f04f 30ff 	mov.w	r0, #4294967295
 8000846:	f00a fab3 	bl	800adb0 <UTIL_SEQ_Run>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800085a:	2100      	movs	r1, #0
 800085c:	2040      	movs	r0, #64	; 0x40
 800085e:	f00a fba3 	bl	800afa8 <UTIL_SEQ_SetTask>
  return;
 8000862:	bf00      	nop
}
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000872:	2002      	movs	r0, #2
 8000874:	f00a fbfe 	bl	800b074 <UTIL_SEQ_SetEvt>
  return;
 8000878:	bf00      	nop
}
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000888:	2002      	movs	r0, #2
 800088a:	f00a fc11 	bl	800b0b0 <UTIL_SEQ_WaitEvt>
  return;
 800088e:	bf00      	nop
}
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
    MX_USART1_UART_Init();
 800089a:	f001 f985 	bl	8001ba8 <MX_USART1_UART_Init>

  return;
 800089e:	bf00      	nop
}
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b084      	sub	sp, #16
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	60f8      	str	r0, [r7, #12]
 80008aa:	460b      	mov	r3, r1
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80008b0:	897a      	ldrh	r2, [r7, #10]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	68f9      	ldr	r1, [r7, #12]
 80008b6:	2000      	movs	r0, #0
 80008b8:	f000 feb8 	bl	800162c <HW_UART_Transmit_DMA>

  return;
 80008bc:	bf00      	nop
}
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <HAL_GPIO_EXTI_Callback>:
#endif

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d00a      	beq.n	80008ea <HAL_GPIO_EXTI_Callback+0x26>
 80008d4:	2b10      	cmp	r3, #16
 80008d6:	d002      	beq.n	80008de <HAL_GPIO_EXTI_Callback+0x1a>
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d003      	beq.n	80008e4 <HAL_GPIO_EXTI_Callback+0x20>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 80008dc:	e008      	b.n	80008f0 <HAL_GPIO_EXTI_Callback+0x2c>
     APP_BLE_Key_Button1_Action();
 80008de:	f001 ff01 	bl	80026e4 <APP_BLE_Key_Button1_Action>
      break; 
 80008e2:	e005      	b.n	80008f0 <HAL_GPIO_EXTI_Callback+0x2c>
      APP_BLE_Key_Button2_Action();
 80008e4:	f001 ff0e 	bl	8002704 <APP_BLE_Key_Button2_Action>
      break; 
 80008e8:	e002      	b.n	80008f0 <HAL_GPIO_EXTI_Callback+0x2c>
      APP_BLE_Key_Button3_Action();
 80008ea:	f001 ff12 	bl	8002712 <APP_BLE_Key_Button3_Action>
      break;
 80008ee:	bf00      	nop

  }
  return;
 80008f0:	bf00      	nop
}
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <LL_EXTI_EnableIT_0_31>:
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <LL_EXTI_EnableIT_0_31+0x24>)
 8000902:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000906:	4905      	ldr	r1, [pc, #20]	; (800091c <LL_EXTI_EnableIT_0_31+0x24>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4313      	orrs	r3, r2
 800090c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	58000800 	.word	0x58000800

08000920 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4904      	ldr	r1, [pc, #16]	; (8000940 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4313      	orrs	r3, r2
 8000932:	600b      	str	r3, [r1, #0]

}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	58000800 	.word	0x58000800

08000944 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <ReadRtcSsrValue+0x3c>)
 800094c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094e:	b29b      	uxth	r3, r3
 8000950:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <ReadRtcSsrValue+0x3c>)
 8000954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000956:	b29b      	uxth	r3, r3
 8000958:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800095a:	e005      	b.n	8000968 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <ReadRtcSsrValue+0x3c>)
 8000962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000964:	b29b      	uxth	r3, r3
 8000966:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	429a      	cmp	r2, r3
 800096e:	d1f5      	bne.n	800095c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000970:	683b      	ldr	r3, [r7, #0]
}
 8000972:	4618      	mov	r0, r3
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40002800 	.word	0x40002800

08000984 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	460a      	mov	r2, r1
 800098e:	71fb      	strb	r3, [r7, #7]
 8000990:	4613      	mov	r3, r2
 8000992:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000994:	79ba      	ldrb	r2, [r7, #6]
 8000996:	491d      	ldr	r1, [pc, #116]	; (8000a0c <LinkTimerAfter+0x88>)
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	440b      	add	r3, r1
 80009a2:	3315      	adds	r3, #21
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	2b06      	cmp	r3, #6
 80009ac:	d009      	beq.n	80009c2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80009ae:	7bfa      	ldrb	r2, [r7, #15]
 80009b0:	4916      	ldr	r1, [pc, #88]	; (8000a0c <LinkTimerAfter+0x88>)
 80009b2:	4613      	mov	r3, r2
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	4413      	add	r3, r2
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	440b      	add	r3, r1
 80009bc:	3314      	adds	r3, #20
 80009be:	79fa      	ldrb	r2, [r7, #7]
 80009c0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80009c2:	79fa      	ldrb	r2, [r7, #7]
 80009c4:	4911      	ldr	r1, [pc, #68]	; (8000a0c <LinkTimerAfter+0x88>)
 80009c6:	4613      	mov	r3, r2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	4413      	add	r3, r2
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	440b      	add	r3, r1
 80009d0:	3315      	adds	r3, #21
 80009d2:	7bfa      	ldrb	r2, [r7, #15]
 80009d4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80009d6:	79fa      	ldrb	r2, [r7, #7]
 80009d8:	490c      	ldr	r1, [pc, #48]	; (8000a0c <LinkTimerAfter+0x88>)
 80009da:	4613      	mov	r3, r2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4413      	add	r3, r2
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	440b      	add	r3, r1
 80009e4:	3314      	adds	r3, #20
 80009e6:	79ba      	ldrb	r2, [r7, #6]
 80009e8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80009ea:	79ba      	ldrb	r2, [r7, #6]
 80009ec:	4907      	ldr	r1, [pc, #28]	; (8000a0c <LinkTimerAfter+0x88>)
 80009ee:	4613      	mov	r3, r2
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	4413      	add	r3, r2
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	440b      	add	r3, r1
 80009f8:	3315      	adds	r3, #21
 80009fa:	79fa      	ldrb	r2, [r7, #7]
 80009fc:	701a      	strb	r2, [r3, #0]

  return;
 80009fe:	bf00      	nop
}
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	2000009c 	.word	0x2000009c

08000a10 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	460a      	mov	r2, r1
 8000a1a:	71fb      	strb	r3, [r7, #7]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000a20:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <LinkTimerBefore+0xb8>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	79ba      	ldrb	r2, [r7, #6]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d032      	beq.n	8000a92 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000a2c:	79ba      	ldrb	r2, [r7, #6]
 8000a2e:	4927      	ldr	r1, [pc, #156]	; (8000acc <LinkTimerBefore+0xbc>)
 8000a30:	4613      	mov	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	440b      	add	r3, r1
 8000a3a:	3314      	adds	r3, #20
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000a40:	7bfa      	ldrb	r2, [r7, #15]
 8000a42:	4922      	ldr	r1, [pc, #136]	; (8000acc <LinkTimerBefore+0xbc>)
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	440b      	add	r3, r1
 8000a4e:	3315      	adds	r3, #21
 8000a50:	79fa      	ldrb	r2, [r7, #7]
 8000a52:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a54:	79fa      	ldrb	r2, [r7, #7]
 8000a56:	491d      	ldr	r1, [pc, #116]	; (8000acc <LinkTimerBefore+0xbc>)
 8000a58:	4613      	mov	r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	4413      	add	r3, r2
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	440b      	add	r3, r1
 8000a62:	3315      	adds	r3, #21
 8000a64:	79ba      	ldrb	r2, [r7, #6]
 8000a66:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000a68:	79fa      	ldrb	r2, [r7, #7]
 8000a6a:	4918      	ldr	r1, [pc, #96]	; (8000acc <LinkTimerBefore+0xbc>)
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4413      	add	r3, r2
 8000a72:	00db      	lsls	r3, r3, #3
 8000a74:	440b      	add	r3, r1
 8000a76:	3314      	adds	r3, #20
 8000a78:	7bfa      	ldrb	r2, [r7, #15]
 8000a7a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a7c:	79ba      	ldrb	r2, [r7, #6]
 8000a7e:	4913      	ldr	r1, [pc, #76]	; (8000acc <LinkTimerBefore+0xbc>)
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	440b      	add	r3, r1
 8000a8a:	3314      	adds	r3, #20
 8000a8c:	79fa      	ldrb	r2, [r7, #7]
 8000a8e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000a90:	e014      	b.n	8000abc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a92:	79fa      	ldrb	r2, [r7, #7]
 8000a94:	490d      	ldr	r1, [pc, #52]	; (8000acc <LinkTimerBefore+0xbc>)
 8000a96:	4613      	mov	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	440b      	add	r3, r1
 8000aa0:	3315      	adds	r3, #21
 8000aa2:	79ba      	ldrb	r2, [r7, #6]
 8000aa4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000aa6:	79ba      	ldrb	r2, [r7, #6]
 8000aa8:	4908      	ldr	r1, [pc, #32]	; (8000acc <LinkTimerBefore+0xbc>)
 8000aaa:	4613      	mov	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	440b      	add	r3, r1
 8000ab4:	3314      	adds	r3, #20
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	701a      	strb	r2, [r3, #0]
  return;
 8000aba:	bf00      	nop
}
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	2000012c 	.word	0x2000012c
 8000acc:	2000009c 	.word	0x2000009c

08000ad0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ada:	4b4e      	ldr	r3, [pc, #312]	; (8000c14 <linkTimer+0x144>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b06      	cmp	r3, #6
 8000ae2:	d118      	bne.n	8000b16 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ae4:	4b4b      	ldr	r3, [pc, #300]	; (8000c14 <linkTimer+0x144>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b4b      	ldr	r3, [pc, #300]	; (8000c18 <linkTimer+0x148>)
 8000aec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000aee:	4a49      	ldr	r2, [pc, #292]	; (8000c14 <linkTimer+0x144>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000af4:	79fa      	ldrb	r2, [r7, #7]
 8000af6:	4949      	ldr	r1, [pc, #292]	; (8000c1c <linkTimer+0x14c>)
 8000af8:	4613      	mov	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	440b      	add	r3, r1
 8000b02:	3315      	adds	r3, #21
 8000b04:	2206      	movs	r2, #6
 8000b06:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000b08:	4b45      	ldr	r3, [pc, #276]	; (8000c20 <linkTimer+0x150>)
 8000b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	81fb      	strh	r3, [r7, #14]
 8000b14:	e078      	b.n	8000c08 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000b16:	f000 f909 	bl	8000d2c <ReturnTimeElapsed>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	493e      	ldr	r1, [pc, #248]	; (8000c1c <linkTimer+0x14c>)
 8000b22:	4613      	mov	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	4413      	add	r3, r2
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	440b      	add	r3, r1
 8000b2c:	3308      	adds	r3, #8
 8000b2e:	6819      	ldr	r1, [r3, #0]
 8000b30:	89fb      	ldrh	r3, [r7, #14]
 8000b32:	79fa      	ldrb	r2, [r7, #7]
 8000b34:	4419      	add	r1, r3
 8000b36:	4839      	ldr	r0, [pc, #228]	; (8000c1c <linkTimer+0x14c>)
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	4403      	add	r3, r0
 8000b42:	3308      	adds	r3, #8
 8000b44:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000b46:	79fa      	ldrb	r2, [r7, #7]
 8000b48:	4934      	ldr	r1, [pc, #208]	; (8000c1c <linkTimer+0x14c>)
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4413      	add	r3, r2
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	440b      	add	r3, r1
 8000b54:	3308      	adds	r3, #8
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000b5a:	4b2e      	ldr	r3, [pc, #184]	; (8000c14 <linkTimer+0x144>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	4619      	mov	r1, r3
 8000b62:	4a2e      	ldr	r2, [pc, #184]	; (8000c1c <linkTimer+0x14c>)
 8000b64:	460b      	mov	r3, r1
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	440b      	add	r3, r1
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	4413      	add	r3, r2
 8000b6e:	3308      	adds	r3, #8
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d337      	bcc.n	8000be8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000b78:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <linkTimer+0x144>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000b7e:	7b7a      	ldrb	r2, [r7, #13]
 8000b80:	4926      	ldr	r1, [pc, #152]	; (8000c1c <linkTimer+0x14c>)
 8000b82:	4613      	mov	r3, r2
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	4413      	add	r3, r2
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	440b      	add	r3, r1
 8000b8c:	3315      	adds	r3, #21
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000b92:	e013      	b.n	8000bbc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000b94:	7b7a      	ldrb	r2, [r7, #13]
 8000b96:	4921      	ldr	r1, [pc, #132]	; (8000c1c <linkTimer+0x14c>)
 8000b98:	4613      	mov	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	4413      	add	r3, r2
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	440b      	add	r3, r1
 8000ba2:	3315      	adds	r3, #21
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000ba8:	7b7a      	ldrb	r2, [r7, #13]
 8000baa:	491c      	ldr	r1, [pc, #112]	; (8000c1c <linkTimer+0x14c>)
 8000bac:	4613      	mov	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	4413      	add	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	440b      	add	r3, r1
 8000bb6:	3315      	adds	r3, #21
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000bbc:	7b3b      	ldrb	r3, [r7, #12]
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d00b      	beq.n	8000bda <linkTimer+0x10a>
 8000bc2:	7b3a      	ldrb	r2, [r7, #12]
 8000bc4:	4915      	ldr	r1, [pc, #84]	; (8000c1c <linkTimer+0x14c>)
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	440b      	add	r3, r1
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d2dc      	bcs.n	8000b94 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000bda:	7b7a      	ldrb	r2, [r7, #13]
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	4611      	mov	r1, r2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fecf 	bl	8000984 <LinkTimerAfter>
 8000be6:	e00f      	b.n	8000c08 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <linkTimer+0x144>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff0c 	bl	8000a10 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <linkTimer+0x144>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <linkTimer+0x148>)
 8000c00:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <linkTimer+0x144>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000c08:	89fb      	ldrh	r3, [r7, #14]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000012c 	.word	0x2000012c
 8000c18:	2000012d 	.word	0x2000012d
 8000c1c:	2000009c 	.word	0x2000009c
 8000c20:	20000130 	.word	0x20000130

08000c24 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	4613      	mov	r3, r2
 8000c32:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000c34:	4b39      	ldr	r3, [pc, #228]	; (8000d1c <UnlinkTimer+0xf8>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	79fa      	ldrb	r2, [r7, #7]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d111      	bne.n	8000c64 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c40:	4b36      	ldr	r3, [pc, #216]	; (8000d1c <UnlinkTimer+0xf8>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <UnlinkTimer+0xfc>)
 8000c48:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000c4a:	79fa      	ldrb	r2, [r7, #7]
 8000c4c:	4935      	ldr	r1, [pc, #212]	; (8000d24 <UnlinkTimer+0x100>)
 8000c4e:	4613      	mov	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	4413      	add	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	440b      	add	r3, r1
 8000c58:	3315      	adds	r3, #21
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <UnlinkTimer+0xf8>)
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	e03e      	b.n	8000ce2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000c64:	79fa      	ldrb	r2, [r7, #7]
 8000c66:	492f      	ldr	r1, [pc, #188]	; (8000d24 <UnlinkTimer+0x100>)
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	440b      	add	r3, r1
 8000c72:	3314      	adds	r3, #20
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000c78:	79fa      	ldrb	r2, [r7, #7]
 8000c7a:	492a      	ldr	r1, [pc, #168]	; (8000d24 <UnlinkTimer+0x100>)
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	440b      	add	r3, r1
 8000c86:	3315      	adds	r3, #21
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000c8c:	79f9      	ldrb	r1, [r7, #7]
 8000c8e:	7bfa      	ldrb	r2, [r7, #15]
 8000c90:	4824      	ldr	r0, [pc, #144]	; (8000d24 <UnlinkTimer+0x100>)
 8000c92:	460b      	mov	r3, r1
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	440b      	add	r3, r1
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	4403      	add	r3, r0
 8000c9c:	3315      	adds	r3, #21
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b2d8      	uxtb	r0, r3
 8000ca2:	4920      	ldr	r1, [pc, #128]	; (8000d24 <UnlinkTimer+0x100>)
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	4413      	add	r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	440b      	add	r3, r1
 8000cae:	3315      	adds	r3, #21
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cb4:	7bbb      	ldrb	r3, [r7, #14]
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d013      	beq.n	8000ce2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000cba:	79f9      	ldrb	r1, [r7, #7]
 8000cbc:	7bba      	ldrb	r2, [r7, #14]
 8000cbe:	4819      	ldr	r0, [pc, #100]	; (8000d24 <UnlinkTimer+0x100>)
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	440b      	add	r3, r1
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	4403      	add	r3, r0
 8000cca:	3314      	adds	r3, #20
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2d8      	uxtb	r0, r3
 8000cd0:	4914      	ldr	r1, [pc, #80]	; (8000d24 <UnlinkTimer+0x100>)
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	440b      	add	r3, r1
 8000cdc:	3314      	adds	r3, #20
 8000cde:	4602      	mov	r2, r0
 8000ce0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000ce2:	79fa      	ldrb	r2, [r7, #7]
 8000ce4:	490f      	ldr	r1, [pc, #60]	; (8000d24 <UnlinkTimer+0x100>)
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	440b      	add	r3, r1
 8000cf0:	330c      	adds	r3, #12
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <UnlinkTimer+0xf8>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b06      	cmp	r3, #6
 8000cfe:	d107      	bne.n	8000d10 <UnlinkTimer+0xec>
 8000d00:	79bb      	ldrb	r3, [r7, #6]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d104      	bne.n	8000d10 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <UnlinkTimer+0x104>)
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
}
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	2000012c 	.word	0x2000012c
 8000d20:	2000012d 	.word	0x2000012d
 8000d24:	2000009c 	.word	0x2000009c
 8000d28:	20000130 	.word	0x20000130

08000d2c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <ReturnTimeElapsed+0x70>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d3a:	d026      	beq.n	8000d8a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000d3c:	f7ff fe02 	bl	8000944 <ReadRtcSsrValue>
 8000d40:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <ReturnTimeElapsed+0x70>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d805      	bhi.n	8000d58 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <ReturnTimeElapsed+0x70>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	e00a      	b.n	8000d6e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <ReturnTimeElapsed+0x74>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <ReturnTimeElapsed+0x70>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <ReturnTimeElapsed+0x78>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	fb02 f303 	mul.w	r3, r2, r3
 8000d7a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <ReturnTimeElapsed+0x7c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	40d3      	lsrs	r3, r2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	e001      	b.n	8000d8e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	b29b      	uxth	r3, r3
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000130 	.word	0x20000130
 8000da0:	20000256 	.word	0x20000256
 8000da4:	20000255 	.word	0x20000255
 8000da8:	20000254 	.word	0x20000254

08000dac <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d108      	bne.n	8000dce <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000dbc:	f7ff fdc2 	bl	8000944 <ReadRtcSsrValue>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <RestartWakeupCounter+0xa8>)
 8000dc4:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000dc6:	2003      	movs	r0, #3
 8000dc8:	f003 f946 	bl	8004058 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000dcc:	e03e      	b.n	8000e4c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d803      	bhi.n	8000ddc <RestartWakeupCounter+0x30>
 8000dd4:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <RestartWakeupCounter+0xac>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d002      	beq.n	8000de2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000de2:	bf00      	nop
 8000de4:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <RestartWakeupCounter+0xb0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0f7      	beq.n	8000de4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <RestartWakeupCounter+0xb0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <RestartWakeupCounter+0xb0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000e08:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <RestartWakeupCounter+0xb4>)
 8000e0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e10:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000e12:	2003      	movs	r0, #3
 8000e14:	f003 f92e 	bl	8004074 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <RestartWakeupCounter+0xb8>)
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	0c1b      	lsrs	r3, r3, #16
 8000e1e:	041b      	lsls	r3, r3, #16
 8000e20:	88fa      	ldrh	r2, [r7, #6]
 8000e22:	4910      	ldr	r1, [pc, #64]	; (8000e64 <RestartWakeupCounter+0xb8>)
 8000e24:	4313      	orrs	r3, r2
 8000e26:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e28:	f7ff fd8c 	bl	8000944 <ReadRtcSsrValue>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <RestartWakeupCounter+0xa8>)
 8000e30:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <RestartWakeupCounter+0xb0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <RestartWakeupCounter+0xb0>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e44:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000e46:	f3af 8000 	nop.w
  return ;
 8000e4a:	bf00      	nop
}
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000130 	.word	0x20000130
 8000e58:	20000254 	.word	0x20000254
 8000e5c:	20000250 	.word	0x20000250
 8000e60:	58000800 	.word	0x58000800
 8000e64:	40002800 	.word	0x40002800

08000e68 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000e6e:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <RescheduleTimerList+0x124>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e7a:	d108      	bne.n	8000e8e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000e7c:	bf00      	nop
 8000e7e:	4b44      	ldr	r3, [pc, #272]	; (8000f90 <RescheduleTimerList+0x128>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1f7      	bne.n	8000e7e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000e8e:	4b40      	ldr	r3, [pc, #256]	; (8000f90 <RescheduleTimerList+0x128>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	4b3e      	ldr	r3, [pc, #248]	; (8000f90 <RescheduleTimerList+0x128>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ea0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000ea2:	4b3c      	ldr	r3, [pc, #240]	; (8000f94 <RescheduleTimerList+0x12c>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000ea8:	7bfa      	ldrb	r2, [r7, #15]
 8000eaa:	493b      	ldr	r1, [pc, #236]	; (8000f98 <RescheduleTimerList+0x130>)
 8000eac:	4613      	mov	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	4413      	add	r3, r2
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	440b      	add	r3, r1
 8000eb6:	3308      	adds	r3, #8
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000ebc:	f7ff ff36 	bl	8000d2c <ReturnTimeElapsed>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d205      	bcs.n	8000ed8 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ed0:	4b32      	ldr	r3, [pc, #200]	; (8000f9c <RescheduleTimerList+0x134>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
 8000ed6:	e04d      	b.n	8000f74 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	4a31      	ldr	r2, [pc, #196]	; (8000fa0 <RescheduleTimerList+0x138>)
 8000edc:	8812      	ldrh	r2, [r2, #0]
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	4413      	add	r3, r2
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d906      	bls.n	8000ef8 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <RescheduleTimerList+0x138>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000ef0:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <RescheduleTimerList+0x134>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
 8000ef6:	e03d      	b.n	8000f74 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f02:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <RescheduleTimerList+0x134>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f08:	e034      	b.n	8000f74 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000f0a:	7bfa      	ldrb	r2, [r7, #15]
 8000f0c:	4922      	ldr	r1, [pc, #136]	; (8000f98 <RescheduleTimerList+0x130>)
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	440b      	add	r3, r1
 8000f18:	3308      	adds	r3, #8
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d20a      	bcs.n	8000f38 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	491c      	ldr	r1, [pc, #112]	; (8000f98 <RescheduleTimerList+0x130>)
 8000f26:	4613      	mov	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	4413      	add	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	440b      	add	r3, r1
 8000f30:	3308      	adds	r3, #8
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	e013      	b.n	8000f60 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	4917      	ldr	r1, [pc, #92]	; (8000f98 <RescheduleTimerList+0x130>)
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	440b      	add	r3, r1
 8000f46:	3308      	adds	r3, #8
 8000f48:	6819      	ldr	r1, [r3, #0]
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	7bfa      	ldrb	r2, [r7, #15]
 8000f4e:	1ac9      	subs	r1, r1, r3
 8000f50:	4811      	ldr	r0, [pc, #68]	; (8000f98 <RescheduleTimerList+0x130>)
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	4403      	add	r3, r0
 8000f5c:	3308      	adds	r3, #8
 8000f5e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000f60:	7bfa      	ldrb	r2, [r7, #15]
 8000f62:	490d      	ldr	r1, [pc, #52]	; (8000f98 <RescheduleTimerList+0x130>)
 8000f64:	4613      	mov	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	440b      	add	r3, r1
 8000f6e:	3315      	adds	r3, #21
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d1c7      	bne.n	8000f0a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000f7a:	89bb      	ldrh	r3, [r7, #12]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff15 	bl	8000dac <RestartWakeupCounter>

  return ;
 8000f82:	bf00      	nop
}
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40002800 	.word	0x40002800
 8000f90:	20000250 	.word	0x20000250
 8000f94:	2000012c 	.word	0x2000012c
 8000f98:	2000009c 	.word	0x2000009c
 8000f9c:	20000134 	.word	0x20000134
 8000fa0:	20000258 	.word	0x20000258

08000fa4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000faa:	f3ef 8310 	mrs	r3, PRIMASK
 8000fae:	617b      	str	r3, [r7, #20]
  return(result);
 8000fb0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb4:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000fb6:	4b5e      	ldr	r3, [pc, #376]	; (8001130 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	22ca      	movs	r2, #202	; 0xca
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
 8000fc0:	4b5b      	ldr	r3, [pc, #364]	; (8001130 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2253      	movs	r2, #83	; 0x53
 8000fc8:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000fca:	4b59      	ldr	r3, [pc, #356]	; (8001130 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	4b57      	ldr	r3, [pc, #348]	; (8001130 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fdc:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000fde:	4b55      	ldr	r3, [pc, #340]	; (8001134 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000fe6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000fea:	4953      	ldr	r1, [pc, #332]	; (8001138 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	440b      	add	r3, r1
 8000ff6:	330c      	adds	r3, #12
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d170      	bne.n	80010e2 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001000:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001004:	494c      	ldr	r1, [pc, #304]	; (8001138 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001006:	4613      	mov	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	440b      	add	r3, r1
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001014:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001018:	4947      	ldr	r1, [pc, #284]	; (8001138 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800101a:	4613      	mov	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4413      	add	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	440b      	add	r3, r1
 8001024:	3310      	adds	r3, #16
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800102a:	4b44      	ldr	r3, [pc, #272]	; (800113c <HW_TS_RTC_Wakeup_Handler+0x198>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b00      	cmp	r3, #0
 8001032:	d04e      	beq.n	80010d2 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001034:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001038:	493f      	ldr	r1, [pc, #252]	; (8001138 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800103a:	4613      	mov	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	440b      	add	r3, r1
 8001044:	330d      	adds	r3, #13
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b01      	cmp	r3, #1
 800104c:	d125      	bne.n	800109a <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800104e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001052:	2101      	movs	r1, #1
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fde5 	bl	8000c24 <UnlinkTimer>
 800105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001064:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001068:	4933      	ldr	r1, [pc, #204]	; (8001138 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	440b      	add	r3, r1
 8001074:	3304      	adds	r3, #4
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fa40 	bl	8001504 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001084:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	22ca      	movs	r2, #202	; 0xca
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
 800108e:	4b28      	ldr	r3, [pc, #160]	; (8001130 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2253      	movs	r2, #83	; 0x53
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
 8001098:	e013      	b.n	80010c2 <HW_TS_RTC_Wakeup_Handler+0x11e>
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80010a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 f9a1 	bl	80013f0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	22ca      	movs	r2, #202	; 0xca
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2253      	movs	r2, #83	; 0x53
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24
      }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80010c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010c6:	69fa      	ldr	r2, [r7, #28]
 80010c8:	4619      	mov	r1, r3
 80010ca:	69b8      	ldr	r0, [r7, #24]
 80010cc:	f000 faa0 	bl	8001610 <HW_TS_RTC_Int_AppNot>
 80010d0:	e024      	b.n	800111c <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 80010d2:	f7ff fec9 	bl	8000e68 <RescheduleTimerList>
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	f383 8810 	msr	PRIMASK, r3
 80010e0:	e01c      	b.n	800111c <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80010e2:	bf00      	nop
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0f7      	beq.n	80010e4 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001108:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800110c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	22ff      	movs	r2, #255	; 0xff
 8001124:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001126:	bf00      	nop
}
 8001128:	3728      	adds	r7, #40	; 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000250 	.word	0x20000250
 8001134:	2000012c 	.word	0x2000012c
 8001138:	2000009c 	.word	0x2000009c
 800113c:	20000134 	.word	0x20000134
 8001140:	58000800 	.word	0x58000800

08001144 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001150:	4a61      	ldr	r2, [pc, #388]	; (80012d8 <HW_TS_Init+0x194>)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	6013      	str	r3, [r2, #0]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001156:	4b60      	ldr	r3, [pc, #384]	; (80012d8 <HW_TS_Init+0x194>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	22ca      	movs	r2, #202	; 0xca
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
 8001160:	4b5d      	ldr	r3, [pc, #372]	; (80012d8 <HW_TS_Init+0x194>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2253      	movs	r2, #83	; 0x53
 8001168:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800116a:	4b5c      	ldr	r3, [pc, #368]	; (80012dc <HW_TS_Init+0x198>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	4a5b      	ldr	r2, [pc, #364]	; (80012dc <HW_TS_Init+0x198>)
 8001170:	f043 0320 	orr.w	r3, r3, #32
 8001174:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001176:	4b59      	ldr	r3, [pc, #356]	; (80012dc <HW_TS_Init+0x198>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	b2db      	uxtb	r3, r3
 8001182:	f1c3 0304 	rsb	r3, r3, #4
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b55      	ldr	r3, [pc, #340]	; (80012e0 <HW_TS_Init+0x19c>)
 800118a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800118c:	4b53      	ldr	r3, [pc, #332]	; (80012dc <HW_TS_Init+0x198>)
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001194:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001198:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	fa92 f2a2 	rbit	r2, r2
 80011a0:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	fab2 f282 	clz	r2, r2
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	40d3      	lsrs	r3, r2
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	3301      	adds	r3, #1
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b4c      	ldr	r3, [pc, #304]	; (80012e4 <HW_TS_Init+0x1a0>)
 80011b4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80011b6:	4b49      	ldr	r3, [pc, #292]	; (80012dc <HW_TS_Init+0x198>)
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	3301      	adds	r3, #1
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b48      	ldr	r3, [pc, #288]	; (80012e8 <HW_TS_Init+0x1a4>)
 80011c8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80011ca:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <HW_TS_Init+0x1a4>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	4a44      	ldr	r2, [pc, #272]	; (80012e4 <HW_TS_Init+0x1a0>)
 80011d2:	7812      	ldrb	r2, [r2, #0]
 80011d4:	fb02 f303 	mul.w	r3, r2, r3
 80011d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80011dc:	4a40      	ldr	r2, [pc, #256]	; (80012e0 <HW_TS_Init+0x19c>)
 80011de:	7812      	ldrb	r2, [r2, #0]
 80011e0:	40d3      	lsrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d904      	bls.n	80011f8 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80011ee:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <HW_TS_Init+0x1a8>)
 80011f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f4:	801a      	strh	r2, [r3, #0]
 80011f6:	e003      	b.n	8001200 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b3b      	ldr	r3, [pc, #236]	; (80012ec <HW_TS_Init+0x1a8>)
 80011fe:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001200:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001204:	f7ff fb8c 	bl	8000920 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001208:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800120c:	f7ff fb74 	bl	80008f8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d143      	bne.n	800129e <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001216:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <HW_TS_Init+0x1ac>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800121c:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <HW_TS_Init+0x1b0>)
 800121e:	f04f 32ff 	mov.w	r2, #4294967295
 8001222:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001224:	2300      	movs	r3, #0
 8001226:	75fb      	strb	r3, [r7, #23]
 8001228:	e00c      	b.n	8001244 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800122a:	7dfa      	ldrb	r2, [r7, #23]
 800122c:	4932      	ldr	r1, [pc, #200]	; (80012f8 <HW_TS_Init+0x1b4>)
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	440b      	add	r3, r1
 8001238:	330c      	adds	r3, #12
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800123e:	7dfb      	ldrb	r3, [r7, #23]
 8001240:	3301      	adds	r3, #1
 8001242:	75fb      	strb	r3, [r7, #23]
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b05      	cmp	r3, #5
 8001248:	d9ef      	bls.n	800122a <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800124a:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <HW_TS_Init+0x1b8>)
 800124c:	2206      	movs	r2, #6
 800124e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001250:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <HW_TS_Init+0x194>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <HW_TS_Init+0x194>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001262:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001264:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <HW_TS_Init+0x194>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <HW_TS_Init+0x194>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001278:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <HW_TS_Init+0x1bc>)
 800127c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001280:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001282:	2003      	movs	r0, #3
 8001284:	f002 fef6 	bl	8004074 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <HW_TS_Init+0x194>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <HW_TS_Init+0x194>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	e00a      	b.n	80012b4 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HW_TS_Init+0x194>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80012ae:	2003      	movs	r0, #3
 80012b0:	f002 fed2 	bl	8004058 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HW_TS_Init+0x194>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	22ff      	movs	r2, #255	; 0xff
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80012be:	2200      	movs	r2, #0
 80012c0:	2103      	movs	r1, #3
 80012c2:	2003      	movs	r0, #3
 80012c4:	f002 fe92 	bl	8003fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012c8:	2003      	movs	r0, #3
 80012ca:	f002 fea9 	bl	8004020 <HAL_NVIC_EnableIRQ>

  return;
 80012ce:	bf00      	nop
}
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000250 	.word	0x20000250
 80012dc:	40002800 	.word	0x40002800
 80012e0:	20000254 	.word	0x20000254
 80012e4:	20000255 	.word	0x20000255
 80012e8:	20000256 	.word	0x20000256
 80012ec:	20000258 	.word	0x20000258
 80012f0:	20000134 	.word	0x20000134
 80012f4:	20000130 	.word	0x20000130
 80012f8:	2000009c 	.word	0x2000009c
 80012fc:	2000012c 	.word	0x2000012c
 8001300:	58000800 	.word	0x58000800

08001304 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001304:	b480      	push	{r7}
 8001306:	b08b      	sub	sp, #44	; 0x2c
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	4613      	mov	r3, r2
 8001312:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800131a:	f3ef 8310 	mrs	r3, PRIMASK
 800131e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001320:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001322:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001326:	e004      	b.n	8001332 <HW_TS_Create+0x2e>
  {
    loop++;
 8001328:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800132c:	3301      	adds	r3, #1
 800132e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001332:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001336:	2b05      	cmp	r3, #5
 8001338:	d80c      	bhi.n	8001354 <HW_TS_Create+0x50>
 800133a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800133e:	492b      	ldr	r1, [pc, #172]	; (80013ec <HW_TS_Create+0xe8>)
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	440b      	add	r3, r1
 800134a:	330c      	adds	r3, #12
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1e9      	bne.n	8001328 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001354:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001358:	2b06      	cmp	r3, #6
 800135a:	d037      	beq.n	80013cc <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800135c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001360:	4922      	ldr	r1, [pc, #136]	; (80013ec <HW_TS_Create+0xe8>)
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	440b      	add	r3, r1
 800136c:	330c      	adds	r3, #12
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800137c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001380:	491a      	ldr	r1, [pc, #104]	; (80013ec <HW_TS_Create+0xe8>)
 8001382:	4613      	mov	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	440b      	add	r3, r1
 800138c:	3310      	adds	r3, #16
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001392:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001396:	4915      	ldr	r1, [pc, #84]	; (80013ec <HW_TS_Create+0xe8>)
 8001398:	4613      	mov	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	440b      	add	r3, r1
 80013a2:	330d      	adds	r3, #13
 80013a4:	79fa      	ldrb	r2, [r7, #7]
 80013a6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80013a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80013ac:	490f      	ldr	r1, [pc, #60]	; (80013ec <HW_TS_Create+0xe8>)
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	440b      	add	r3, r1
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80013c2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013ca:	e007      	b.n	80013dc <HW_TS_Create+0xd8>
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80013d6:	2301      	movs	r3, #1
 80013d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80013dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	372c      	adds	r7, #44	; 0x2c
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	2000009c 	.word	0x2000009c

080013f0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013fa:	f3ef 8310 	mrs	r3, PRIMASK
 80013fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8001400:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001402:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001404:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001406:	2003      	movs	r0, #3
 8001408:	f002 fe18 	bl	800403c <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800140c:	4b37      	ldr	r3, [pc, #220]	; (80014ec <HW_TS_Stop+0xfc>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	22ca      	movs	r2, #202	; 0xca
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
 8001416:	4b35      	ldr	r3, [pc, #212]	; (80014ec <HW_TS_Stop+0xfc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2253      	movs	r2, #83	; 0x53
 800141e:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001420:	79fa      	ldrb	r2, [r7, #7]
 8001422:	4933      	ldr	r1, [pc, #204]	; (80014f0 <HW_TS_Stop+0x100>)
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	440b      	add	r3, r1
 800142e:	330c      	adds	r3, #12
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d148      	bne.n	80014ca <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fbf1 	bl	8000c24 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001442:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <HW_TS_Stop+0x104>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001448:	7cfb      	ldrb	r3, [r7, #19]
 800144a:	2b06      	cmp	r3, #6
 800144c:	d135      	bne.n	80014ba <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800144e:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <HW_TS_Stop+0x108>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800145a:	d108      	bne.n	800146e <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800145c:	bf00      	nop
 800145e:	4b23      	ldr	r3, [pc, #140]	; (80014ec <HW_TS_Stop+0xfc>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f7      	bne.n	800145e <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <HW_TS_Stop+0xfc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <HW_TS_Stop+0xfc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001480:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001482:	bf00      	nop
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <HW_TS_Stop+0xfc>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f7      	beq.n	8001484 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HW_TS_Stop+0xfc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <HW_TS_Stop+0xfc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80014a8:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HW_TS_Stop+0x10c>)
 80014ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014b0:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80014b2:	2003      	movs	r0, #3
 80014b4:	f002 fdde 	bl	8004074 <HAL_NVIC_ClearPendingIRQ>
 80014b8:	e007      	b.n	80014ca <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HW_TS_Stop+0x110>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	7cfa      	ldrb	r2, [r7, #19]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d001      	beq.n	80014ca <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80014c6:	f7ff fccf 	bl	8000e68 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HW_TS_Stop+0xfc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	22ff      	movs	r2, #255	; 0xff
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014d4:	2003      	movs	r0, #3
 80014d6:	f002 fda3 	bl	8004020 <HAL_NVIC_EnableIRQ>
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014e4:	bf00      	nop
}
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000250 	.word	0x20000250
 80014f0:	2000009c 	.word	0x2000009c
 80014f4:	2000012c 	.word	0x2000012c
 80014f8:	40002800 	.word	0x40002800
 80014fc:	58000800 	.word	0x58000800
 8001500:	2000012d 	.word	0x2000012d

08001504 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001510:	79fa      	ldrb	r2, [r7, #7]
 8001512:	493b      	ldr	r1, [pc, #236]	; (8001600 <HW_TS_Start+0xfc>)
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	440b      	add	r3, r1
 800151e:	330c      	adds	r3, #12
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d103      	bne.n	8001530 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff60 	bl	80013f0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001530:	f3ef 8310 	mrs	r3, PRIMASK
 8001534:	60fb      	str	r3, [r7, #12]
  return(result);
 8001536:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001538:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800153a:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800153c:	2003      	movs	r0, #3
 800153e:	f002 fd7d 	bl	800403c <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001542:	4b30      	ldr	r3, [pc, #192]	; (8001604 <HW_TS_Start+0x100>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	22ca      	movs	r2, #202	; 0xca
 800154a:	625a      	str	r2, [r3, #36]	; 0x24
 800154c:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <HW_TS_Start+0x100>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2253      	movs	r2, #83	; 0x53
 8001554:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001556:	79fa      	ldrb	r2, [r7, #7]
 8001558:	4929      	ldr	r1, [pc, #164]	; (8001600 <HW_TS_Start+0xfc>)
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	440b      	add	r3, r1
 8001564:	330c      	adds	r3, #12
 8001566:	2202      	movs	r2, #2
 8001568:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800156a:	79fa      	ldrb	r2, [r7, #7]
 800156c:	4924      	ldr	r1, [pc, #144]	; (8001600 <HW_TS_Start+0xfc>)
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	3308      	adds	r3, #8
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800157e:	79fa      	ldrb	r2, [r7, #7]
 8001580:	491f      	ldr	r1, [pc, #124]	; (8001600 <HW_TS_Start+0xfc>)
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	440b      	add	r3, r1
 800158c:	3304      	adds	r3, #4
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fa9b 	bl	8000ad0 <linkTimer>
 800159a:	4603      	mov	r3, r0
 800159c:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <HW_TS_Start+0x104>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <HW_TS_Start+0x108>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	7c7a      	ldrb	r2, [r7, #17]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d002      	beq.n	80015b6 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80015b0:	f7ff fc5a 	bl	8000e68 <RescheduleTimerList>
 80015b4:	e013      	b.n	80015de <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80015b6:	79fa      	ldrb	r2, [r7, #7]
 80015b8:	4911      	ldr	r1, [pc, #68]	; (8001600 <HW_TS_Start+0xfc>)
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	3308      	adds	r3, #8
 80015c6:	6819      	ldr	r1, [r3, #0]
 80015c8:	8a7b      	ldrh	r3, [r7, #18]
 80015ca:	79fa      	ldrb	r2, [r7, #7]
 80015cc:	1ac9      	subs	r1, r1, r3
 80015ce:	480c      	ldr	r0, [pc, #48]	; (8001600 <HW_TS_Start+0xfc>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4403      	add	r3, r0
 80015da:	3308      	adds	r3, #8
 80015dc:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HW_TS_Start+0x100>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	22ff      	movs	r2, #255	; 0xff
 80015e6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015e8:	2003      	movs	r0, #3
 80015ea:	f002 fd19 	bl	8004020 <HAL_NVIC_EnableIRQ>
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80015f8:	bf00      	nop
}
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2000009c 	.word	0x2000009c
 8001604:	20000250 	.word	0x20000250
 8001608:	2000012c 	.word	0x2000012c
 800160c:	2000012d 	.word	0x2000012d

08001610 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	460b      	mov	r3, r1
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4798      	blx	r3

  return;
 8001622:	bf00      	nop
}
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4603      	mov	r3, r0
 8001638:	73fb      	strb	r3, [r7, #15]
 800163a:	4613      	mov	r3, r2
 800163c:	81bb      	strh	r3, [r7, #12]
HAL_StatusTypeDef hal_status = HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	75fb      	strb	r3, [r7, #23]
hw_status_t hw_status = hw_uart_ok;
 8001642:	2300      	movs	r3, #0
 8001644:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d000      	beq.n	800164e <HW_UART_Transmit_DMA+0x22>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800164c:	e00e      	b.n	800166c <HW_UART_Transmit_DMA+0x40>
            HW_huart1TxCb = cb;
 800164e:	4a17      	ldr	r2, [pc, #92]	; (80016ac <HW_UART_Transmit_DMA+0x80>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <HW_UART_Transmit_DMA+0x84>)
 8001656:	4a17      	ldr	r2, [pc, #92]	; (80016b4 <HW_UART_Transmit_DMA+0x88>)
 8001658:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800165a:	89bb      	ldrh	r3, [r7, #12]
 800165c:	461a      	mov	r2, r3
 800165e:	68b9      	ldr	r1, [r7, #8]
 8001660:	4813      	ldr	r0, [pc, #76]	; (80016b0 <HW_UART_Transmit_DMA+0x84>)
 8001662:	f005 f8ed 	bl	8006840 <HAL_UART_Transmit_DMA>
 8001666:	4603      	mov	r3, r0
 8001668:	75fb      	strb	r3, [r7, #23]
            break;
 800166a:	bf00      	nop
    }

    switch (hal_status)
 800166c:	7dfb      	ldrb	r3, [r7, #23]
 800166e:	2b03      	cmp	r3, #3
 8001670:	d816      	bhi.n	80016a0 <HW_UART_Transmit_DMA+0x74>
 8001672:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <HW_UART_Transmit_DMA+0x4c>)
 8001674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001678:	08001689 	.word	0x08001689
 800167c:	0800168f 	.word	0x0800168f
 8001680:	08001695 	.word	0x08001695
 8001684:	0800169b 	.word	0x0800169b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001688:	2300      	movs	r3, #0
 800168a:	75bb      	strb	r3, [r7, #22]
            break;
 800168c:	e009      	b.n	80016a2 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800168e:	2301      	movs	r3, #1
 8001690:	75bb      	strb	r3, [r7, #22]
            break;
 8001692:	e006      	b.n	80016a2 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001694:	2302      	movs	r3, #2
 8001696:	75bb      	strb	r3, [r7, #22]
            break;
 8001698:	e003      	b.n	80016a2 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800169a:	2303      	movs	r3, #3
 800169c:	75bb      	strb	r3, [r7, #22]
            break;
 800169e:	e000      	b.n	80016a2 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 80016a0:	bf00      	nop
    }

    return hw_status;
 80016a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200013a8 	.word	0x200013a8
 80016b0:	20001498 	.word	0x20001498
 80016b4:	40013800 	.word	0x40013800

080016b8 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_UART_TxCpltCallback+0x30>)
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d000      	beq.n	80016ce <HAL_UART_TxCpltCallback+0x16>
                }
        break;
#endif

        default:
            break;
 80016cc:	e007      	b.n	80016de <HAL_UART_TxCpltCallback+0x26>
                if(HW_huart1TxCb)
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <HAL_UART_TxCpltCallback+0x34>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <HAL_UART_TxCpltCallback+0x24>
                    HW_huart1TxCb();
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_UART_TxCpltCallback+0x34>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4798      	blx	r3
        break;
 80016dc:	bf00      	nop
    }

    return;
 80016de:	bf00      	nop
}
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40013800 	.word	0x40013800
 80016ec:	200013a8 	.word	0x200013a8

080016f0 <LL_EXTI_DisableIT_0_31>:
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80016f8:	4b07      	ldr	r3, [pc, #28]	; (8001718 <LL_EXTI_DisableIT_0_31+0x28>)
 80016fa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	43db      	mvns	r3, r3
 8001702:	4905      	ldr	r1, [pc, #20]	; (8001718 <LL_EXTI_DisableIT_0_31+0x28>)
 8001704:	4013      	ands	r3, r2
 8001706:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	58000800 	.word	0x58000800

0800171c <LL_EXTI_DisableIT_32_63>:
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <LL_EXTI_DisableIT_32_63+0x28>)
 8001726:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	43db      	mvns	r3, r3
 800172e:	4905      	ldr	r1, [pc, #20]	; (8001744 <LL_EXTI_DisableIT_32_63+0x28>)
 8001730:	4013      	ands	r3, r2
 8001732:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	58000800 	.word	0x58000800

08001748 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001756:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800175a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001762:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800176e:	4313      	orrs	r3, r2
 8001770:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	cafecafe 	.word	0xcafecafe

08001784 <LL_RCC_HSI48_Enable>:
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001790:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <LL_RCC_HSI48_IsReady>:
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80017aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d101      	bne.n	80017be <LL_RCC_HSI48_IsReady+0x18>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <LL_RCC_HSI48_IsReady+0x1a>
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <LL_RCC_LSE_Enable>:
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_RCC_LSE_IsReady>:
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80017f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d101      	bne.n	8001804 <LL_RCC_LSE_IsReady+0x18>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <LL_RCC_LSE_IsReady+0x1a>
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_RCC_LSI1_Disable>:
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800181c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_RCC_SetRFWKPClockSource>:
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800183a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001842:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001846:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4313      	orrs	r3, r2
 800184e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <LL_RCC_SetCLK48ClockSource>:
  *         @arg @ref LL_RCC_CLK48_CLKSOURCE_PLL
  *         @arg @ref LL_RCC_CLK48_CLKSOURCE_MSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetCLK48ClockSource(uint32_t CLK48xSource)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8001866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4313      	orrs	r3, r2
 800187a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800188e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001896:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800189a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80018b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80018d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018e2:	d101      	bne.n	80018e8 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80018f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001904:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001908:	d101      	bne.n	800190e <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800191a:	b480      	push	{r7}
 800191c:	b085      	sub	sp, #20
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001926:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001928:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4313      	orrs	r3, r2
 8001930:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001936:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4013      	ands	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001958:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800195a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4313      	orrs	r3, r2
 8001962:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001968:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4013      	ands	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001970:	68fb      	ldr	r3, [r7, #12]
}
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800197e:	b480      	push	{r7}
 8001980:	b085      	sub	sp, #20
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800198c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4313      	orrs	r3, r2
 8001994:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4013      	ands	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	041b      	lsls	r3, r3, #16
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	605a      	str	r2, [r3, #4]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	605a      	str	r2, [r3, #4]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	041b      	lsls	r3, r3, #16
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	615a      	str	r2, [r3, #20]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695a      	ldr	r2, [r3, #20]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	615a      	str	r2, [r3, #20]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	609a      	str	r2, [r3, #8]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	619a      	str	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a78:	f002 f952 	bl	8003d20 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8001a7c:	f000 f96e 	bl	8001d5c <Reset_Device>
  Config_HSE();
 8001a80:	f000 f958 	bl	8001d34 <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a84:	f000 f814 	bl	8001ab0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8001a88:	f000 f937 	bl	8001cfa <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 8001a8c:	f000 f9a7 	bl	8001dde <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a90:	f000 f929 	bl	8001ce6 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a94:	f000 f90a 	bl	8001cac <MX_DMA_Init>
  MX_RF_Init();
 8001a98:	f000 f8d4 	bl	8001c44 <MX_RF_Init>
  MX_RTC_Init();
 8001a9c:	f000 f8da 	bl	8001c54 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  APPE_Init();
 8001aa0:	f7fe fe28 	bl	80006f4 <APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
		UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f009 f982 	bl	800adb0 <UTIL_SEQ_Run>
 8001aac:	e7fa      	b.n	8001aa4 <main+0x30>
	...

08001ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b0ae      	sub	sp, #184	; 0xb8
 8001ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001aba:	2248      	movs	r2, #72	; 0x48
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f009 fba7 	bl	800b212 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
 8001ad4:	615a      	str	r2, [r3, #20]
 8001ad6:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2250      	movs	r2, #80	; 0x50
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f009 fb97 	bl	800b212 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae4:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <SystemClock_Config+0xf4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aec:	4a2d      	ldr	r2, [pc, #180]	; (8001ba4 <SystemClock_Config+0xf4>)
 8001aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <SystemClock_Config+0xf4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8001b00:	230b      	movs	r3, #11
 8001b02:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b08:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b10:	2340      	movs	r3, #64	; 0x40
 8001b12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b16:	2305      	movs	r3, #5
 8001b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b22:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fad6 	bl	80050d8 <HAL_RCC_OscConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001b32:	f000 f975 	bl	8001e20 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001b36:	236f      	movs	r3, #111	; 0x6f
 8001b38:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b56:	2101      	movs	r1, #1
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f003 fe1b 	bl	8005794 <HAL_RCC_ClockConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001b64:	f000 f95c 	bl	8001e20 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001b68:	f643 0303 	movw	r3, #14339	; 0x3803
 8001b6c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b7a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 8001b7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b80:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001b82:	2302      	movs	r3, #2
 8001b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f004 fa3c 	bl	800600a <HAL_RCCEx_PeriphCLKConfig>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001b98:	f000 f942 	bl	8001e20 <Error_Handler>
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	37b8      	adds	r7, #184	; 0xb8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	58000400 	.word	0x58000400

08001ba8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bac:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <MX_USART1_UART_Init+0x94>)
 8001bae:	4a24      	ldr	r2, [pc, #144]	; (8001c40 <MX_USART1_UART_Init+0x98>)
 8001bb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bb2:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <MX_USART1_UART_Init+0x94>)
 8001bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <MX_USART1_UART_Init+0x94>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <MX_USART1_UART_Init+0x94>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <MX_USART1_UART_Init+0x94>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <MX_USART1_UART_Init+0x94>)
 8001bce:	220c      	movs	r2, #12
 8001bd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <MX_USART1_UART_Init+0x94>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <MX_USART1_UART_Init+0x94>)
 8001bda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bde:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001be0:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <MX_USART1_UART_Init+0x94>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <MX_USART1_UART_Init+0x94>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <MX_USART1_UART_Init+0x94>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bf2:	4812      	ldr	r0, [pc, #72]	; (8001c3c <MX_USART1_UART_Init+0x94>)
 8001bf4:	f004 fdd3 	bl	800679e <HAL_UART_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001bfe:	f000 f90f 	bl	8001e20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c02:	2100      	movs	r1, #0
 8001c04:	480d      	ldr	r0, [pc, #52]	; (8001c3c <MX_USART1_UART_Init+0x94>)
 8001c06:	f006 fb3d 	bl	8008284 <HAL_UARTEx_SetTxFifoThreshold>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001c10:	f000 f906 	bl	8001e20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c14:	2100      	movs	r1, #0
 8001c16:	4809      	ldr	r0, [pc, #36]	; (8001c3c <MX_USART1_UART_Init+0x94>)
 8001c18:	f006 fb72 	bl	8008300 <HAL_UARTEx_SetRxFifoThreshold>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001c22:	f000 f8fd 	bl	8001e20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_USART1_UART_Init+0x94>)
 8001c28:	f006 faf3 	bl	8008212 <HAL_UARTEx_DisableFifoMode>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001c32:	f000 f8f5 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20001498 	.word	0x20001498
 8001c40:	40013800 	.word	0x40013800

08001c44 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <MX_RTC_Init+0x50>)
 8001c5a:	4a13      	ldr	r2, [pc, #76]	; (8001ca8 <MX_RTC_Init+0x54>)
 8001c5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <MX_RTC_Init+0x50>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <MX_RTC_Init+0x50>)
 8001c66:	220f      	movs	r2, #15
 8001c68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <MX_RTC_Init+0x50>)
 8001c6c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001c70:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c72:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <MX_RTC_Init+0x50>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <MX_RTC_Init+0x50>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <MX_RTC_Init+0x50>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c84:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <MX_RTC_Init+0x50>)
 8001c86:	f004 fc46 	bl	8006516 <HAL_RTC_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8001c90:	f000 f8c6 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, CFG_RTC_WUCKSEL_DIVIDER);
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <MX_RTC_Init+0x54>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	4a03      	ldr	r2, [pc, #12]	; (8001ca8 <MX_RTC_Init+0x54>)
 8001c9a:	f023 0307 	bic.w	r3, r3, #7
 8001c9e:	6093      	str	r3, [r2, #8]
  /* USER CODE END RTC_Init 2 */

}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20001524 	.word	0x20001524
 8001ca8:	40002800 	.word	0x40002800

08001cac <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001cb0:	2004      	movs	r0, #4
 8001cb2:	f7ff fe32 	bl	800191a <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f7ff fe2f 	bl	800191a <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f7ff fe2c 	bl	800191a <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	210f      	movs	r1, #15
 8001cc6:	200e      	movs	r0, #14
 8001cc8:	f002 f990 	bl	8003fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001ccc:	200e      	movs	r0, #14
 8001cce:	f002 f9a7 	bl	8004020 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	210f      	movs	r1, #15
 8001cd6:	203a      	movs	r0, #58	; 0x3a
 8001cd8:	f002 f988 	bl	8003fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001cdc:	203a      	movs	r0, #58	; 0x3a
 8001cde:	f002 f99f 	bl	8004020 <HAL_NVIC_EnableIRQ>

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	2001      	movs	r0, #1
 8001cec:	f7ff fe2e 	bl	800194c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf0:	2002      	movs	r0, #2
 8001cf2:	f7ff fe2b 	bl	800194c <LL_AHB2_GRP1_EnableClock>

}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <PeriphClock_Config>:

/* USER CODE BEGIN 4 */

void PeriphClock_Config(void)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	af00      	add	r7, sp, #0
#endif

	/**
	 * Select LSE clock
	 */
	LL_RCC_LSE_Enable();
 8001cfe:	f7ff fd64 	bl	80017ca <LL_RCC_LSE_Enable>
	while(!LL_RCC_LSE_IsReady());
 8001d02:	bf00      	nop
 8001d04:	f7ff fd72 	bl	80017ec <LL_RCC_LSE_IsReady>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0fa      	beq.n	8001d04 <PeriphClock_Config+0xa>

	/**
	 * Select wakeup source of BLE RF
	 */
	LL_RCC_SetRFWKPClockSource(LL_RCC_RFWKP_CLKSOURCE_LSE);
 8001d0e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d12:	f7ff fd8e 	bl	8001832 <LL_RCC_SetRFWKPClockSource>

	/**
	 * Switch OFF LSI
	 */
	LL_RCC_LSI1_Disable();
 8001d16:	f7ff fd7b 	bl	8001810 <LL_RCC_LSI1_Disable>


	/**
	 * Set RNG on HSI48
	 */
	LL_RCC_HSI48_Enable();
 8001d1a:	f7ff fd33 	bl	8001784 <LL_RCC_HSI48_Enable>
	while(!LL_RCC_HSI48_IsReady());
 8001d1e:	bf00      	nop
 8001d20:	f7ff fd41 	bl	80017a6 <LL_RCC_HSI48_IsReady>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0fa      	beq.n	8001d20 <PeriphClock_Config+0x26>
	LL_RCC_SetCLK48ClockSource(LL_RCC_CLK48_CLKSOURCE_HSI48);
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f7ff fd97 	bl	800185e <LL_RCC_SetCLK48ClockSource>

	return;
 8001d30:	bf00      	nop
}
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f007 ff16 	bl	8009b6c <OTP_Read>
 8001d40:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	799b      	ldrb	r3, [r3, #6]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fcfb 	bl	8001748 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001d52:	bf00      	nop
 8001d54:	bf00      	nop
}  
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <Reset_Device>:


static void Reset_Device( void )
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 8001d60:	f000 f826 	bl	8001db0 <Reset_BackupDomain>

	Reset_IPCC();
 8001d64:	f000 f802 	bl	8001d6c <Reset_IPCC>
#endif

	return;
 8001d68:	bf00      	nop
}
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001d70:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001d74:	f7ff fe03 	bl	800197e <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8001d78:	213f      	movs	r1, #63	; 0x3f
 8001d7a:	480c      	ldr	r0, [pc, #48]	; (8001dac <Reset_IPCC+0x40>)
 8001d7c:	f7ff fe5e 	bl	8001a3c <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 8001d80:	213f      	movs	r1, #63	; 0x3f
 8001d82:	480a      	ldr	r0, [pc, #40]	; (8001dac <Reset_IPCC+0x40>)
 8001d84:	f7ff fe68 	bl	8001a58 <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8001d88:	213f      	movs	r1, #63	; 0x3f
 8001d8a:	4808      	ldr	r0, [pc, #32]	; (8001dac <Reset_IPCC+0x40>)
 8001d8c:	f7ff fe10 	bl	80019b0 <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 8001d90:	213f      	movs	r1, #63	; 0x3f
 8001d92:	4806      	ldr	r0, [pc, #24]	; (8001dac <Reset_IPCC+0x40>)
 8001d94:	f7ff fe2f 	bl	80019f6 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8001d98:	213f      	movs	r1, #63	; 0x3f
 8001d9a:	4804      	ldr	r0, [pc, #16]	; (8001dac <Reset_IPCC+0x40>)
 8001d9c:	f7ff fe1a 	bl	80019d4 <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 8001da0:	213f      	movs	r1, #63	; 0x3f
 8001da2:	4802      	ldr	r0, [pc, #8]	; (8001dac <Reset_IPCC+0x40>)
 8001da4:	f7ff fe39 	bl	8001a1a <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8001da8:	bf00      	nop
}
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	58000c00 	.word	0x58000c00

08001db0 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001db4:	f7ff fd8b 	bl	80018ce <LL_RCC_IsActiveFlag_PINRST>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00d      	beq.n	8001dda <Reset_BackupDomain+0x2a>
 8001dbe:	f7ff fd99 	bl	80018f4 <LL_RCC_IsActiveFlag_SFTRST>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d108      	bne.n	8001dda <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001dc8:	f002 fdd4 	bl	8004974 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8001dcc:	f002 fdd2 	bl	8004974 <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 8001dd0:	f7ff fd5b 	bl	800188a <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 8001dd4:	f7ff fd6a 	bl	80018ac <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
}
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <Init_Exti>:

static void Init_Exti( void )
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8001de2:	f04f 30ff 	mov.w	r0, #4294967295
 8001de6:	f7ff fc83 	bl	80016f0 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8001dea:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8001dee:	f7ff fc95 	bl	800171c <LL_EXTI_DisableIT_32_63>

  return;
 8001df2:	bf00      	nop
}
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_InitTick>:

/**
 * This function is empty to avoid starting the SysTick Timer
 */
HAL_StatusTypeDef HAL_InitTick( uint32_t TickPriority )
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
	return (HAL_OK);
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_Delay>:

/**
 * This function is empty as the SysTick Timer is not used
 */
void HAL_Delay(__IO uint32_t Delay)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	return;
 8001e14:	bf00      	nop
}
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <LL_RCC_SetRTCClockSource>:
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <LL_RCC_EnableRTC>:
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_AHB2_GRP1_EnableClock>:
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <LL_AHB3_GRP1_EnableClock>:
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b085      	sub	sp, #20
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ebc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPUART1
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4013      	ands	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f04:	68fb      	ldr	r3, [r7, #12]
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b085      	sub	sp, #20
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4013      	ands	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f36:	68fb      	ldr	r3, [r7, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001f48:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001f4c:	f7ff ffaf 	bl	8001eae <LL_AHB3_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a61      	ldr	r2, [pc, #388]	; (80020f8 <HAL_UART_MspInit+0x1a4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d159      	bne.n	800202a <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f76:	2001      	movs	r0, #1
 8001f78:	f7ff ffb2 	bl	8001ee0 <LL_APB1_GRP2_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f7ff ff7d 	bl	8001e7c <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PA6     ------> LPUART1_CTS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f82:	230c      	movs	r3, #12
 8001f84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001f92:	2308      	movs	r3, #8
 8001f94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f96:	f107 030c 	add.w	r3, r7, #12
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa0:	f002 fb48 	bl	8004634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fa4:	2340      	movs	r3, #64	; 0x40
 8001fa6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb8:	f107 030c 	add.w	r3, r7, #12
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc2:	f002 fb37 	bl	8004634 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8001fc6:	4b4d      	ldr	r3, [pc, #308]	; (80020fc <HAL_UART_MspInit+0x1a8>)
 8001fc8:	4a4d      	ldr	r2, [pc, #308]	; (8002100 <HAL_UART_MspInit+0x1ac>)
 8001fca:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001fcc:	4b4b      	ldr	r3, [pc, #300]	; (80020fc <HAL_UART_MspInit+0x1a8>)
 8001fce:	2211      	movs	r2, #17
 8001fd0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fd2:	4b4a      	ldr	r3, [pc, #296]	; (80020fc <HAL_UART_MspInit+0x1a8>)
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd8:	4b48      	ldr	r3, [pc, #288]	; (80020fc <HAL_UART_MspInit+0x1a8>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fde:	4b47      	ldr	r3, [pc, #284]	; (80020fc <HAL_UART_MspInit+0x1a8>)
 8001fe0:	2280      	movs	r2, #128	; 0x80
 8001fe2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fe4:	4b45      	ldr	r3, [pc, #276]	; (80020fc <HAL_UART_MspInit+0x1a8>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fea:	4b44      	ldr	r3, [pc, #272]	; (80020fc <HAL_UART_MspInit+0x1a8>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001ff0:	4b42      	ldr	r3, [pc, #264]	; (80020fc <HAL_UART_MspInit+0x1a8>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ff6:	4b41      	ldr	r3, [pc, #260]	; (80020fc <HAL_UART_MspInit+0x1a8>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001ffc:	483f      	ldr	r0, [pc, #252]	; (80020fc <HAL_UART_MspInit+0x1a8>)
 8001ffe:	f002 f847 	bl	8004090 <HAL_DMA_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 8002008:	f7ff ff0a 	bl	8001e20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3b      	ldr	r2, [pc, #236]	; (80020fc <HAL_UART_MspInit+0x1a8>)
 8002010:	675a      	str	r2, [r3, #116]	; 0x74
 8002012:	4a3a      	ldr	r2, [pc, #232]	; (80020fc <HAL_UART_MspInit+0x1a8>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	2100      	movs	r1, #0
 800201c:	2025      	movs	r0, #37	; 0x25
 800201e:	f001 ffe5 	bl	8003fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002022:	2025      	movs	r0, #37	; 0x25
 8002024:	f001 fffc 	bl	8004020 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002028:	e061      	b.n	80020ee <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a35      	ldr	r2, [pc, #212]	; (8002104 <HAL_UART_MspInit+0x1b0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d15c      	bne.n	80020ee <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002034:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002038:	f7ff ff6b 	bl	8001f12 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203c:	2001      	movs	r0, #1
 800203e:	f7ff ff1d 	bl	8001e7c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002042:	2002      	movs	r0, #2
 8002044:	f7ff ff1a 	bl	8001e7c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002048:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800204c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800205a:	2307      	movs	r3, #7
 800205c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 030c 	add.w	r3, r7, #12
 8002062:	4619      	mov	r1, r3
 8002064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002068:	f002 fae4 	bl	8004634 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800206c:	23c0      	movs	r3, #192	; 0xc0
 800206e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002074:	2301      	movs	r3, #1
 8002076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002078:	2303      	movs	r3, #3
 800207a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800207c:	2307      	movs	r3, #7
 800207e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002080:	f107 030c 	add.w	r3, r7, #12
 8002084:	4619      	mov	r1, r3
 8002086:	4820      	ldr	r0, [pc, #128]	; (8002108 <HAL_UART_MspInit+0x1b4>)
 8002088:	f002 fad4 	bl	8004634 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 800208c:	4b1f      	ldr	r3, [pc, #124]	; (800210c <HAL_UART_MspInit+0x1b8>)
 800208e:	4a20      	ldr	r2, [pc, #128]	; (8002110 <HAL_UART_MspInit+0x1bc>)
 8002090:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002092:	4b1e      	ldr	r3, [pc, #120]	; (800210c <HAL_UART_MspInit+0x1b8>)
 8002094:	220f      	movs	r2, #15
 8002096:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002098:	4b1c      	ldr	r3, [pc, #112]	; (800210c <HAL_UART_MspInit+0x1b8>)
 800209a:	2210      	movs	r2, #16
 800209c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800209e:	4b1b      	ldr	r3, [pc, #108]	; (800210c <HAL_UART_MspInit+0x1b8>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_UART_MspInit+0x1b8>)
 80020a6:	2280      	movs	r2, #128	; 0x80
 80020a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020aa:	4b18      	ldr	r3, [pc, #96]	; (800210c <HAL_UART_MspInit+0x1b8>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020b0:	4b16      	ldr	r3, [pc, #88]	; (800210c <HAL_UART_MspInit+0x1b8>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80020b6:	4b15      	ldr	r3, [pc, #84]	; (800210c <HAL_UART_MspInit+0x1b8>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <HAL_UART_MspInit+0x1b8>)
 80020be:	2200      	movs	r2, #0
 80020c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80020c2:	4812      	ldr	r0, [pc, #72]	; (800210c <HAL_UART_MspInit+0x1b8>)
 80020c4:	f001 ffe4 	bl	8004090 <HAL_DMA_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_UART_MspInit+0x17e>
      Error_Handler();
 80020ce:	f7ff fea7 	bl	8001e20 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a0d      	ldr	r2, [pc, #52]	; (800210c <HAL_UART_MspInit+0x1b8>)
 80020d6:	675a      	str	r2, [r3, #116]	; 0x74
 80020d8:	4a0c      	ldr	r2, [pc, #48]	; (800210c <HAL_UART_MspInit+0x1b8>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	2024      	movs	r0, #36	; 0x24
 80020e4:	f001 ff82 	bl	8003fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020e8:	2024      	movs	r0, #36	; 0x24
 80020ea:	f001 ff99 	bl	8004020 <HAL_NVIC_EnableIRQ>
}
 80020ee:	bf00      	nop
 80020f0:	3720      	adds	r7, #32
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40008000 	.word	0x40008000
 80020fc:	20001548 	.word	0x20001548
 8002100:	40020044 	.word	0x40020044
 8002104:	40013800 	.word	0x40013800
 8002108:	48000400 	.word	0x48000400
 800210c:	20001438 	.word	0x20001438
 8002110:	40020444 	.word	0x40020444

08002114 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a09      	ldr	r2, [pc, #36]	; (8002148 <HAL_RTC_MspInit+0x34>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d10c      	bne.n	8002140 <HAL_RTC_MspInit+0x2c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002126:	f002 fc25 	bl	8004974 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 800212a:	f002 fc23 	bl	8004974 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 800212e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002132:	f7ff fe7c 	bl	8001e2e <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002136:	f7ff fe90 	bl	8001e5a <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f004 fad9 	bl	80066f2 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40002800 	.word	0x40002800

0800214c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215e:	e7fe      	b.n	800215e <HardFault_Handler+0x4>

08002160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002164:	e7fe      	b.n	8002164 <MemManage_Handler+0x4>

08002166 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800216a:	e7fe      	b.n	800216a <BusFault_Handler+0x4>

0800216c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <UsageFault_Handler+0x4>

08002172 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a0:	f001 fdde 	bl	8003d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <DMA1_Channel4_IRQHandler+0x10>)
 80021ae:	f002 f8f1 	bl	8004394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20001548 	.word	0x20001548

080021bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <USART1_IRQHandler+0x10>)
 80021c2:	f004 fbbd 	bl	8006940 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20001498 	.word	0x20001498

080021d0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <LPUART1_IRQHandler+0x10>)
 80021d6:	f004 fbb3 	bl	8006940 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	200013ac 	.word	0x200013ac

080021e4 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <DMA2_Channel4_IRQHandler+0x10>)
 80021ea:	f002 f8d3 	bl	8004394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20001438 	.word	0x20001438

080021f8 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80021fc:	2010      	movs	r0, #16
 80021fe:	f002 fba1 	bl	8004944 <HAL_GPIO_EXTI_IRQHandler>
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}

08002206 <RTC_WKUP_IRQHandler>:
{

}

void RTC_WKUP_IRQHandler(void)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 800220a:	f7fe fecb 	bl	8000fa4 <HW_TS_RTC_Wakeup_Handler>
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}

08002212 <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8002216:	f001 fa71 	bl	80036fc <HW_IPCC_Tx_Handler>

  return;
 800221a:	bf00      	nop
}
 800221c:	bd80      	pop	{r7, pc}

0800221e <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8002222:	f001 fa33 	bl	800368c <HW_IPCC_Rx_Handler>
  return;
 8002226:	bf00      	nop
}
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <LL_FLASH_GetUDN+0x14>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	1fff7580 	.word	0x1fff7580

08002244 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x05
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x05)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <LL_FLASH_GetDeviceID+0x14>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	b2db      	uxtb	r3, r3
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	1fff7584 	.word	0x1fff7584

0800225c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <LL_FLASH_GetSTCompanyID+0x14>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	0a1b      	lsrs	r3, r3, #8
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	1fff7584 	.word	0x1fff7584

08002274 <APP_BLE_Init>:

/* USER CODE END 0 */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8002274:	b5b0      	push	{r4, r5, r7, lr}
 8002276:	b08c      	sub	sp, #48	; 0x30
 8002278:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800227a:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <APP_BLE_Init+0x7c>)
 800227c:	463c      	mov	r4, r7
 800227e:	461d      	mov	r5, r3
 8002280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002288:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800228c:	c407      	stmia	r4!, {r0, r1, r2}
 800228e:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8002290:	f000 fa46 	bl	8002720 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002294:	2101      	movs	r1, #1
 8002296:	2002      	movs	r0, #2
 8002298:	f008 fd5c 	bl	800ad54 <UTIL_LPM_SetOffMode>

/**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800229c:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <APP_BLE_Init+0x80>)
 800229e:	2100      	movs	r1, #0
 80022a0:	2020      	movs	r0, #32
 80022a2:	f008 fe61 	bl	800af68 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 80022a6:	463b      	mov	r3, r7
 80022a8:	4618      	mov	r0, r3
 80022aa:	f007 fc87 	bl	8009bbc <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80022ae:	f000 fa4d 	bl	800274c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80022b2:	f008 fad7 	bl	800a864 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 80022b6:	4a10      	ldr	r2, [pc, #64]	; (80022f8 <APP_BLE_Init+0x84>)
 80022b8:	2100      	movs	r1, #0
 80022ba:	2001      	movs	r0, #1
 80022bc:	f008 fe54 	bl	800af68 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
 80022c0:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <APP_BLE_Init+0x88>)
 80022c2:	2100      	movs	r1, #0
 80022c4:	2002      	movs	r0, #2
 80022c6:	f008 fe4f 	bl	800af68 <UTIL_SEQ_RegTask>

  /**
   * Initialization of the BLE App Context
   */

      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <APP_BLE_Init+0x8c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    /*Radio mask Activity*/
#if (OOB_DEMO != 0)  
  aci_hal_set_radio_activity_mask(0x0020);
 80022d2:	2020      	movs	r0, #32
 80022d4:	f007 f8cb 	bl	800946e <aci_hal_set_radio_activity_mask>
#endif 
  /**
   * Initialize P2P Client Application
   */
  P2PC_APP_Init();
 80022d8:	f000 fc04 	bl	8002ae4 <P2PC_APP_Init>

#if (OOB_DEMO != 0)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <APP_BLE_Init+0x90>)
 80022de:	2200      	movs	r2, #0
 80022e0:	4909      	ldr	r1, [pc, #36]	; (8002308 <APP_BLE_Init+0x94>)
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7ff f80e 	bl	8001304 <HW_TS_Create>
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
#endif 
/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 80022e8:	bf00      	nop
}
 80022ea:	3730      	adds	r7, #48	; 0x30
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bdb0      	pop	{r4, r5, r7, pc}
 80022f0:	0800c1bc 	.word	0x0800c1bc
 80022f4:	08009859 	.word	0x08009859
 80022f8:	080028c1 	.word	0x080028c1
 80022fc:	0800291d 	.word	0x0800291d
 8002300:	20000138 	.word	0x20000138
 8002304:	08002999 	.word	0x08002999
 8002308:	200001c9 	.word	0x200001c9

0800230c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800230c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800230e:	b097      	sub	sp, #92	; 0x5c
 8002310:	af06      	add	r7, sp, #24
 8002312:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  evt_blue_aci *blue_evt;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3301      	adds	r3, #1
 8002318:	63bb      	str	r3, [r7, #56]	; 0x38
  hci_disconnection_complete_event_rp0 *cc = (void *) event_pckt->data;
 800231a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231c:	3302      	adds	r3, #2
 800231e:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t result;
  uint8_t event_type, event_data_size;
  int k = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t adtype, adlength;

  switch (event_pckt->evt)
 8002324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b3e      	cmp	r3, #62	; 0x3e
 800232a:	f000 80b4 	beq.w	8002496 <SVCCTL_App_Notification+0x18a>
 800232e:	2bff      	cmp	r3, #255	; 0xff
 8002330:	d003      	beq.n	800233a <SVCCTL_App_Notification+0x2e>
 8002332:	2b05      	cmp	r3, #5
 8002334:	f000 8091 	beq.w	800245a <SVCCTL_App_Notification+0x14e>

    default:
      /* USER CODE BEGIN evt_default */

      /* USER CODE END evt_default */
      break;
 8002338:	e1ad      	b.n	8002696 <SVCCTL_App_Notification+0x38a>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800233a:	4ba8      	ldr	r3, [pc, #672]	; (80025dc <SVCCTL_App_Notification+0x2d0>)
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8002340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002342:	3302      	adds	r3, #2
 8002344:	633b      	str	r3, [r7, #48]	; 0x30
      switch (blue_evt->ecode)
 8002346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	b29b      	uxth	r3, r3
 800234c:	f240 4207 	movw	r2, #1031	; 0x407
 8002350:	4293      	cmp	r3, r2
 8002352:	d006      	beq.n	8002362 <SVCCTL_App_Notification+0x56>
 8002354:	f640 0202 	movw	r2, #2050	; 0x802
 8002358:	4293      	cmp	r3, r2
 800235a:	d022      	beq.n	80023a2 <SVCCTL_App_Notification+0x96>
 800235c:	2b04      	cmp	r3, #4
 800235e:	d06f      	beq.n	8002440 <SVCCTL_App_Notification+0x134>
          break;
 8002360:	e07a      	b.n	8002458 <SVCCTL_App_Notification+0x14c>
          aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blue_evt->data;
 8002362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002364:	3302      	adds	r3, #2
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
          if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d172      	bne.n	8002456 <SVCCTL_App_Notification+0x14a>
              && gap_evt_proc_complete->Status == 0x00)
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	785b      	ldrb	r3, [r3, #1]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d16e      	bne.n	8002456 <SVCCTL_App_Notification+0x14a>
              BSP_LED_Off(LED_BLUE);
 8002378:	2000      	movs	r0, #0
 800237a:	f001 fb3d 	bl	80039f8 <BSP_LED_Off>
            APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE_COMPLETED\n");
 800237e:	4898      	ldr	r0, [pc, #608]	; (80025e0 <SVCCTL_App_Notification+0x2d4>)
 8002380:	f008 ffd8 	bl	800b334 <puts>
            if (BleApplicationContext.DeviceServerFound == 0x01 && BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 8002384:	4b97      	ldr	r3, [pc, #604]	; (80025e4 <SVCCTL_App_Notification+0x2d8>)
 8002386:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800238a:	2b01      	cmp	r3, #1
 800238c:	d163      	bne.n	8002456 <SVCCTL_App_Notification+0x14a>
 800238e:	4b95      	ldr	r3, [pc, #596]	; (80025e4 <SVCCTL_App_Notification+0x2d8>)
 8002390:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002394:	2b06      	cmp	r3, #6
 8002396:	d05e      	beq.n	8002456 <SVCCTL_App_Notification+0x14a>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 8002398:	2100      	movs	r1, #0
 800239a:	2002      	movs	r0, #2
 800239c:	f008 fe04 	bl	800afa8 <UTIL_SEQ_SetTask>
        break;
 80023a0:	e059      	b.n	8002456 <SVCCTL_App_Notification+0x14a>
          aci_l2cap_connection_update_req_event_rp0 *pr = (aci_l2cap_connection_update_req_event_rp0 *) blue_evt->data;
 80023a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a4:	3302      	adds	r3, #2
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
          aci_hal_set_radio_activity_mask(0x0000);
 80023a8:	2000      	movs	r0, #0
 80023aa:	f007 f860 	bl	800946e <aci_hal_set_radio_activity_mask>
          APP_BLE_p2p_Conn_Update_req.Identifier = pr->Identifier;
 80023ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b0:	789a      	ldrb	r2, [r3, #2]
 80023b2:	4b8d      	ldr	r3, [pc, #564]	; (80025e8 <SVCCTL_App_Notification+0x2dc>)
 80023b4:	701a      	strb	r2, [r3, #0]
          APP_BLE_p2p_Conn_Update_req.L2CAP_Length = pr->L2CAP_Length;
 80023b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80023bc:	b29a      	uxth	r2, r3
 80023be:	4b8a      	ldr	r3, [pc, #552]	; (80025e8 <SVCCTL_App_Notification+0x2dc>)
 80023c0:	805a      	strh	r2, [r3, #2]
          APP_BLE_p2p_Conn_Update_req.Interval_Min = pr->Interval_Min;
 80023c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	4b87      	ldr	r3, [pc, #540]	; (80025e8 <SVCCTL_App_Notification+0x2dc>)
 80023cc:	809a      	strh	r2, [r3, #4]
          APP_BLE_p2p_Conn_Update_req.Interval_Max = pr->Interval_Max;
 80023ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d0:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	4b84      	ldr	r3, [pc, #528]	; (80025e8 <SVCCTL_App_Notification+0x2dc>)
 80023d8:	80da      	strh	r2, [r3, #6]
          APP_BLE_p2p_Conn_Update_req.Slave_Latency = pr->Slave_Latency;
 80023da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023dc:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	4b81      	ldr	r3, [pc, #516]	; (80025e8 <SVCCTL_App_Notification+0x2dc>)
 80023e4:	811a      	strh	r2, [r3, #8]
          APP_BLE_p2p_Conn_Update_req.Timeout_Multiplier = pr->Timeout_Multiplier;
 80023e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e8:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	4b7e      	ldr	r3, [pc, #504]	; (80025e8 <SVCCTL_App_Notification+0x2dc>)
 80023f0:	815a      	strh	r2, [r3, #10]
          result = aci_l2cap_connection_parameter_update_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 80023f2:	4b7c      	ldr	r3, [pc, #496]	; (80025e4 <SVCCTL_App_Notification+0x2d8>)
 80023f4:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 80023f6:	4b7c      	ldr	r3, [pc, #496]	; (80025e8 <SVCCTL_App_Notification+0x2dc>)
 80023f8:	889c      	ldrh	r4, [r3, #4]
 80023fa:	4b7b      	ldr	r3, [pc, #492]	; (80025e8 <SVCCTL_App_Notification+0x2dc>)
 80023fc:	88dd      	ldrh	r5, [r3, #6]
 80023fe:	4b7a      	ldr	r3, [pc, #488]	; (80025e8 <SVCCTL_App_Notification+0x2dc>)
 8002400:	891e      	ldrh	r6, [r3, #8]
 8002402:	4b79      	ldr	r3, [pc, #484]	; (80025e8 <SVCCTL_App_Notification+0x2dc>)
 8002404:	895b      	ldrh	r3, [r3, #10]
 8002406:	4a78      	ldr	r2, [pc, #480]	; (80025e8 <SVCCTL_App_Notification+0x2dc>)
 8002408:	7812      	ldrb	r2, [r2, #0]
 800240a:	2101      	movs	r1, #1
 800240c:	9104      	str	r1, [sp, #16]
 800240e:	9203      	str	r2, [sp, #12]
 8002410:	2210      	movs	r2, #16
 8002412:	9202      	str	r2, [sp, #8]
 8002414:	2210      	movs	r2, #16
 8002416:	9201      	str	r2, [sp, #4]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	4633      	mov	r3, r6
 800241c:	462a      	mov	r2, r5
 800241e:	4621      	mov	r1, r4
 8002420:	f007 f89f 	bl	8009562 <aci_l2cap_connection_parameter_update_resp>
 8002424:	4603      	mov	r3, r0
 8002426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          if(result != BLE_STATUS_SUCCESS) {
 800242a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <SVCCTL_App_Notification+0x12c>
              BSP_LED_On(LED_RED);
 8002432:	2002      	movs	r0, #2
 8002434:	f001 fac6 	bl	80039c4 <BSP_LED_On>
          aci_hal_set_radio_activity_mask(0x0020);
 8002438:	2020      	movs	r0, #32
 800243a:	f007 f818 	bl	800946e <aci_hal_set_radio_activity_mask>
        break;
 800243e:	e00b      	b.n	8002458 <SVCCTL_App_Notification+0x14c>
          BSP_LED_On(LED_GREEN);
 8002440:	2001      	movs	r0, #1
 8002442:	f001 fabf 	bl	80039c4 <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8002446:	4b67      	ldr	r3, [pc, #412]	; (80025e4 <SVCCTL_App_Notification+0x2d8>)
 8002448:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800244c:	210a      	movs	r1, #10
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff f858 	bl	8001504 <HW_TS_Start>
        break; 
 8002454:	e000      	b.n	8002458 <SVCCTL_App_Notification+0x14c>
        break;
 8002456:	bf00      	nop
    break; 
 8002458:	e11d      	b.n	8002696 <SVCCTL_App_Notification+0x38a>
      if (cc->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800245a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002460:	b29a      	uxth	r2, r3
 8002462:	4b60      	ldr	r3, [pc, #384]	; (80025e4 <SVCCTL_App_Notification+0x2d8>)
 8002464:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002466:	429a      	cmp	r2, r3
 8002468:	f040 8114 	bne.w	8002694 <SVCCTL_App_Notification+0x388>
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800246c:	4b5d      	ldr	r3, [pc, #372]	; (80025e4 <SVCCTL_App_Notification+0x2d8>)
 800246e:	2200      	movs	r2, #0
 8002470:	84da      	strh	r2, [r3, #38]	; 0x26
            BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <SVCCTL_App_Notification+0x2d8>)
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH SERVER \n");
 800247a:	485c      	ldr	r0, [pc, #368]	; (80025ec <SVCCTL_App_Notification+0x2e0>)
 800247c:	f008 ff5a 	bl	800b334 <puts>
            handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8002480:	4b56      	ldr	r3, [pc, #344]	; (80025dc <SVCCTL_App_Notification+0x2d0>)
 8002482:	2201      	movs	r2, #1
 8002484:	701a      	strb	r2, [r3, #0]
            handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002486:	4b57      	ldr	r3, [pc, #348]	; (80025e4 <SVCCTL_App_Notification+0x2d8>)
 8002488:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800248a:	4b54      	ldr	r3, [pc, #336]	; (80025dc <SVCCTL_App_Notification+0x2d0>)
 800248c:	805a      	strh	r2, [r3, #2]
            P2PC_APP_Notification(&handleNotification);
 800248e:	4853      	ldr	r0, [pc, #332]	; (80025dc <SVCCTL_App_Notification+0x2d0>)
 8002490:	f000 fb6e 	bl	8002b70 <P2PC_APP_Notification>
      break; /* EVT_DISCONN_COMPLETE */
 8002494:	e0fe      	b.n	8002694 <SVCCTL_App_Notification+0x388>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8002496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002498:	3302      	adds	r3, #2
 800249a:	623b      	str	r3, [r7, #32]
      switch (meta_evt->subevent)
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d002      	beq.n	80024aa <SVCCTL_App_Notification+0x19e>
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d031      	beq.n	800250c <SVCCTL_App_Notification+0x200>
          break;
 80024a8:	e0f3      	b.n	8002692 <SVCCTL_App_Notification+0x386>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	3301      	adds	r3, #1
 80024ae:	60fb      	str	r3, [r7, #12]
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	4b4a      	ldr	r3, [pc, #296]	; (80025e4 <SVCCTL_App_Notification+0x2d8>)
 80024ba:	84da      	strh	r2, [r3, #38]	; 0x26
          BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80024bc:	4b49      	ldr	r3, [pc, #292]	; (80025e4 <SVCCTL_App_Notification+0x2d8>)
 80024be:	2206      	movs	r2, #6
 80024c0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          APP_DBG_MSG("\r\n\r** CONNECTION EVENT WITH SERVER \n");
 80024c4:	484a      	ldr	r0, [pc, #296]	; (80025f0 <SVCCTL_App_Notification+0x2e4>)
 80024c6:	f008 ff35 	bl	800b334 <puts>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 80024ca:	4b44      	ldr	r3, [pc, #272]	; (80025dc <SVCCTL_App_Notification+0x2d0>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80024d0:	4b44      	ldr	r3, [pc, #272]	; (80025e4 <SVCCTL_App_Notification+0x2d8>)
 80024d2:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80024d4:	4b41      	ldr	r3, [pc, #260]	; (80025dc <SVCCTL_App_Notification+0x2d0>)
 80024d6:	805a      	strh	r2, [r3, #2]
          P2PC_APP_Notification(&handleNotification);
 80024d8:	4840      	ldr	r0, [pc, #256]	; (80025dc <SVCCTL_App_Notification+0x2d0>)
 80024da:	f000 fb49 	bl	8002b70 <P2PC_APP_Notification>
          result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80024de:	4b41      	ldr	r3, [pc, #260]	; (80025e4 <SVCCTL_App_Notification+0x2d8>)
 80024e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024e2:	4618      	mov	r0, r3
 80024e4:	f006 fc1b 	bl	8008d1e <aci_gatt_disc_all_primary_services>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          if (result == BLE_STATUS_SUCCESS)
 80024ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <SVCCTL_App_Notification+0x1f8>
            APP_DBG_MSG("\r\n\r** GATT SERVICES & CHARACTERISTICS DISCOVERY  \n");
 80024f6:	483f      	ldr	r0, [pc, #252]	; (80025f4 <SVCCTL_App_Notification+0x2e8>)
 80024f8:	f008 ff1c 	bl	800b334 <puts>
            APP_DBG_MSG("* GATT :  Start Searching Primary Services \r\n\r");
 80024fc:	483e      	ldr	r0, [pc, #248]	; (80025f8 <SVCCTL_App_Notification+0x2ec>)
 80024fe:	f008 fe91 	bl	800b224 <iprintf>
          break; /* HCI_EVT_LE_CONN_COMPLETE */
 8002502:	e0c6      	b.n	8002692 <SVCCTL_App_Notification+0x386>
            APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 8002504:	483d      	ldr	r0, [pc, #244]	; (80025fc <SVCCTL_App_Notification+0x2f0>)
 8002506:	f008 fe8d 	bl	800b224 <iprintf>
          break; /* HCI_EVT_LE_CONN_COMPLETE */
 800250a:	e0c2      	b.n	8002692 <SVCCTL_App_Notification+0x386>
          le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	3301      	adds	r3, #1
 8002510:	61fb      	str	r3, [r7, #28]
          event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	785b      	ldrb	r3, [r3, #1]
 8002516:	76fb      	strb	r3, [r7, #27]
          event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	7a5b      	ldrb	r3, [r3, #9]
 800251c:	76bb      	strb	r3, [r7, #26]
          adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3309      	adds	r3, #9
 8002522:	3301      	adds	r3, #1
 8002524:	617b      	str	r3, [r7, #20]
          k = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	63fb      	str	r3, [r7, #60]	; 0x3c
          if (event_type == ADV_IND)
 800252a:	7efb      	ldrb	r3, [r7, #27]
 800252c:	2b00      	cmp	r3, #0
 800252e:	f040 80af 	bne.w	8002690 <SVCCTL_App_Notification+0x384>
            while(k < event_data_size)
 8002532:	e0a8      	b.n	8002686 <SVCCTL_App_Notification+0x37a>
            	adlength = adv_report_data[k];
 8002534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4413      	add	r3, r2
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	74fb      	strb	r3, [r7, #19]
            	adtype = adv_report_data[k + 1];
 800253e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002540:	3301      	adds	r3, #1
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4413      	add	r3, r2
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	74bb      	strb	r3, [r7, #18]
              switch (adtype)
 800254a:	7cbb      	ldrb	r3, [r7, #18]
 800254c:	2b09      	cmp	r3, #9
 800254e:	dc05      	bgt.n	800255c <SVCCTL_App_Notification+0x250>
 8002550:	2b08      	cmp	r3, #8
 8002552:	da5b      	bge.n	800260c <SVCCTL_App_Notification+0x300>
 8002554:	2b01      	cmp	r3, #1
 8002556:	f000 808a 	beq.w	800266e <SVCCTL_App_Notification+0x362>
                  break;
 800255a:	e08f      	b.n	800267c <SVCCTL_App_Notification+0x370>
              switch (adtype)
 800255c:	2b16      	cmp	r3, #22
 800255e:	f000 8088 	beq.w	8002672 <SVCCTL_App_Notification+0x366>
 8002562:	2bff      	cmp	r3, #255	; 0xff
 8002564:	d003      	beq.n	800256e <SVCCTL_App_Notification+0x262>
 8002566:	2b0a      	cmp	r3, #10
 8002568:	f000 8085 	beq.w	8002676 <SVCCTL_App_Notification+0x36a>
                  break;
 800256c:	e086      	b.n	800267c <SVCCTL_App_Notification+0x370>
                  if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 800256e:	7cfb      	ldrb	r3, [r7, #19]
 8002570:	2b06      	cmp	r3, #6
 8002572:	d931      	bls.n	80025d8 <SVCCTL_App_Notification+0x2cc>
 8002574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002576:	3302      	adds	r3, #2
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	4413      	add	r3, r2
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d12a      	bne.n	80025d8 <SVCCTL_App_Notification+0x2cc>
                    APP_DBG_MSG("--- ST MANUFACTURER ID --- \n");
 8002582:	481f      	ldr	r0, [pc, #124]	; (8002600 <SVCCTL_App_Notification+0x2f4>)
 8002584:	f008 fed6 	bl	800b334 <puts>
                    switch (adv_report_data[k + 3])
 8002588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800258a:	3303      	adds	r3, #3
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4413      	add	r3, r2
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b83      	cmp	r3, #131	; 0x83
 8002594:	d000      	beq.n	8002598 <SVCCTL_App_Notification+0x28c>
                        break;
 8002596:	e020      	b.n	80025da <SVCCTL_App_Notification+0x2ce>
                        APP_DBG_MSG("-- SERVER DETECTED -- VIA MAN ID\n");
 8002598:	481a      	ldr	r0, [pc, #104]	; (8002604 <SVCCTL_App_Notification+0x2f8>)
 800259a:	f008 fecb 	bl	800b334 <puts>
                        BleApplicationContext.DeviceServerFound = 0x01;
 800259e:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <SVCCTL_App_Notification+0x2d8>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                        SERVER_REMOTE_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	78da      	ldrb	r2, [r3, #3]
 80025aa:	4b17      	ldr	r3, [pc, #92]	; (8002608 <SVCCTL_App_Notification+0x2fc>)
 80025ac:	701a      	strb	r2, [r3, #0]
                        SERVER_REMOTE_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	791a      	ldrb	r2, [r3, #4]
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <SVCCTL_App_Notification+0x2fc>)
 80025b4:	705a      	strb	r2, [r3, #1]
                        SERVER_REMOTE_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	795a      	ldrb	r2, [r3, #5]
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <SVCCTL_App_Notification+0x2fc>)
 80025bc:	709a      	strb	r2, [r3, #2]
                        SERVER_REMOTE_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	799a      	ldrb	r2, [r3, #6]
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <SVCCTL_App_Notification+0x2fc>)
 80025c4:	70da      	strb	r2, [r3, #3]
                        SERVER_REMOTE_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	79da      	ldrb	r2, [r3, #7]
 80025ca:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <SVCCTL_App_Notification+0x2fc>)
 80025cc:	711a      	strb	r2, [r3, #4]
                        SERVER_REMOTE_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	7a1a      	ldrb	r2, [r3, #8]
 80025d2:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <SVCCTL_App_Notification+0x2fc>)
 80025d4:	715a      	strb	r2, [r3, #5]
                        break;
 80025d6:	e000      	b.n	80025da <SVCCTL_App_Notification+0x2ce>
                  }
 80025d8:	bf00      	nop
                  break;
 80025da:	e04f      	b.n	800267c <SVCCTL_App_Notification+0x370>
 80025dc:	200015a8 	.word	0x200015a8
 80025e0:	0800c1ec 	.word	0x0800c1ec
 80025e4:	20000138 	.word	0x20000138
 80025e8:	200015b4 	.word	0x200015b4
 80025ec:	0800c21c 	.word	0x0800c21c
 80025f0:	0800c244 	.word	0x0800c244
 80025f4:	0800c268 	.word	0x0800c268
 80025f8:	0800c29c 	.word	0x0800c29c
 80025fc:	0800c2cc 	.word	0x0800c2cc
 8002600:	0800c30c 	.word	0x0800c30c
 8002604:	0800c328 	.word	0x0800c328
 8002608:	200015ac 	.word	0x200015ac
                	if(strstr((char*)adv_report_data, "SVCA") || strstr((char*)adv_report_data, "ACVS")) {
 800260c:	4924      	ldr	r1, [pc, #144]	; (80026a0 <SVCCTL_App_Notification+0x394>)
 800260e:	6978      	ldr	r0, [r7, #20]
 8002610:	f008 fe98 	bl	800b344 <strstr>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <SVCCTL_App_Notification+0x31c>
 800261a:	4922      	ldr	r1, [pc, #136]	; (80026a4 <SVCCTL_App_Notification+0x398>)
 800261c:	6978      	ldr	r0, [r7, #20]
 800261e:	f008 fe91 	bl	800b344 <strstr>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d028      	beq.n	800267a <SVCCTL_App_Notification+0x36e>
                        APP_DBG_MSG("-- SERVER DETECTED -- VIA NAME\n");
 8002628:	481f      	ldr	r0, [pc, #124]	; (80026a8 <SVCCTL_App_Notification+0x39c>)
 800262a:	f008 fe83 	bl	800b334 <puts>
                        BleApplicationContext.DeviceServerFound = 0x01;
 800262e:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <SVCCTL_App_Notification+0x3a0>)
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                        SERVER_REMOTE_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	78da      	ldrb	r2, [r3, #3]
 800263a:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <SVCCTL_App_Notification+0x3a4>)
 800263c:	701a      	strb	r2, [r3, #0]
                        SERVER_REMOTE_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	791a      	ldrb	r2, [r3, #4]
 8002642:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <SVCCTL_App_Notification+0x3a4>)
 8002644:	705a      	strb	r2, [r3, #1]
                        SERVER_REMOTE_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	795a      	ldrb	r2, [r3, #5]
 800264a:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <SVCCTL_App_Notification+0x3a4>)
 800264c:	709a      	strb	r2, [r3, #2]
                        SERVER_REMOTE_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	799a      	ldrb	r2, [r3, #6]
 8002652:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <SVCCTL_App_Notification+0x3a4>)
 8002654:	70da      	strb	r2, [r3, #3]
                        SERVER_REMOTE_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	79da      	ldrb	r2, [r3, #7]
 800265a:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <SVCCTL_App_Notification+0x3a4>)
 800265c:	711a      	strb	r2, [r3, #4]
                        SERVER_REMOTE_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	7a1a      	ldrb	r2, [r3, #8]
 8002662:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <SVCCTL_App_Notification+0x3a4>)
 8002664:	715a      	strb	r2, [r3, #5]
                        aci_gap_terminate_gap_proc(0x02);
 8002666:	2002      	movs	r0, #2
 8002668:	f006 fa50 	bl	8008b0c <aci_gap_terminate_gap_proc>
                	break;
 800266c:	e005      	b.n	800267a <SVCCTL_App_Notification+0x36e>
                  break;
 800266e:	bf00      	nop
 8002670:	e004      	b.n	800267c <SVCCTL_App_Notification+0x370>
                  break;
 8002672:	bf00      	nop
 8002674:	e002      	b.n	800267c <SVCCTL_App_Notification+0x370>
                break;
 8002676:	bf00      	nop
 8002678:	e000      	b.n	800267c <SVCCTL_App_Notification+0x370>
                	break;
 800267a:	bf00      	nop
              k += adlength + 1;
 800267c:	7cfb      	ldrb	r3, [r7, #19]
 800267e:	3301      	adds	r3, #1
 8002680:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002682:	4413      	add	r3, r2
 8002684:	63fb      	str	r3, [r7, #60]	; 0x3c
            while(k < event_data_size)
 8002686:	7ebb      	ldrb	r3, [r7, #26]
 8002688:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800268a:	429a      	cmp	r2, r3
 800268c:	f6ff af52 	blt.w	8002534 <SVCCTL_App_Notification+0x228>
          break;
 8002690:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 8002692:	e000      	b.n	8002696 <SVCCTL_App_Notification+0x38a>
      break; /* EVT_DISCONN_COMPLETE */
 8002694:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8002696:	2301      	movs	r3, #1
}
 8002698:	4618      	mov	r0, r3
 800269a:	3744      	adds	r7, #68	; 0x44
 800269c:	46bd      	mov	sp, r7
 800269e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a0:	0800c34c 	.word	0x0800c34c
 80026a4:	0800c354 	.word	0x0800c354
 80026a8:	0800c35c 	.word	0x0800c35c
 80026ac:	20000138 	.word	0x20000138
 80026b0:	200015ac 	.word	0x200015ac

080026b4 <APP_BLE_Get_Client_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Client_Connection_Status( uint16_t Connection_Handle )
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	80fb      	strh	r3, [r7, #6]

  if (BleApplicationContext.BleApplicationContext_legacy.connectionHandle == Connection_Handle)
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <APP_BLE_Get_Client_Connection_Status+0x2c>)
 80026c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026c2:	88fa      	ldrh	r2, [r7, #6]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d103      	bne.n	80026d0 <APP_BLE_Get_Client_Connection_Status+0x1c>
  {
    return BleApplicationContext.Device_Connection_Status;
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <APP_BLE_Get_Client_Connection_Status+0x2c>)
 80026ca:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80026ce:	e000      	b.n	80026d2 <APP_BLE_Get_Client_Connection_Status+0x1e>
  }
  return APP_BLE_IDLE;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000138 	.word	0x20000138

080026e4 <APP_BLE_Key_Button1_Action>:
/* USER CODE BEGIN FD */
void APP_BLE_Key_Button1_Action(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
#if OOB_DEMO == 0 
      P2PC_APP_SW1_Button_Action();
#else 
      if(P2P_Client_APP_Get_State () != APP_BLE_CONNECTED_CLIENT)
 80026e8:	f000 fd8a 	bl	8003200 <P2P_Client_APP_Get_State>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b06      	cmp	r3, #6
 80026f0:	d004      	beq.n	80026fc <APP_BLE_Key_Button1_Action+0x18>
      {
        UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
 80026f2:	2100      	movs	r1, #0
 80026f4:	2001      	movs	r0, #1
 80026f6:	f008 fc57 	bl	800afa8 <UTIL_SEQ_SetTask>
      else 
      {
        P2PC_APP_SW1_Button_Action();
      }   
#endif 
}
 80026fa:	e001      	b.n	8002700 <APP_BLE_Key_Button1_Action+0x1c>
        P2PC_APP_SW1_Button_Action();
 80026fc:	f000 fa6a 	bl	8002bd4 <P2PC_APP_SW1_Button_Action>
}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}

08002704 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0
}
 8002716:	bf00      	nop
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <Ble_Tl_Init+0x20>)
 8002728:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <Ble_Tl_Init+0x24>)
 800272c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800272e:	463b      	mov	r3, r7
 8002730:	4619      	mov	r1, r3
 8002732:	4805      	ldr	r0, [pc, #20]	; (8002748 <Ble_Tl_Init+0x28>)
 8002734:	f007 f874 	bl	8009820 <hci_init>

  return;
 8002738:	bf00      	nop
}
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20030020 	.word	0x20030020
 8002744:	08002aad 	.word	0x08002aad
 8002748:	08002a75 	.word	0x08002a75

0800274c <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 800274c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800274e:	b091      	sub	sp, #68	; 0x44
 8002750:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 8002752:	2300      	movs	r3, #0
 8002754:	80bb      	strh	r3, [r7, #4]
  
  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
   hci_reset();
 8002756:	f006 fedb 	bl	8009510 <hci_reset>
  
   /**
   * Write the BD Address
   */
 
  bd_addr = BleGetBdAddress();
 800275a:	f000 f925 	bl	80029a8 <BleGetBdAddress>
 800275e:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8002760:	6a3a      	ldr	r2, [r7, #32]
 8002762:	2106      	movs	r1, #6
 8002764:	2000      	movs	r0, #0
 8002766:	f006 fdb4 	bl	80092d2 <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800276a:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800276e:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8002770:	f7ff fd5c 	bl	800222c <LL_FLASH_GetUDN>
 8002774:	4603      	mov	r3, r0
 8002776:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8002778:	f107 0308 	add.w	r3, r7, #8
 800277c:	461a      	mov	r2, r3
 800277e:	2106      	movs	r1, #6
 8002780:	202e      	movs	r0, #46	; 0x2e
 8002782:	f006 fda6 	bl	80092d2 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8002786:	4a49      	ldr	r2, [pc, #292]	; (80028ac <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002788:	2110      	movs	r1, #16
 800278a:	2018      	movs	r0, #24
 800278c:	f006 fda1 	bl	80092d2 <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8002790:	4a47      	ldr	r2, [pc, #284]	; (80028b0 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8002792:	2110      	movs	r1, #16
 8002794:	2008      	movs	r0, #8
 8002796:	f006 fd9c 	bl	80092d2 <aci_hal_write_config_data>
  
  /**
     * Set TX Power to 0dBm.
     */
    aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800279a:	2118      	movs	r1, #24
 800279c:	2001      	movs	r0, #1
 800279e:	f006 fe08 	bl	80093b2 <aci_hal_set_tx_power_level>
  
/**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80027a2:	f006 fa04 	bl	8008bae <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	77fb      	strb	r3, [r7, #31]
#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
#endif

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
 80027aa:	7ffb      	ldrb	r3, [r7, #31]
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	77fb      	strb	r3, [r7, #31]
#endif

  if (role > 0)
 80027b2:	7ffb      	ldrb	r3, [r7, #31]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01e      	beq.n	80027f6 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    const char *name = "STM32WB";
 80027b8:	4b3e      	ldr	r3, [pc, #248]	; (80028b4 <Ble_Hci_Gap_Gatt_Init+0x168>)
 80027ba:	61bb      	str	r3, [r7, #24]

    aci_gap_init(role, 0,
 80027bc:	f107 0216 	add.w	r2, r7, #22
 80027c0:	7ff8      	ldrb	r0, [r7, #31]
 80027c2:	f107 0312 	add.w	r3, r7, #18
 80027c6:	9301      	str	r3, [sp, #4]
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	4613      	mov	r3, r2
 80027d0:	2207      	movs	r2, #7
 80027d2:	2100      	movs	r1, #0
 80027d4:	f005 ff3a 	bl	800864c <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 80027d8:	8afc      	ldrh	r4, [r7, #22]
 80027da:	8abd      	ldrh	r5, [r7, #20]
 80027dc:	69b8      	ldr	r0, [r7, #24]
 80027de:	f7fd fccf 	bl	8000180 <strlen>
 80027e2:	4603      	mov	r3, r0
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	4613      	mov	r3, r2
 80027ec:	2200      	movs	r2, #0
 80027ee:	4629      	mov	r1, r5
 80027f0:	4620      	mov	r0, r4
 80027f2:	f006 fa06 	bl	8008c02 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

    if(aci_gatt_update_char_value(gap_service_handle,
 80027f6:	8af8      	ldrh	r0, [r7, #22]
 80027f8:	8a79      	ldrh	r1, [r7, #18]
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	2302      	movs	r3, #2
 8002800:	2200      	movs	r2, #0
 8002802:	f006 f9fe 	bl	8008c02 <aci_gatt_update_char_value>
    }

    /**
     * Initialize IO capability
     */
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8002806:	4b2c      	ldr	r3, [pc, #176]	; (80028b8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
    aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800280c:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f005 fe1b 	bl	800844c <aci_gap_set_io_capability>

    /**
     * Initialize authentication
     */
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8002816:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002818:	2201      	movs	r2, #1
 800281a:	705a      	strb	r2, [r3, #1]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800281c:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800281e:	2200      	movs	r2, #0
 8002820:	70da      	strb	r2, [r3, #3]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 8002822:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002824:	2208      	movs	r2, #8
 8002826:	755a      	strb	r2, [r3, #21]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 8002828:	4b23      	ldr	r3, [pc, #140]	; (80028b8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800282a:	2210      	movs	r2, #16
 800282c:	759a      	strb	r2, [r3, #22]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 800282e:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002830:	2201      	movs	r2, #1
 8002832:	751a      	strb	r2, [r3, #20]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 8002834:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002836:	4a21      	ldr	r2, [pc, #132]	; (80028bc <Ble_Hci_Gap_Gatt_Init+0x170>)
 8002838:	619a      	str	r2, [r3, #24]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 800283a:	4b1f      	ldr	r3, [pc, #124]	; (80028b8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800283c:	2201      	movs	r2, #1
 800283e:	709a      	strb	r2, [r3, #2]
    for (index = 0; index < 16; index++)
 8002840:	2300      	movs	r3, #0
 8002842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002846:	e00b      	b.n	8002860 <Ble_Hci_Gap_Gatt_Init+0x114>
    {
      BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 8002848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800284c:	4a1a      	ldr	r2, [pc, #104]	; (80028b8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800284e:	4413      	add	r3, r2
 8002850:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002854:	711a      	strb	r2, [r3, #4]
    for (index = 0; index < 16; index++)
 8002856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800285a:	3301      	adds	r3, #1
 800285c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002864:	2b0f      	cmp	r3, #15
 8002866:	d9ef      	bls.n	8002848 <Ble_Hci_Gap_Gatt_Init+0xfc>
    }

    aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800286a:	789d      	ldrb	r5, [r3, #2]
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800286e:	785e      	ldrb	r6, [r3, #1]
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002872:	7d5b      	ldrb	r3, [r3, #21]
 8002874:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002876:	7d92      	ldrb	r2, [r2, #22]
 8002878:	490f      	ldr	r1, [pc, #60]	; (80028b8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800287a:	7d09      	ldrb	r1, [r1, #20]
 800287c:	480e      	ldr	r0, [pc, #56]	; (80028b8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800287e:	6980      	ldr	r0, [r0, #24]
 8002880:	2400      	movs	r4, #0
 8002882:	9404      	str	r4, [sp, #16]
 8002884:	9003      	str	r0, [sp, #12]
 8002886:	9102      	str	r1, [sp, #8]
 8002888:	9201      	str	r2, [sp, #4]
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	2300      	movs	r3, #0
 800288e:	2200      	movs	r2, #0
 8002890:	4631      	mov	r1, r6
 8002892:	4628      	mov	r0, r5
 8002894:	f005 fe2b 	bl	80084ee <aci_gap_set_authentication_requirement>
                                           );

    /**
     * Initialize whitelist
     */
    if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8002898:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800289a:	789b      	ldrb	r3, [r3, #2]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <Ble_Hci_Gap_Gatt_Init+0x158>
    {
      aci_gap_configure_whitelist();
 80028a0:	f005 ff5f 	bl	8008762 <aci_gap_configure_whitelist>
    }
  
}
 80028a4:	bf00      	nop
 80028a6:	372c      	adds	r7, #44	; 0x2c
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028ac:	0800c19c 	.word	0x0800c19c
 80028b0:	0800c1ac 	.word	0x0800c1ac
 80028b4:	0800c37c 	.word	0x0800c37c
 80028b8:	20000138 	.word	0x20000138
 80028bc:	0001b207 	.word	0x0001b207

080028c0 <Scan_Request>:

static void Scan_Request( void )
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Scan_Request_1 */

  /* USER CODE END Scan_Request_1 */
  tBleStatus result;
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 80028c6:	4b12      	ldr	r3, [pc, #72]	; (8002910 <Scan_Request+0x50>)
 80028c8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80028cc:	2b06      	cmp	r3, #6
 80028ce:	d01a      	beq.n	8002906 <Scan_Request+0x46>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_CLIENT */
    BSP_LED_On(LED_BLUE);
 80028d0:	2000      	movs	r0, #0
 80028d2:	f001 f877 	bl	80039c4 <BSP_LED_On>
    /* USER CODE END APP_BLE_CONNECTED_CLIENT */
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, PUBLIC_ADDR, 1);
 80028d6:	2301      	movs	r3, #1
 80028d8:	2200      	movs	r2, #0
 80028da:	f44f 7148 	mov.w	r1, #800	; 0x320
 80028de:	f44f 7048 	mov.w	r0, #800	; 0x320
 80028e2:	f005 ffc8 	bl	8008876 <aci_gap_start_general_discovery_proc>
 80028e6:	4603      	mov	r3, r0
 80028e8:	71fb      	strb	r3, [r7, #7]
    if (result == BLE_STATUS_SUCCESS)
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d103      	bne.n	80028f8 <Scan_Request+0x38>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */

    /* USER CODE END BLE_SCAN_SUCCESS */
#if(CFG_DEBUG_APP_TRACE != 0)
      APP_DBG_MSG(" \r\n\r** START GENERAL DISCOVERY (SCAN) **  \r\n\r");
 80028f0:	4808      	ldr	r0, [pc, #32]	; (8002914 <Scan_Request+0x54>)
 80028f2:	f008 fc97 	bl	800b224 <iprintf>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 80028f6:	e006      	b.n	8002906 <Scan_Request+0x46>
    BSP_LED_On(LED_RED);
 80028f8:	2002      	movs	r0, #2
 80028fa:	f001 f863 	bl	80039c4 <BSP_LED_On>
      APP_DBG_MSG("-- BLE_App_Start_Limited_Disc_Req, Failed \r\n\r");
 80028fe:	4806      	ldr	r0, [pc, #24]	; (8002918 <Scan_Request+0x58>)
 8002900:	f008 fc90 	bl	800b224 <iprintf>
  return;
 8002904:	bf00      	nop
 8002906:	bf00      	nop
}
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000138 	.word	0x20000138
 8002914:	0800c384 	.word	0x0800c384
 8002918:	0800c3b4 	.word	0x0800c3b4

0800291c <Connect_Request>:

static void Connect_Request( void )
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Connect_Request_1 */

  /* USER CODE END Connect_Request_1 */
  tBleStatus result;
#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO SERVER **  \r\n\r");
 8002922:	481a      	ldr	r0, [pc, #104]	; (800298c <Connect_Request+0x70>)
 8002924:	f008 fc7e 	bl	800b224 <iprintf>
#endif

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <Connect_Request+0x74>)
 800292a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800292e:	2b06      	cmp	r3, #6
 8002930:	d028      	beq.n	8002984 <Connect_Request+0x68>
  {
    result = aci_gap_create_connection(SCAN_P,
 8002932:	2310      	movs	r3, #16
 8002934:	9306      	str	r3, [sp, #24]
 8002936:	2310      	movs	r3, #16
 8002938:	9305      	str	r3, [sp, #20]
 800293a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800293e:	9304      	str	r3, [sp, #16]
 8002940:	2300      	movs	r3, #0
 8002942:	9303      	str	r3, [sp, #12]
 8002944:	2350      	movs	r3, #80	; 0x50
 8002946:	9302      	str	r3, [sp, #8]
 8002948:	2328      	movs	r3, #40	; 0x28
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	2300      	movs	r3, #0
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	4b10      	ldr	r3, [pc, #64]	; (8002994 <Connect_Request+0x78>)
 8002952:	2200      	movs	r2, #0
 8002954:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002958:	f44f 7048 	mov.w	r0, #800	; 0x320
 800295c:	f006 f80a 	bl	8008974 <aci_gap_create_connection>
 8002960:	4603      	mov	r3, r0
 8002962:	71fb      	strb	r3, [r7, #7]
                                       0,
                                       SUPERV_TIMEOUT,
                                       CONN_L1,
                                       CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d104      	bne.n	8002974 <Connect_Request+0x58>
    {
    /* USER CODE BEGIN BLE_CONNECT_SUCCESS */

    /* USER CODE END BLE_CONNECT_SUCCESS */
    BleApplicationContext.Device_Connection_Status = APP_BLE_LP_CONNECTING;
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <Connect_Request+0x74>)
 800296c:	2204      	movs	r2, #4
 800296e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 8002972:	e007      	b.n	8002984 <Connect_Request+0x68>
      BSP_LED_On(LED_RED);
 8002974:	2002      	movs	r0, #2
 8002976:	f001 f825 	bl	80039c4 <BSP_LED_On>
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800297a:	4b05      	ldr	r3, [pc, #20]	; (8002990 <Connect_Request+0x74>)
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  return;
 8002982:	bf00      	nop
 8002984:	bf00      	nop
}
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	0800c3e4 	.word	0x0800c3e4
 8002990:	20000138 	.word	0x20000138
 8002994:	200015ac 	.word	0x200015ac

08002998 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 800299c:	2001      	movs	r0, #1
 800299e:	f001 f82b 	bl	80039f8 <BSP_LED_Off>
/* USER CODE END Switch_OFF_GPIO */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80029ae:	f7ff fc3d 	bl	800222c <LL_FLASH_GetUDN>
 80029b2:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ba:	d023      	beq.n	8002a04 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80029bc:	f7ff fc4e 	bl	800225c <LL_FLASH_GetSTCompanyID>
 80029c0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80029c2:	f7ff fc3f 	bl	8002244 <LL_FLASH_GetDeviceID>
 80029c6:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <BleGetBdAddress+0x80>)
 80029ce:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <BleGetBdAddress+0x80>)
 80029d8:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	0c1b      	lsrs	r3, r3, #16
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <BleGetBdAddress+0x80>)
 80029e2:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <BleGetBdAddress+0x80>)
 80029ea:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <BleGetBdAddress+0x80>)
 80029f2:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <BleGetBdAddress+0x80>)
 80029fc:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 80029fe:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <BleGetBdAddress+0x80>)
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	e00b      	b.n	8002a1c <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8002a04:	2000      	movs	r0, #0
 8002a06:	f007 f8b1 	bl	8009b6c <OTP_Read>
 8002a0a:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	e001      	b.n	8002a1c <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <BleGetBdAddress+0x84>)
 8002a1a:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 8002a1c:	697b      	ldr	r3, [r7, #20]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	2000025c 	.word	0x2000025c
 8002a2c:	0800c194 	.word	0x0800c194

08002a30 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002a38:	2100      	movs	r1, #0
 8002a3a:	2020      	movs	r0, #32
 8002a3c:	f008 fab4 	bl	800afa8 <UTIL_SEQ_SetTask>
  return;
 8002a40:	bf00      	nop
}
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002a50:	2001      	movs	r0, #1
 8002a52:	f008 fb0f 	bl	800b074 <UTIL_SEQ_SetEvt>
  return;
 8002a56:	bf00      	nop
}
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002a66:	2001      	movs	r0, #1
 8002a68:	f008 fb22 	bl	800b0b0 <UTIL_SEQ_WaitEvt>
  return;
 8002a6c:	bf00      	nop
}
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	60fb      	str	r3, [r7, #12]
  
  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	3308      	adds	r3, #8
 8002a86:	4618      	mov	r0, r3
 8002a88:	f007 ff30 	bl	800a8ec <SVCCTL_UserEvtRx>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8002a90:	7afb      	ldrb	r3, [r7, #11]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <BLE_UserEvtRx+0x2a>
{
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
}
  else
{
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8002a9c:	e002      	b.n	8002aa4 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
}
 8002aa4:	bf00      	nop
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <BLE_StatusNot+0x16>
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d006      	beq.n	8002ace <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8002ac0:	e00b      	b.n	8002ada <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002ac2:	233f      	movs	r3, #63	; 0x3f
 8002ac4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f008 fa98 	bl	800affc <UTIL_SEQ_PauseTask>
      break;
 8002acc:	e005      	b.n	8002ada <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002ace:	233f      	movs	r3, #63	; 0x3f
 8002ad0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f008 fab0 	bl	800b038 <UTIL_SEQ_ResumeTask>
      break;
 8002ad8:	bf00      	nop
  }
  return;
 8002ada:	bf00      	nop
}
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <P2PC_APP_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PC_APP_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
  uint8_t index =0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN P2PC_APP_Init_1 */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SEARCH_SERVICE_ID, UTIL_SEQ_RFU, Update_Service );
 8002aee:	4a1a      	ldr	r2, [pc, #104]	; (8002b58 <P2PC_APP_Init+0x74>)
 8002af0:	2100      	movs	r1, #0
 8002af2:	2004      	movs	r0, #4
 8002af4:	f008 fa38 	bl	800af68 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button_Trigger_Received );
 8002af8:	4a18      	ldr	r2, [pc, #96]	; (8002b5c <P2PC_APP_Init+0x78>)
 8002afa:	2100      	movs	r1, #0
 8002afc:	2008      	movs	r0, #8
 8002afe:	f008 fa33 	bl	800af68 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Client_App_Context.Notification_Status=0;
 8002b02:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <P2PC_APP_Init+0x7c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
  P2P_Client_App_Context.ConnectionHandle =  0x00;
 8002b08:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <P2PC_APP_Init+0x7c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	80da      	strh	r2, [r3, #6]

  P2P_Client_App_Context.LedControl.Device_Led_Selection=0x00;/* device Led */
 8002b0e:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <P2PC_APP_Init+0x7c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	705a      	strb	r2, [r3, #1]
  P2P_Client_App_Context.LedControl.Led1=0x00; /* led OFF */
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <P2PC_APP_Init+0x7c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	709a      	strb	r2, [r3, #2]
  P2P_Client_App_Context.ButtonStatus.Device_Button_Selection=0x01;/* Device1 */
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <P2PC_APP_Init+0x7c>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	70da      	strb	r2, [r3, #3]
  P2P_Client_App_Context.ButtonStatus.Button1=0x00;
 8002b20:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <P2PC_APP_Init+0x7c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	711a      	strb	r2, [r3, #4]
/* USER CODE END P2PC_APP_Init_1 */
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 8002b26:	2300      	movs	r3, #0
 8002b28:	71fb      	strb	r3, [r7, #7]
 8002b2a:	e008      	b.n	8002b3e <P2PC_APP_Init+0x5a>
  {
    aP2PClientContext[index].state= APP_BLE_IDLE;
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	4a0d      	ldr	r2, [pc, #52]	; (8002b64 <P2PC_APP_Init+0x80>)
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	4413      	add	r3, r2
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	71fb      	strb	r3, [r7, #7]
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f3      	beq.n	8002b2c <P2PC_APP_Init+0x48>
  }

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterCltHandler(Event_Handler);
 8002b44:	4808      	ldr	r0, [pc, #32]	; (8002b68 <P2PC_APP_Init+0x84>)
 8002b46:	f007 feb7 	bl	800a8b8 <SVCCTL_RegisterCltHandler>

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- P2P CLIENT INITIALIZED \n");
 8002b4a:	4808      	ldr	r0, [pc, #32]	; (8002b6c <P2PC_APP_Init+0x88>)
 8002b4c:	f008 fbf2 	bl	800b334 <puts>
#endif

/* USER CODE BEGIN P2PC_APP_Init_2 */

/* USER CODE END P2PC_APP_Init_2 */
  return;
 8002b50:	bf00      	nop
}
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	080032d5 	.word	0x080032d5
 8002b5c:	0800328d 	.word	0x0800328d
 8002b60:	200001dc 	.word	0x200001dc
 8002b64:	200001cc 	.word	0x200001cc
 8002b68:	08002be5 	.word	0x08002be5
 8002b6c:	0800c410 	.word	0x0800c410

08002b70 <P2PC_APP_Notification>:

void P2PC_APP_Notification(P2PC_APP_ConnHandle_Not_evt_t *pNotification)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PC_APP_Notification_1 */

/* USER CODE END P2PC_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <P2PC_APP_Notification+0x16>
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d005      	beq.n	8002b90 <P2PC_APP_Notification+0x20>

    default:
/* USER CODE BEGIN P2P_Evt_Opcode_Default */

/* USER CODE END P2P_Evt_Opcode_Default */
      break;
 8002b84:	e01e      	b.n	8002bc4 <P2PC_APP_Notification+0x54>
    P2P_Client_App_Context.ConnectionHandle = pNotification->ConnectionHandle;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	885a      	ldrh	r2, [r3, #2]
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <P2PC_APP_Notification+0x5c>)
 8002b8c:	80da      	strh	r2, [r3, #6]
      break;
 8002b8e:	e019      	b.n	8002bc4 <P2PC_APP_Notification+0x54>
      uint8_t index = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	73fb      	strb	r3, [r7, #15]
      P2P_Client_App_Context.ConnectionHandle =  0x00;
 8002b94:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <P2PC_APP_Notification+0x5c>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	80da      	strh	r2, [r3, #6]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8002b9a:	e005      	b.n	8002ba8 <P2PC_APP_Notification+0x38>
        aP2PClientContext[index].state = APP_BLE_IDLE;
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	4a0c      	ldr	r2, [pc, #48]	; (8002bd0 <P2PC_APP_Notification+0x60>)
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	4413      	add	r3, r2
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <P2PC_APP_Notification+0x4c>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	4a07      	ldr	r2, [pc, #28]	; (8002bd0 <P2PC_APP_Notification+0x60>)
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	4413      	add	r3, r2
 8002bb6:	781b      	ldrb	r3, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1ef      	bne.n	8002b9c <P2PC_APP_Notification+0x2c>
      BSP_LED_Off(LED_BLUE); 
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f000 ff1b 	bl	80039f8 <BSP_LED_Off>
      break;
 8002bc2:	bf00      	nop
  }
/* USER CODE BEGIN P2PC_APP_Notification_2 */

/* USER CODE END P2PC_APP_Notification_2 */
  return;
 8002bc4:	bf00      	nop
}
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200001dc 	.word	0x200001dc
 8002bd0:	200001cc 	.word	0x200001cc

08002bd4 <P2PC_APP_SW1_Button_Action>:
/* USER CODE BEGIN FD */
void P2PC_APP_SW1_Button_Action(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0

  UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8002bd8:	2100      	movs	r1, #0
 8002bda:	2008      	movs	r0, #8
 8002bdc:	f008 f9e4 	bl	800afa8 <UTIL_SEQ_SetTask>

}
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Event_Handler(void *Event)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b094      	sub	sp, #80	; 0x50
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;

  P2P_Client_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8002bec:	2300      	movs	r3, #0
 8002bee:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	643b      	str	r3, [r7, #64]	; 0x40



  switch(event_pckt->evt)
 8002bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2bff      	cmp	r3, #255	; 0xff
 8002bfe:	d000      	beq.n	8002c02 <Event_Handler+0x1e>
    }

    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8002c00:	e2b4      	b.n	800316c <Event_Handler+0x588>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8002c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c04:	3302      	adds	r3, #2
 8002c06:	63fb      	str	r3, [r7, #60]	; 0x3c
      switch(blue_evt->ecode)
 8002c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	f200 829e 	bhi.w	8003154 <Event_Handler+0x570>
 8002c18:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <Event_Handler+0x3c>)
 8002c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1e:	bf00      	nop
 8002c20:	08002f57 	.word	0x08002f57
 8002c24:	08003155 	.word	0x08003155
 8002c28:	08002e0f 	.word	0x08002e0f
 8002c2c:	08003155 	.word	0x08003155
 8002c30:	08003155 	.word	0x08003155
 8002c34:	08003155 	.word	0x08003155
 8002c38:	08002c55 	.word	0x08002c55
 8002c3c:	08003155 	.word	0x08003155
 8002c40:	08003155 	.word	0x08003155
 8002c44:	08003155 	.word	0x08003155
 8002c48:	08003155 	.word	0x08003155
 8002c4c:	08003083 	.word	0x08003083
 8002c50:	080030ff 	.word	0x080030ff
          aci_att_read_by_group_type_resp_event_rp0 *pr = (void*)blue_evt->data;
 8002c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c56:	3302      	adds	r3, #2
 8002c58:	633b      	str	r3, [r7, #48]	; 0x30
          handle = pr->Connection_Handle;
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	781a      	ldrb	r2, [r3, #0]
 8002c5e:	785b      	ldrb	r3, [r3, #1]
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	4313      	orrs	r3, r2
 8002c64:	85fb      	strh	r3, [r7, #46]	; 0x2e
          index = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8002c6c:	e02e      	b.n	8002ccc <Event_Handler+0xe8>
            status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 8002c6e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c72:	4abc      	ldr	r2, [pc, #752]	; (8002f64 <Event_Handler+0x380>)
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	4413      	add	r3, r2
 8002c78:	3302      	adds	r3, #2
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fd19 	bl	80026b4 <APP_BLE_Get_Client_Connection_Status>
 8002c82:	4603      	mov	r3, r0
 8002c84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            if((aP2PClientContext[index].state == APP_BLE_CONNECTED_CLIENT)&&
 8002c88:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c8c:	4ab5      	ldr	r2, [pc, #724]	; (8002f64 <Event_Handler+0x380>)
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	4413      	add	r3, r2
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b06      	cmp	r3, #6
 8002c96:	d114      	bne.n	8002cc2 <Event_Handler+0xde>
 8002c98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d110      	bne.n	8002cc2 <Event_Handler+0xde>
              aP2PClientContext[index].state = APP_BLE_IDLE;
 8002ca0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002ca4:	4aaf      	ldr	r2, [pc, #700]	; (8002f64 <Event_Handler+0x380>)
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	4413      	add	r3, r2
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
              aP2PClientContext[index].connHandle = 0xFFFF;
 8002cae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002cb2:	4aac      	ldr	r2, [pc, #688]	; (8002f64 <Event_Handler+0x380>)
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3302      	adds	r3, #2
 8002cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cbe:	801a      	strh	r2, [r3, #0]
              break;
 8002cc0:	e010      	b.n	8002ce4 <Event_Handler+0x100>
            index++;
 8002cc2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8002ccc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d107      	bne.n	8002ce4 <Event_Handler+0x100>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 8002cd4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002cd8:	4aa2      	ldr	r2, [pc, #648]	; (8002f64 <Event_Handler+0x380>)
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	4413      	add	r3, r2
 8002cde:	781b      	ldrb	r3, [r3, #0]
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1c4      	bne.n	8002c6e <Event_Handler+0x8a>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8002ce4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f040 8235 	bne.w	8003158 <Event_Handler+0x574>
            aP2PClientContext[index].connHandle= handle;
 8002cee:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002cf2:	4a9c      	ldr	r2, [pc, #624]	; (8002f64 <Event_Handler+0x380>)
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002cfc:	801a      	strh	r2, [r3, #0]
            numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	78da      	ldrb	r2, [r3, #3]
 8002d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d04:	789b      	ldrb	r3, [r3, #2]
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
          if (pr->Attribute_Data_Length == 20)
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d10:	789b      	ldrb	r3, [r3, #2]
 8002d12:	2b14      	cmp	r3, #20
 8002d14:	f040 8220 	bne.w	8003158 <Event_Handler+0x574>
            idx = 16;
 8002d18:	2310      	movs	r3, #16
 8002d1a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              for (i=0; i<numServ; i++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002d24:	e06c      	b.n	8002e00 <Event_Handler+0x21c>
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 8002d26:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d2c:	4413      	add	r3, r2
 8002d2e:	791b      	ldrb	r3, [r3, #4]
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002d36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d38:	440b      	add	r3, r1
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	4313      	orrs	r3, r2
 8002d48:	857b      	strh	r3, [r7, #42]	; 0x2a
                if(uuid == 0x81A0)
 8002d4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d4c:	f248 12a0 	movw	r2, #33184	; 0x81a0
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d149      	bne.n	8002de8 <Event_Handler+0x204>
                  APP_DBG_MSG("-- GATT : P2P_SERVICE_UUID FOUND - connection handle 0x%x \n", aP2PClientContext[index].connHandle);
 8002d54:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002d58:	4a82      	ldr	r2, [pc, #520]	; (8002f64 <Event_Handler+0x380>)
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3302      	adds	r3, #2
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	4619      	mov	r1, r3
 8002d64:	4880      	ldr	r0, [pc, #512]	; (8002f68 <Event_Handler+0x384>)
 8002d66:	f008 fa5d 	bl	800b224 <iprintf>
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 8002d6a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002d6e:	3b10      	subs	r3, #16
 8002d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d72:	4413      	add	r3, r2
 8002d74:	791b      	ldrb	r3, [r3, #4]
 8002d76:	b299      	uxth	r1, r3
 8002d78:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002d7c:	3b10      	subs	r3, #16
 8002d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d80:	4413      	add	r3, r2
 8002d82:	3304      	adds	r3, #4
 8002d84:	3301      	adds	r3, #1
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	021b      	lsls	r3, r3, #8
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002d92:	430a      	orrs	r2, r1
 8002d94:	b291      	uxth	r1, r2
 8002d96:	4a73      	ldr	r2, [pc, #460]	; (8002f64 <Event_Handler+0x380>)
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	460a      	mov	r2, r1
 8002da0:	801a      	strh	r2, [r3, #0]
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 8002da2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002da6:	3b0e      	subs	r3, #14
 8002da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002daa:	4413      	add	r3, r2
 8002dac:	791b      	ldrb	r3, [r3, #4]
 8002dae:	b299      	uxth	r1, r3
 8002db0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002db4:	3b0e      	subs	r3, #14
 8002db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002db8:	4413      	add	r3, r2
 8002dba:	3304      	adds	r3, #4
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	021b      	lsls	r3, r3, #8
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	b291      	uxth	r1, r2
 8002dce:	4a65      	ldr	r2, [pc, #404]	; (8002f64 <Event_Handler+0x380>)
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3306      	adds	r3, #6
 8002dd6:	460a      	mov	r2, r1
 8002dd8:	801a      	strh	r2, [r3, #0]
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 8002dda:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002dde:	4a61      	ldr	r2, [pc, #388]	; (8002f64 <Event_Handler+0x380>)
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	4413      	add	r3, r2
 8002de4:	2208      	movs	r2, #8
 8002de6:	701a      	strb	r2, [r3, #0]
                idx += pr->Attribute_Data_Length;
 8002de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dea:	789a      	ldrb	r2, [r3, #2]
 8002dec:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002df0:	4413      	add	r3, r2
 8002df2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              for (i=0; i<numServ; i++)
 8002df6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002e00:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002e04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d38c      	bcc.n	8002d26 <Event_Handler+0x142>
        break;
 8002e0c:	e1a4      	b.n	8003158 <Event_Handler+0x574>
          aci_att_read_by_type_resp_event_rp0 *pr = (void*)blue_evt->data;
 8002e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e10:	3302      	adds	r3, #2
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
          index = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8002e1a:	e004      	b.n	8002e26 <Event_Handler+0x242>
            index++;
 8002e1c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002e20:	3301      	adds	r3, #1
 8002e22:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8002e26:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10b      	bne.n	8002e46 <Event_Handler+0x262>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 8002e2e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002e32:	4a4c      	ldr	r2, [pc, #304]	; (8002f64 <Event_Handler+0x380>)
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	4413      	add	r3, r2
 8002e38:	3302      	adds	r3, #2
 8002e3a:	881a      	ldrh	r2, [r3, #0]
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d1ea      	bne.n	8002e1c <Event_Handler+0x238>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8002e46:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f040 8186 	bne.w	800315c <Event_Handler+0x578>
            idx = 17;
 8002e50:	2311      	movs	r3, #17
 8002e52:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            if (pr->Handle_Value_Pair_Length == 21)
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	789b      	ldrb	r3, [r3, #2]
 8002e5a:	2b15      	cmp	r3, #21
 8002e5c:	f040 817e 	bne.w	800315c <Event_Handler+0x578>
              pr->Data_Length -= 1;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	78db      	ldrb	r3, [r3, #3]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	70da      	strb	r2, [r3, #3]
              while(pr->Data_Length > 0)
 8002e6c:	e06e      	b.n	8002f4c <Event_Handler+0x368>
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 8002e6e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e74:	4413      	add	r3, r2
 8002e76:	791b      	ldrb	r3, [r3, #4]
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002e7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e80:	440b      	add	r3, r1
 8002e82:	3304      	adds	r3, #4
 8002e84:	3301      	adds	r3, #1
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	847b      	strh	r3, [r7, #34]	; 0x22
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 8002e92:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002e96:	3b0e      	subs	r3, #14
 8002e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9a:	4413      	add	r3, r2
 8002e9c:	791b      	ldrb	r3, [r3, #4]
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002ea4:	3b0e      	subs	r3, #14
 8002ea6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3304      	adds	r3, #4
 8002eac:	3301      	adds	r3, #1
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	843b      	strh	r3, [r7, #32]
                if(uuid == 0x1580)
 8002eba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ebc:	f5b3 5fac 	cmp.w	r3, #5504	; 0x1580
 8002ec0:	d11a      	bne.n	8002ef8 <Event_Handler+0x314>
                  APP_DBG_MSG("-- GATT : WRITE_UUID FOUND - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 8002ec2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002ec6:	4a27      	ldr	r2, [pc, #156]	; (8002f64 <Event_Handler+0x380>)
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	4413      	add	r3, r2
 8002ecc:	3302      	adds	r3, #2
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4826      	ldr	r0, [pc, #152]	; (8002f6c <Event_Handler+0x388>)
 8002ed4:	f008 f9a6 	bl	800b224 <iprintf>
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_WRITE_VALVE_ON;
 8002ed8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002edc:	4a21      	ldr	r2, [pc, #132]	; (8002f64 <Event_Handler+0x380>)
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	4413      	add	r3, r2
 8002ee2:	2209      	movs	r2, #9
 8002ee4:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PWriteToServerCharHdle = handle;
 8002ee6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002eea:	4a1e      	ldr	r2, [pc, #120]	; (8002f64 <Event_Handler+0x380>)
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	4413      	add	r3, r2
 8002ef0:	3308      	adds	r3, #8
 8002ef2:	8c3a      	ldrh	r2, [r7, #32]
 8002ef4:	801a      	strh	r2, [r3, #0]
 8002ef6:	e01e      	b.n	8002f36 <Event_Handler+0x352>
                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 8002ef8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002efa:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d119      	bne.n	8002f36 <Event_Handler+0x352>
                  APP_DBG_MSG("-- GATT : NOTIFICATION_CHAR_UUID FOUND  - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 8002f02:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002f06:	4a17      	ldr	r2, [pc, #92]	; (8002f64 <Event_Handler+0x380>)
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	4619      	mov	r1, r3
 8002f12:	4817      	ldr	r0, [pc, #92]	; (8002f70 <Event_Handler+0x38c>)
 8002f14:	f008 f986 	bl	800b224 <iprintf>
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC;
 8002f18:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002f1c:	4a11      	ldr	r2, [pc, #68]	; (8002f64 <Event_Handler+0x380>)
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	4413      	add	r3, r2
 8002f22:	220d      	movs	r2, #13
 8002f24:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PNotificationCharHdle = handle;
 8002f26:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002f2a:	4a0e      	ldr	r2, [pc, #56]	; (8002f64 <Event_Handler+0x380>)
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	4413      	add	r3, r2
 8002f30:	330c      	adds	r3, #12
 8002f32:	8c3a      	ldrh	r2, [r7, #32]
 8002f34:	801a      	strh	r2, [r3, #0]
                pr->Data_Length -= 21;
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	78db      	ldrb	r3, [r3, #3]
 8002f3a:	3b15      	subs	r3, #21
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	70da      	strb	r2, [r3, #3]
                idx += 21;
 8002f42:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002f46:	3315      	adds	r3, #21
 8002f48:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
              while(pr->Data_Length > 0)
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	78db      	ldrb	r3, [r3, #3]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d18c      	bne.n	8002e6e <Event_Handler+0x28a>
        break;
 8002f54:	e102      	b.n	800315c <Event_Handler+0x578>
          aci_att_find_info_resp_event_rp0 *pr = (void*)blue_evt->data;
 8002f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f58:	3302      	adds	r3, #2
 8002f5a:	61fb      	str	r3, [r7, #28]
          index = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8002f62:	e00c      	b.n	8002f7e <Event_Handler+0x39a>
 8002f64:	200001cc 	.word	0x200001cc
 8002f68:	0800c42c 	.word	0x0800c42c
 8002f6c:	0800c468 	.word	0x0800c468
 8002f70:	0800c4a0 	.word	0x0800c4a0
            index++;
 8002f74:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002f78:	3301      	adds	r3, #1
 8002f7a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8002f7e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10b      	bne.n	8002f9e <Event_Handler+0x3ba>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 8002f86:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002f8a:	4a7b      	ldr	r2, [pc, #492]	; (8003178 <Event_Handler+0x594>)
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	4413      	add	r3, r2
 8002f90:	3302      	adds	r3, #2
 8002f92:	881a      	ldrh	r2, [r3, #0]
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d1ea      	bne.n	8002f74 <Event_Handler+0x390>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8002f9e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f040 80dc 	bne.w	8003160 <Event_Handler+0x57c>
            numDesc = (pr->Event_Data_Length) / 4;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	78db      	ldrb	r3, [r3, #3]
 8002fac:	089b      	lsrs	r3, r3, #2
 8002fae:	76fb      	strb	r3, [r7, #27]
            idx = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            if (pr->Format == UUID_TYPE_16)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	789b      	ldrb	r3, [r3, #2]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	f040 80d0 	bne.w	8003160 <Event_Handler+0x57c>
              for (i=0; i<numDesc; i++)
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8002fc6:	e056      	b.n	8003076 <Event_Handler+0x492>
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 8002fc8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	4413      	add	r3, r2
 8002fd0:	791b      	ldrb	r3, [r3, #4]
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002fd8:	69f9      	ldr	r1, [r7, #28]
 8002fda:	440b      	add	r3, r1
 8002fdc:	3304      	adds	r3, #4
 8002fde:	3301      	adds	r3, #1
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	833b      	strh	r3, [r7, #24]
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 8002fec:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	791b      	ldrb	r3, [r3, #4]
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002ffe:	3302      	adds	r3, #2
 8003000:	69f9      	ldr	r1, [r7, #28]
 8003002:	440b      	add	r3, r1
 8003004:	3304      	adds	r3, #4
 8003006:	3301      	adds	r3, #1
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	b29b      	uxth	r3, r3
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	b29b      	uxth	r3, r3
 8003010:	4313      	orrs	r3, r2
 8003012:	82fb      	strh	r3, [r7, #22]
                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 8003014:	8afb      	ldrh	r3, [r7, #22]
 8003016:	f642 1202 	movw	r2, #10498	; 0x2902
 800301a:	4293      	cmp	r3, r2
 800301c:	d121      	bne.n	8003062 <Event_Handler+0x47e>
                  APP_DBG_MSG("-- GATT : CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID- connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 800301e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003022:	4a55      	ldr	r2, [pc, #340]	; (8003178 <Event_Handler+0x594>)
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	4413      	add	r3, r2
 8003028:	3302      	adds	r3, #2
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	4619      	mov	r1, r3
 800302e:	4853      	ldr	r0, [pc, #332]	; (800317c <Event_Handler+0x598>)
 8003030:	f008 f8f8 	bl	800b224 <iprintf>
                  if( aP2PClientContext[index].state == APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC)
 8003034:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003038:	4a4f      	ldr	r2, [pc, #316]	; (8003178 <Event_Handler+0x594>)
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	4413      	add	r3, r2
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b0d      	cmp	r3, #13
 8003042:	d10e      	bne.n	8003062 <Event_Handler+0x47e>
                    aP2PClientContext[index].P2PNotificationDescHandle = handle;
 8003044:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003048:	4a4b      	ldr	r2, [pc, #300]	; (8003178 <Event_Handler+0x594>)
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	4413      	add	r3, r2
 800304e:	330e      	adds	r3, #14
 8003050:	8b3a      	ldrh	r2, [r7, #24]
 8003052:	801a      	strh	r2, [r3, #0]
                    aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_DESC;
 8003054:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003058:	4a47      	ldr	r2, [pc, #284]	; (8003178 <Event_Handler+0x594>)
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	4413      	add	r3, r2
 800305e:	220e      	movs	r2, #14
 8003060:	701a      	strb	r2, [r3, #0]
                idx += 4;
 8003062:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003066:	3304      	adds	r3, #4
 8003068:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              for (i=0; i<numDesc; i++)
 800306c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003070:	3301      	adds	r3, #1
 8003072:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8003076:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800307a:	7efb      	ldrb	r3, [r7, #27]
 800307c:	429a      	cmp	r2, r3
 800307e:	d3a3      	bcc.n	8002fc8 <Event_Handler+0x3e4>
        break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 8003080:	e06e      	b.n	8003160 <Event_Handler+0x57c>
          aci_gatt_notification_event_rp0 *pr = (void*)blue_evt->data;
 8003082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003084:	3302      	adds	r3, #2
 8003086:	637b      	str	r3, [r7, #52]	; 0x34
          index = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800308e:	e004      	b.n	800309a <Event_Handler+0x4b6>
            index++;
 8003090:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003094:	3301      	adds	r3, #1
 8003096:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800309a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10b      	bne.n	80030ba <Event_Handler+0x4d6>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 80030a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030a6:	4a34      	ldr	r2, [pc, #208]	; (8003178 <Event_Handler+0x594>)
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	4413      	add	r3, r2
 80030ac:	3302      	adds	r3, #2
 80030ae:	881a      	ldrh	r2, [r3, #0]
 80030b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d1ea      	bne.n	8003090 <Event_Handler+0x4ac>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 80030ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d150      	bne.n	8003164 <Event_Handler+0x580>
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 80030c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c4:	885b      	ldrh	r3, [r3, #2]
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030cc:	492a      	ldr	r1, [pc, #168]	; (8003178 <Event_Handler+0x594>)
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	440b      	add	r3, r1
 80030d2:	330c      	adds	r3, #12
 80030d4:	881b      	ldrh	r3, [r3, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d144      	bne.n	8003164 <Event_Handler+0x580>
                    (pr->Attribute_Value_Length == (2)) )
 80030da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030dc:	791b      	ldrb	r3, [r3, #4]
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d140      	bne.n	8003164 <Event_Handler+0x580>
              Notification.P2P_Client_Evt_Opcode = P2P_NOTIFICATION_INFO_RECEIVED_EVT;
 80030e2:	2302      	movs	r3, #2
 80030e4:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length = pr->Attribute_Value_Length;
 80030e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e8:	791b      	ldrb	r3, [r3, #4]
 80030ea:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload = &pr->Attribute_Value[0];
 80030ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ee:	3305      	adds	r3, #5
 80030f0:	60fb      	str	r3, [r7, #12]
              Gatt_Notification(&Notification);
 80030f2:	f107 0308 	add.w	r3, r7, #8
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f844 	bl	8003184 <Gatt_Notification>
        break;/* end EVT_BLUE_GATT_NOTIFICATION */
 80030fc:	e032      	b.n	8003164 <Event_Handler+0x580>
          aci_gatt_proc_complete_event_rp0 *pr = (void*)blue_evt->data;
 80030fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003100:	3302      	adds	r3, #2
 8003102:	63bb      	str	r3, [r7, #56]	; 0x38
          APP_DBG_MSG("-- GATT : EVT_BLUE_GATT_PROCEDURE_COMPLETE \n");
 8003104:	481e      	ldr	r0, [pc, #120]	; (8003180 <Event_Handler+0x59c>)
 8003106:	f008 f915 	bl	800b334 <puts>
          APP_DBG_MSG("\n");
 800310a:	200a      	movs	r0, #10
 800310c:	f008 f8a2 	bl	800b254 <putchar>
          index = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003116:	e004      	b.n	8003122 <Event_Handler+0x53e>
            index++;
 8003118:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800311c:	3301      	adds	r3, #1
 800311e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003122:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10b      	bne.n	8003142 <Event_Handler+0x55e>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800312a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800312e:	4a12      	ldr	r2, [pc, #72]	; (8003178 <Event_Handler+0x594>)
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	4413      	add	r3, r2
 8003134:	3302      	adds	r3, #2
 8003136:	881a      	ldrh	r2, [r3, #0]
 8003138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800313e:	429a      	cmp	r2, r3
 8003140:	d1ea      	bne.n	8003118 <Event_Handler+0x534>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8003142:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10e      	bne.n	8003168 <Event_Handler+0x584>
            UTIL_SEQ_SetTask( 1<<CFG_TASK_SEARCH_SERVICE_ID, CFG_SCH_PRIO_0);
 800314a:	2100      	movs	r1, #0
 800314c:	2004      	movs	r0, #4
 800314e:	f007 ff2b 	bl	800afa8 <UTIL_SEQ_SetTask>
        break; /*EVT_BLUE_GATT_PROCEDURE_COMPLETE*/
 8003152:	e009      	b.n	8003168 <Event_Handler+0x584>
          break;
 8003154:	bf00      	nop
 8003156:	e008      	b.n	800316a <Event_Handler+0x586>
        break;
 8003158:	bf00      	nop
 800315a:	e006      	b.n	800316a <Event_Handler+0x586>
        break;
 800315c:	bf00      	nop
 800315e:	e004      	b.n	800316a <Event_Handler+0x586>
        break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 8003160:	bf00      	nop
 8003162:	e002      	b.n	800316a <Event_Handler+0x586>
        break;/* end EVT_BLUE_GATT_NOTIFICATION */
 8003164:	bf00      	nop
 8003166:	e000      	b.n	800316a <Event_Handler+0x586>
        break; /*EVT_BLUE_GATT_PROCEDURE_COMPLETE*/
 8003168:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800316a:	bf00      	nop
  }

  return(return_value);
 800316c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
}/* end BLE_CTRL_Event_Acknowledged_Status_t */
 8003170:	4618      	mov	r0, r3
 8003172:	3750      	adds	r7, #80	; 0x50
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	200001cc 	.word	0x200001cc
 800317c:	0800c4e4 	.word	0x0800c4e4
 8003180:	0800c52c 	.word	0x0800c52c

08003184 <Gatt_Notification>:

void Gatt_Notification(P2P_Client_App_Notification_evt_t *pNotification)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Gatt_Notification_1*/

/* USER CODE END Gatt_Notification_1 */
  switch(pNotification->P2P_Client_Evt_Opcode)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d000      	beq.n	8003196 <Gatt_Notification+0x12>

    default:
/* USER CODE BEGIN P2P_Client_Evt_Opcode_Default */

/* USER CODE END P2P_Client_Evt_Opcode_Default */
      break;
 8003194:	e027      	b.n	80031e6 <Gatt_Notification+0x62>
      P2P_Client_App_Context.LedControl.Device_Led_Selection=pNotification->DataTransfered.pPayload[0];
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	781a      	ldrb	r2, [r3, #0]
 800319c:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <Gatt_Notification+0x6c>)
 800319e:	705a      	strb	r2, [r3, #1]
      switch(P2P_Client_App_Context.LedControl.Device_Led_Selection) {
 80031a0:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <Gatt_Notification+0x6c>)
 80031a2:	785b      	ldrb	r3, [r3, #1]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d000      	beq.n	80031aa <Gatt_Notification+0x26>
        default : break;
 80031a8:	e01c      	b.n	80031e4 <Gatt_Notification+0x60>
          P2P_Client_App_Context.LedControl.Led1=pNotification->DataTransfered.pPayload[1];
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	785a      	ldrb	r2, [r3, #1]
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <Gatt_Notification+0x6c>)
 80031b2:	709a      	strb	r2, [r3, #2]
          if(P2P_Client_App_Context.LedControl.Led1==0x00){
 80031b4:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <Gatt_Notification+0x6c>)
 80031b6:	789b      	ldrb	r3, [r3, #2]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d109      	bne.n	80031d0 <Gatt_Notification+0x4c>
            BSP_LED_Off(LED_BLUE);
 80031bc:	2000      	movs	r0, #0
 80031be:	f000 fc1b 	bl	80039f8 <BSP_LED_Off>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED OFF \n\r");
 80031c2:	480c      	ldr	r0, [pc, #48]	; (80031f4 <Gatt_Notification+0x70>)
 80031c4:	f008 f82e 	bl	800b224 <iprintf>
            APP_DBG_MSG(" \n\r");
 80031c8:	480b      	ldr	r0, [pc, #44]	; (80031f8 <Gatt_Notification+0x74>)
 80031ca:	f008 f82b 	bl	800b224 <iprintf>
          break;
 80031ce:	e008      	b.n	80031e2 <Gatt_Notification+0x5e>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED ON\n\r");
 80031d0:	480a      	ldr	r0, [pc, #40]	; (80031fc <Gatt_Notification+0x78>)
 80031d2:	f008 f827 	bl	800b224 <iprintf>
            APP_DBG_MSG(" \n\r");
 80031d6:	4808      	ldr	r0, [pc, #32]	; (80031f8 <Gatt_Notification+0x74>)
 80031d8:	f008 f824 	bl	800b224 <iprintf>
            BSP_LED_On(LED_BLUE);
 80031dc:	2000      	movs	r0, #0
 80031de:	f000 fbf1 	bl	80039c4 <BSP_LED_On>
          break;
 80031e2:	bf00      	nop
      break;
 80031e4:	bf00      	nop
  }
/* USER CODE BEGIN Gatt_Notification_2*/

/* USER CODE END Gatt_Notification_2 */
  return;
 80031e6:	bf00      	nop
}
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	200001dc 	.word	0x200001dc
 80031f4:	0800c558 	.word	0x0800c558
 80031f8:	0800c598 	.word	0x0800c598
 80031fc:	0800c59c 	.word	0x0800c59c

08003200 <P2P_Client_APP_Get_State>:

uint8_t P2P_Client_APP_Get_State( void ) {
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return aP2PClientContext[0].state;
 8003204:	4b03      	ldr	r3, [pc, #12]	; (8003214 <P2P_Client_APP_Get_State+0x14>)
 8003206:	781b      	ldrb	r3, [r3, #0]
}
 8003208:	4618      	mov	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	200001cc 	.word	0x200001cc

08003218 <Write_Char>:
 * @brief  Feature Characteristic update
 * @param  pFeatureValue: The address of the new value to be written
 * @retval None
 */
tBleStatus Write_Char(uint16_t UUID, uint8_t Service_Instance, uint8_t *pPayload)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	603a      	str	r2, [r7, #0]
 8003222:	80fb      	strh	r3, [r7, #6]
 8003224:	460b      	mov	r3, r1
 8003226:	717b      	strb	r3, [r7, #5]

  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003228:	2342      	movs	r3, #66	; 0x42
 800322a:	73fb      	strb	r3, [r7, #15]
  uint8_t index;

  index = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003230:	e01b      	b.n	800326a <Write_Char+0x52>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {

    switch(UUID)
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	f64f 6241 	movw	r2, #65089	; 0xfe41
 8003238:	4293      	cmp	r3, r2
 800323a:	d000      	beq.n	800323e <Write_Char+0x26>
                                         (uint8_t *)  pPayload);

        break;

      default:
        break;
 800323c:	e012      	b.n	8003264 <Write_Char+0x4c>
        ret =aci_gatt_write_without_resp(aP2PClientContext[index].connHandle,
 800323e:	7bbb      	ldrb	r3, [r7, #14]
 8003240:	4a11      	ldr	r2, [pc, #68]	; (8003288 <Write_Char+0x70>)
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	4413      	add	r3, r2
 8003246:	3302      	adds	r3, #2
 8003248:	8818      	ldrh	r0, [r3, #0]
 800324a:	7bbb      	ldrb	r3, [r7, #14]
 800324c:	4a0e      	ldr	r2, [pc, #56]	; (8003288 <Write_Char+0x70>)
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	4413      	add	r3, r2
 8003252:	3308      	adds	r3, #8
 8003254:	8819      	ldrh	r1, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2202      	movs	r2, #2
 800325a:	f005 ffb1 	bl	80091c0 <aci_gatt_write_without_resp>
 800325e:	4603      	mov	r3, r0
 8003260:	73fb      	strb	r3, [r7, #15]
        break;
 8003262:	bf00      	nop
    }
    index++;
 8003264:	7bbb      	ldrb	r3, [r7, #14]
 8003266:	3301      	adds	r3, #1
 8003268:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800326a:	7bbb      	ldrb	r3, [r7, #14]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d106      	bne.n	800327e <Write_Char+0x66>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 8003270:	7bbb      	ldrb	r3, [r7, #14]
 8003272:	4a05      	ldr	r2, [pc, #20]	; (8003288 <Write_Char+0x70>)
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	4413      	add	r3, r2
 8003278:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1d9      	bne.n	8003232 <Write_Char+0x1a>
  }

  return ret;
 800327e:	7bfb      	ldrb	r3, [r7, #15]
}/* end Write_Char() */
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	200001cc 	.word	0x200001cc

0800328c <Button_Trigger_Received>:

void Button_Trigger_Received(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0


  APP_DBG_MSG("-- P2P APPLICATION CLIENT  : BUTTON PUSHED - WRITE TO SERVER \n ");
 8003290:	480c      	ldr	r0, [pc, #48]	; (80032c4 <Button_Trigger_Received+0x38>)
 8003292:	f007 ffc7 	bl	800b224 <iprintf>
  APP_DBG_MSG(" \n\r");
 8003296:	480c      	ldr	r0, [pc, #48]	; (80032c8 <Button_Trigger_Received+0x3c>)
 8003298:	f007 ffc4 	bl	800b224 <iprintf>
  if(P2P_Client_App_Context.ButtonStatus.Button1==0x00){
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <Button_Trigger_Received+0x40>)
 800329e:	791b      	ldrb	r3, [r3, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d103      	bne.n	80032ac <Button_Trigger_Received+0x20>
    P2P_Client_App_Context.ButtonStatus.Button1=0x01;
 80032a4:	4b09      	ldr	r3, [pc, #36]	; (80032cc <Button_Trigger_Received+0x40>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	711a      	strb	r2, [r3, #4]
 80032aa:	e002      	b.n	80032b2 <Button_Trigger_Received+0x26>
  }else {
    P2P_Client_App_Context.ButtonStatus.Button1=0x00;
 80032ac:	4b07      	ldr	r3, [pc, #28]	; (80032cc <Button_Trigger_Received+0x40>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	711a      	strb	r2, [r3, #4]
  }

  Write_Char( P2P_WRITE_CHAR_UUID, 0, (uint8_t *)&P2P_Client_App_Context.ButtonStatus);
 80032b2:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <Button_Trigger_Received+0x44>)
 80032b4:	2100      	movs	r1, #0
 80032b6:	f64f 6041 	movw	r0, #65089	; 0xfe41
 80032ba:	f7ff ffad 	bl	8003218 <Write_Char>

  return;
 80032be:	bf00      	nop
}
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	0800c5dc 	.word	0x0800c5dc
 80032c8:	0800c598 	.word	0x0800c598
 80032cc:	200001dc 	.word	0x200001dc
 80032d0:	200001df 	.word	0x200001df

080032d4 <Update_Service>:

void Update_Service()
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
  uint16_t enable = 0x0001;
 80032da:	2301      	movs	r3, #1
 80032dc:	80bb      	strh	r3, [r7, #4]
  static uint8_t value = 1;

  uint8_t index;

  index = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80032e2:	e0ea      	b.n	80034ba <Update_Service+0x1e6>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {


    switch(aP2PClientContext[index].state)
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	4a7d      	ldr	r2, [pc, #500]	; (80034dc <Update_Service+0x208>)
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	4413      	add	r3, r2
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	3b07      	subs	r3, #7
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	f200 80de 	bhi.w	80034b2 <Update_Service+0x1de>
 80032f6:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <Update_Service+0x28>)
 80032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fc:	08003321 	.word	0x08003321
 8003300:	08003329 	.word	0x08003329
 8003304:	0800335b 	.word	0x0800335b
 8003308:	0800338f 	.word	0x0800338f
 800330c:	080033c3 	.word	0x080033c3
 8003310:	080033d9 	.word	0x080033d9
 8003314:	0800340f 	.word	0x0800340f
 8003318:	08003445 	.word	0x08003445
 800331c:	0800347f 	.word	0x0800347f
    {

      case APP_BLE_DISCOVER_SERVICES:
        APP_DBG_MSG("P2P_DISCOVER_SERVICES\n");
 8003320:	486f      	ldr	r0, [pc, #444]	; (80034e0 <Update_Service+0x20c>)
 8003322:	f008 f807 	bl	800b334 <puts>
        break;
 8003326:	e0c5      	b.n	80034b4 <Update_Service+0x1e0>
      case APP_BLE_DISCOVER_CHARACS:
        APP_DBG_MSG("* GATT : Discover P2P Characteristics\n");
 8003328:	486e      	ldr	r0, [pc, #440]	; (80034e4 <Update_Service+0x210>)
 800332a:	f008 f803 	bl	800b334 <puts>
        aci_gatt_disc_all_char_of_service(aP2PClientContext[index].connHandle,
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	4a6a      	ldr	r2, [pc, #424]	; (80034dc <Update_Service+0x208>)
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	4413      	add	r3, r2
 8003336:	3302      	adds	r3, #2
 8003338:	8818      	ldrh	r0, [r3, #0]
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	4a67      	ldr	r2, [pc, #412]	; (80034dc <Update_Service+0x208>)
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	4413      	add	r3, r2
 8003342:	3304      	adds	r3, #4
 8003344:	8819      	ldrh	r1, [r3, #0]
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	4a64      	ldr	r2, [pc, #400]	; (80034dc <Update_Service+0x208>)
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	4413      	add	r3, r2
 800334e:	3306      	adds	r3, #6
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	f005 fd38 	bl	8008dc8 <aci_gatt_disc_all_char_of_service>
                                          aP2PClientContext[index].P2PServiceHandle,
                                          aP2PClientContext[index].P2PServiceEndHandle);

        break;
 8003358:	e0ac      	b.n	80034b4 <Update_Service+0x1e0>

      case APP_BLE_DISCOVER_WRITE_VALVE_ON:
      {
    	  value = 1;
 800335a:	4b63      	ldr	r3, [pc, #396]	; (80034e8 <Update_Service+0x214>)
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
    	  aci_gatt_write_char_value(aP2PClientContext[index].connHandle,
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	4a5e      	ldr	r2, [pc, #376]	; (80034dc <Update_Service+0x208>)
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	4413      	add	r3, r2
 8003368:	3302      	adds	r3, #2
 800336a:	8818      	ldrh	r0, [r3, #0]
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	4a5b      	ldr	r2, [pc, #364]	; (80034dc <Update_Service+0x208>)
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	4413      	add	r3, r2
 8003374:	3308      	adds	r3, #8
 8003376:	8819      	ldrh	r1, [r3, #0]
 8003378:	4b5b      	ldr	r3, [pc, #364]	; (80034e8 <Update_Service+0x214>)
 800337a:	2201      	movs	r2, #1
 800337c:	f005 fe08 	bl	8008f90 <aci_gatt_write_char_value>
    			  	  	  	  	    aP2PClientContext[index].P2PWriteToServerCharHdle,
									1,
									&value);
    	  aP2PClientContext[index].state = APP_BLE_DISCOVER_WRITE_VALVE_OFF;
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	4a56      	ldr	r2, [pc, #344]	; (80034dc <Update_Service+0x208>)
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	4413      	add	r3, r2
 8003388:	220a      	movs	r2, #10
 800338a:	701a      	strb	r2, [r3, #0]
    	  break;
 800338c:	e092      	b.n	80034b4 <Update_Service+0x1e0>
      }
      case APP_BLE_DISCOVER_WRITE_VALVE_OFF:
      {
    	  value = 0;
 800338e:	4b56      	ldr	r3, [pc, #344]	; (80034e8 <Update_Service+0x214>)
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
    	  aci_gatt_write_char_value(aP2PClientContext[index].connHandle,
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	4a51      	ldr	r2, [pc, #324]	; (80034dc <Update_Service+0x208>)
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	4413      	add	r3, r2
 800339c:	3302      	adds	r3, #2
 800339e:	8818      	ldrh	r0, [r3, #0]
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	4a4e      	ldr	r2, [pc, #312]	; (80034dc <Update_Service+0x208>)
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	4413      	add	r3, r2
 80033a8:	3308      	adds	r3, #8
 80033aa:	8819      	ldrh	r1, [r3, #0]
 80033ac:	4b4e      	ldr	r3, [pc, #312]	; (80034e8 <Update_Service+0x214>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	f005 fdee 	bl	8008f90 <aci_gatt_write_char_value>
    			  	  	  	  	    aP2PClientContext[index].P2PWriteToServerCharHdle,
									1,
									&value);
    	  aP2PClientContext[index].state = APP_BLE_DISCOVER_DISCONNECT;
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	4a49      	ldr	r2, [pc, #292]	; (80034dc <Update_Service+0x208>)
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	4413      	add	r3, r2
 80033bc:	220b      	movs	r2, #11
 80033be:	701a      	strb	r2, [r3, #0]
    	  break;
 80033c0:	e078      	b.n	80034b4 <Update_Service+0x1e0>
      }
      case APP_BLE_DISCOVER_DISCONNECT:
    	  aci_gap_terminate(aP2PClientContext[index].connHandle, 0x13);
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	4a45      	ldr	r2, [pc, #276]	; (80034dc <Update_Service+0x208>)
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	4413      	add	r3, r2
 80033ca:	3302      	adds	r3, #2
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	2113      	movs	r1, #19
 80033d0:	4618      	mov	r0, r3
 80033d2:	f005 f9ef 	bl	80087b4 <aci_gap_terminate>
    	  break;
 80033d6:	e06d      	b.n	80034b4 <Update_Service+0x1e0>


      case APP_BLE_DISCOVER_WRITE_DESC: /* Not Used - No decriptor */
        APP_DBG_MSG("* GATT : Discover Descriptor of TX - Write Characteritic\n");
 80033d8:	4844      	ldr	r0, [pc, #272]	; (80034ec <Update_Service+0x218>)
 80033da:	f007 ffab 	bl	800b334 <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	4a3e      	ldr	r2, [pc, #248]	; (80034dc <Update_Service+0x208>)
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	4413      	add	r3, r2
 80033e6:	3302      	adds	r3, #2
 80033e8:	8818      	ldrh	r0, [r3, #0]
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	4a3b      	ldr	r2, [pc, #236]	; (80034dc <Update_Service+0x208>)
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	4413      	add	r3, r2
 80033f2:	3308      	adds	r3, #8
 80033f4:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PWriteToServerCharHdle,
                                    aP2PClientContext[index].P2PWriteToServerCharHdle+2);
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	4a38      	ldr	r2, [pc, #224]	; (80034dc <Update_Service+0x208>)
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	4413      	add	r3, r2
 80033fe:	3308      	adds	r3, #8
 8003400:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003402:	3302      	adds	r3, #2
 8003404:	b29b      	uxth	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	f005 fd50 	bl	8008eac <aci_gatt_disc_all_char_desc>

        break;
 800340c:	e052      	b.n	80034b4 <Update_Service+0x1e0>
      case APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC:
        APP_DBG_MSG("* GATT : Discover Descriptor of Rx - Notification Characteritic\n");
 800340e:	4838      	ldr	r0, [pc, #224]	; (80034f0 <Update_Service+0x21c>)
 8003410:	f007 ff90 	bl	800b334 <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	4a31      	ldr	r2, [pc, #196]	; (80034dc <Update_Service+0x208>)
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	4413      	add	r3, r2
 800341c:	3302      	adds	r3, #2
 800341e:	8818      	ldrh	r0, [r3, #0]
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	4a2e      	ldr	r2, [pc, #184]	; (80034dc <Update_Service+0x208>)
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	4413      	add	r3, r2
 8003428:	330c      	adds	r3, #12
 800342a:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PNotificationCharHdle,
                                    aP2PClientContext[index].P2PNotificationCharHdle+2);
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	4a2b      	ldr	r2, [pc, #172]	; (80034dc <Update_Service+0x208>)
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	4413      	add	r3, r2
 8003434:	330c      	adds	r3, #12
 8003436:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003438:	3302      	adds	r3, #2
 800343a:	b29b      	uxth	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	f005 fd35 	bl	8008eac <aci_gatt_disc_all_char_desc>

        break;
 8003442:	e037      	b.n	80034b4 <Update_Service+0x1e0>
      case APP_BLE_ENABLE_NOTIFICATION_DESC:
        APP_DBG_MSG("* GATT : Enable Server Notification\n");
 8003444:	482b      	ldr	r0, [pc, #172]	; (80034f4 <Update_Service+0x220>)
 8003446:	f007 ff75 	bl	800b334 <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	4a23      	ldr	r2, [pc, #140]	; (80034dc <Update_Service+0x208>)
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	4413      	add	r3, r2
 8003452:	3302      	adds	r3, #2
 8003454:	8818      	ldrh	r0, [r3, #0]
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	4a20      	ldr	r2, [pc, #128]	; (80034dc <Update_Service+0x208>)
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	4413      	add	r3, r2
 800345e:	330e      	adds	r3, #14
 8003460:	8819      	ldrh	r1, [r3, #0]
 8003462:	1d3b      	adds	r3, r7, #4
 8003464:	2202      	movs	r2, #2
 8003466:	f005 fe1f 	bl	80090a8 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&enable);

        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <Update_Service+0x208>)
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	4413      	add	r3, r2
 8003472:	2206      	movs	r2, #6
 8003474:	701a      	strb	r2, [r3, #0]
        BSP_LED_Off(LED_RED);
 8003476:	2002      	movs	r0, #2
 8003478:	f000 fabe 	bl	80039f8 <BSP_LED_Off>

        break;
 800347c:	e01a      	b.n	80034b4 <Update_Service+0x1e0>
      case APP_BLE_DISABLE_NOTIFICATION_DESC :
        APP_DBG_MSG("* GATT : Disable Server Notification\n");
 800347e:	481e      	ldr	r0, [pc, #120]	; (80034f8 <Update_Service+0x224>)
 8003480:	f007 ff58 	bl	800b334 <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	4a15      	ldr	r2, [pc, #84]	; (80034dc <Update_Service+0x208>)
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	4413      	add	r3, r2
 800348c:	3302      	adds	r3, #2
 800348e:	8818      	ldrh	r0, [r3, #0]
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	4a12      	ldr	r2, [pc, #72]	; (80034dc <Update_Service+0x208>)
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	4413      	add	r3, r2
 8003498:	330e      	adds	r3, #14
 800349a:	8819      	ldrh	r1, [r3, #0]
 800349c:	1d3b      	adds	r3, r7, #4
 800349e:	2202      	movs	r2, #2
 80034a0:	f005 fe02 	bl	80090a8 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&enable);

        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	4a0d      	ldr	r2, [pc, #52]	; (80034dc <Update_Service+0x208>)
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	4413      	add	r3, r2
 80034ac:	2206      	movs	r2, #6
 80034ae:	701a      	strb	r2, [r3, #0]

        break;
 80034b0:	e000      	b.n	80034b4 <Update_Service+0x1e0>
      default:
        break;
 80034b2:	bf00      	nop
    }
    index++;
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	3301      	adds	r3, #1
 80034b8:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d108      	bne.n	80034d2 <Update_Service+0x1fe>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	4a06      	ldr	r2, [pc, #24]	; (80034dc <Update_Service+0x208>)
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	4413      	add	r3, r2
 80034c8:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f47f af0a 	bne.w	80032e4 <Update_Service+0x10>
  }
  return;
 80034d0:	bf00      	nop
 80034d2:	bf00      	nop
}
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	200001cc 	.word	0x200001cc
 80034e0:	0800c61c 	.word	0x0800c61c
 80034e4:	0800c634 	.word	0x0800c634
 80034e8:	20000004 	.word	0x20000004
 80034ec:	0800c65c 	.word	0x0800c65c
 80034f0:	0800c698 	.word	0x0800c698
 80034f4:	0800c6d8 	.word	0x0800c6d8
 80034f8:	0800c6fc 	.word	0x0800c6fc

080034fc <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <LL_PWR_EnableBootC2+0x1c>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4a04      	ldr	r2, [pc, #16]	; (8003518 <LL_PWR_EnableBootC2+0x1c>)
 8003506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800350a:	60d3      	str	r3, [r2, #12]
}
 800350c:	bf00      	nop
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	58000400 	.word	0x58000400

0800351c <LL_AHB3_GRP1_EnableClock>:
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003528:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800352a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4313      	orrs	r3, r2
 8003532:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003538:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4013      	ands	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003540:	68fb      	ldr	r3, [r7, #12]
}
 8003542:	bf00      	nop
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <LL_C1_IPCC_EnableIT_TXF>:
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	601a      	str	r2, [r3, #0]
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <LL_C1_IPCC_EnableIT_RXO>:
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f043 0201 	orr.w	r2, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	601a      	str	r2, [r3, #0]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <LL_C1_IPCC_EnableTransmitChannel>:
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	041b      	lsls	r3, r3, #16
 80035a0:	43db      	mvns	r3, r3
 80035a2:	401a      	ands	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	605a      	str	r2, [r3, #4]
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	041b      	lsls	r3, r3, #16
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	605a      	str	r2, [r3, #4]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	43db      	mvns	r3, r3
 80035ea:	401a      	ands	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	605a      	str	r2, [r3, #4]
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <LL_C1_IPCC_ClearFlag_CHx>:
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	609a      	str	r2, [r3, #8]
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <LL_C1_IPCC_SetFlag_CHx>:
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	041a      	lsls	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	609a      	str	r2, [r3, #8]
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	4013      	ands	r3, r2
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d101      	bne.n	8003652 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	4013      	ands	r3, r2
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d101      	bne.n	800367c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
	...

0800368c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8003690:	2102      	movs	r1, #2
 8003692:	4819      	ldr	r0, [pc, #100]	; (80036f8 <HW_IPCC_Rx_Handler+0x6c>)
 8003694:	f7ff ffe4 	bl	8003660 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <HW_IPCC_Rx_Handler+0x26>
 800369e:	4b16      	ldr	r3, [pc, #88]	; (80036f8 <HW_IPCC_Rx_Handler+0x6c>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	43db      	mvns	r3, r3
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80036ac:	f000 f8de 	bl	800386c <HW_IPCC_SYS_EvtHandler>
 80036b0:	e01f      	b.n	80036f2 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80036b2:	2101      	movs	r1, #1
 80036b4:	4810      	ldr	r0, [pc, #64]	; (80036f8 <HW_IPCC_Rx_Handler+0x6c>)
 80036b6:	f7ff ffd3 	bl	8003660 <LL_C2_IPCC_IsActiveFlag_CHx>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HW_IPCC_Rx_Handler+0x46>
 80036c0:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <HW_IPCC_Rx_Handler+0x6c>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d102      	bne.n	80036d2 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80036cc:	f000 f892 	bl	80037f4 <HW_IPCC_BLE_EvtHandler>
 80036d0:	e00f      	b.n	80036f2 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80036d2:	2108      	movs	r1, #8
 80036d4:	4808      	ldr	r0, [pc, #32]	; (80036f8 <HW_IPCC_Rx_Handler+0x6c>)
 80036d6:	f7ff ffc3 	bl	8003660 <LL_C2_IPCC_IsActiveFlag_CHx>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d009      	beq.n	80036f4 <HW_IPCC_Rx_Handler+0x68>
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <HW_IPCC_Rx_Handler+0x6c>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80036ee:	f000 f909 	bl	8003904 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80036f2:	bf00      	nop
 80036f4:	bf00      	nop
}
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	58000c00 	.word	0x58000c00

080036fc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8003700:	2102      	movs	r1, #2
 8003702:	4822      	ldr	r0, [pc, #136]	; (800378c <HW_IPCC_Tx_Handler+0x90>)
 8003704:	f7ff ff97 	bl	8003636 <LL_C1_IPCC_IsActiveFlag_CHx>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <HW_IPCC_Tx_Handler+0x26>
 800370e:	4b1f      	ldr	r3, [pc, #124]	; (800378c <HW_IPCC_Tx_Handler+0x90>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	43db      	mvns	r3, r3
 8003714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800371c:	f000 f89a 	bl	8003854 <HW_IPCC_SYS_CmdEvtHandler>
 8003720:	e031      	b.n	8003786 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8003722:	2102      	movs	r1, #2
 8003724:	4819      	ldr	r0, [pc, #100]	; (800378c <HW_IPCC_Tx_Handler+0x90>)
 8003726:	f7ff ff86 	bl	8003636 <LL_C1_IPCC_IsActiveFlag_CHx>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d109      	bne.n	8003744 <HW_IPCC_Tx_Handler+0x48>
 8003730:	4b16      	ldr	r3, [pc, #88]	; (800378c <HW_IPCC_Tx_Handler+0x90>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	43db      	mvns	r3, r3
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800373e:	f000 f889 	bl	8003854 <HW_IPCC_SYS_CmdEvtHandler>
 8003742:	e020      	b.n	8003786 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8003744:	2108      	movs	r1, #8
 8003746:	4811      	ldr	r0, [pc, #68]	; (800378c <HW_IPCC_Tx_Handler+0x90>)
 8003748:	f7ff ff75 	bl	8003636 <LL_C1_IPCC_IsActiveFlag_CHx>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <HW_IPCC_Tx_Handler+0x6a>
 8003752:	4b0e      	ldr	r3, [pc, #56]	; (800378c <HW_IPCC_Tx_Handler+0x90>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	43db      	mvns	r3, r3
 8003758:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8003760:	f000 f8b2 	bl	80038c8 <HW_IPCC_MM_FreeBufHandler>
 8003764:	e00f      	b.n	8003786 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8003766:	2120      	movs	r1, #32
 8003768:	4808      	ldr	r0, [pc, #32]	; (800378c <HW_IPCC_Tx_Handler+0x90>)
 800376a:	f7ff ff64 	bl	8003636 <LL_C1_IPCC_IsActiveFlag_CHx>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d109      	bne.n	8003788 <HW_IPCC_Tx_Handler+0x8c>
 8003774:	4b05      	ldr	r3, [pc, #20]	; (800378c <HW_IPCC_Tx_Handler+0x90>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	43db      	mvns	r3, r3
 800377a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8003782:	f000 f843 	bl	800380c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8003786:	bf00      	nop
 8003788:	bf00      	nop
}
 800378a:	bd80      	pop	{r7, pc}
 800378c:	58000c00 	.word	0x58000c00

08003790 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8003794:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8003796:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8003798:	f7ff feb0 	bl	80034fc <LL_PWR_EnableBootC2>

  return;
 800379c:	bf00      	nop
}
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80037a4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80037a8:	f7ff feb8 	bl	800351c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80037ac:	4806      	ldr	r0, [pc, #24]	; (80037c8 <HW_IPCC_Init+0x28>)
 80037ae:	f7ff fede 	bl	800356e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80037b2:	4805      	ldr	r0, [pc, #20]	; (80037c8 <HW_IPCC_Init+0x28>)
 80037b4:	f7ff fecb 	bl	800354e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80037b8:	202c      	movs	r0, #44	; 0x2c
 80037ba:	f000 fc31 	bl	8004020 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80037be:	202d      	movs	r0, #45	; 0x2d
 80037c0:	f000 fc2e 	bl	8004020 <HAL_NVIC_EnableIRQ>

  return;
 80037c4:	bf00      	nop
}
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	58000c00 	.word	0x58000c00

080037cc <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80037d0:	2101      	movs	r1, #1
 80037d2:	4802      	ldr	r0, [pc, #8]	; (80037dc <HW_IPCC_BLE_Init+0x10>)
 80037d4:	f7ff ff00 	bl	80035d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80037d8:	bf00      	nop
}
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	58000c00 	.word	0x58000c00

080037e0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80037e4:	2101      	movs	r1, #1
 80037e6:	4802      	ldr	r0, [pc, #8]	; (80037f0 <HW_IPCC_BLE_SendCmd+0x10>)
 80037e8:	f7ff ff16 	bl	8003618 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80037ec:	bf00      	nop
}
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	58000c00 	.word	0x58000c00

080037f4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80037f8:	f007 f964 	bl	800aac4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80037fc:	2101      	movs	r1, #1
 80037fe:	4802      	ldr	r0, [pc, #8]	; (8003808 <HW_IPCC_BLE_EvtHandler+0x14>)
 8003800:	f7ff fefc 	bl	80035fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003804:	bf00      	nop
}
 8003806:	bd80      	pop	{r7, pc}
 8003808:	58000c00 	.word	0x58000c00

0800380c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8003810:	2120      	movs	r1, #32
 8003812:	4803      	ldr	r0, [pc, #12]	; (8003820 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8003814:	f7ff fece 	bl	80035b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8003818:	f007 f970 	bl	800aafc <HW_IPCC_BLE_AclDataAckNot>

  return;
 800381c:	bf00      	nop
}
 800381e:	bd80      	pop	{r7, pc}
 8003820:	58000c00 	.word	0x58000c00

08003824 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003828:	2102      	movs	r1, #2
 800382a:	4802      	ldr	r0, [pc, #8]	; (8003834 <HW_IPCC_SYS_Init+0x10>)
 800382c:	f7ff fed4 	bl	80035d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003830:	bf00      	nop
}
 8003832:	bd80      	pop	{r7, pc}
 8003834:	58000c00 	.word	0x58000c00

08003838 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800383c:	2102      	movs	r1, #2
 800383e:	4804      	ldr	r0, [pc, #16]	; (8003850 <HW_IPCC_SYS_SendCmd+0x18>)
 8003840:	f7ff feea 	bl	8003618 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003844:	2102      	movs	r1, #2
 8003846:	4802      	ldr	r0, [pc, #8]	; (8003850 <HW_IPCC_SYS_SendCmd+0x18>)
 8003848:	f7ff fea1 	bl	800358e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800384c:	bf00      	nop
}
 800384e:	bd80      	pop	{r7, pc}
 8003850:	58000c00 	.word	0x58000c00

08003854 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003858:	2102      	movs	r1, #2
 800385a:	4803      	ldr	r0, [pc, #12]	; (8003868 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800385c:	f7ff feaa 	bl	80035b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8003860:	f007 f994 	bl	800ab8c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8003864:	bf00      	nop
}
 8003866:	bd80      	pop	{r7, pc}
 8003868:	58000c00 	.word	0x58000c00

0800386c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8003870:	f007 f99c 	bl	800abac <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003874:	2102      	movs	r1, #2
 8003876:	4802      	ldr	r0, [pc, #8]	; (8003880 <HW_IPCC_SYS_EvtHandler+0x14>)
 8003878:	f7ff fec0 	bl	80035fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800387c:	bf00      	nop
}
 800387e:	bd80      	pop	{r7, pc}
 8003880:	58000c00 	.word	0x58000c00

08003884 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800388c:	2108      	movs	r1, #8
 800388e:	480c      	ldr	r0, [pc, #48]	; (80038c0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003890:	f7ff fed1 	bl	8003636 <LL_C1_IPCC_IsActiveFlag_CHx>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800389a:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80038a0:	2108      	movs	r1, #8
 80038a2:	4807      	ldr	r0, [pc, #28]	; (80038c0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80038a4:	f7ff fe73 	bl	800358e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80038a8:	e006      	b.n	80038b8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80038ae:	2108      	movs	r1, #8
 80038b0:	4803      	ldr	r0, [pc, #12]	; (80038c0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80038b2:	f7ff feb1 	bl	8003618 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80038b6:	bf00      	nop
}
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	58000c00 	.word	0x58000c00
 80038c4:	20000264 	.word	0x20000264

080038c8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80038cc:	2108      	movs	r1, #8
 80038ce:	4806      	ldr	r0, [pc, #24]	; (80038e8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80038d0:	f7ff fe70 	bl	80035b4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <HW_IPCC_MM_FreeBufHandler+0x24>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80038da:	2108      	movs	r1, #8
 80038dc:	4802      	ldr	r0, [pc, #8]	; (80038e8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80038de:	f7ff fe9b 	bl	8003618 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80038e2:	bf00      	nop
}
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	58000c00 	.word	0x58000c00
 80038ec:	20000264 	.word	0x20000264

080038f0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80038f4:	2108      	movs	r1, #8
 80038f6:	4802      	ldr	r0, [pc, #8]	; (8003900 <HW_IPCC_TRACES_Init+0x10>)
 80038f8:	f7ff fe6e 	bl	80035d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80038fc:	bf00      	nop
}
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	58000c00 	.word	0x58000c00

08003904 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8003908:	f007 f9ee 	bl	800ace8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800390c:	2108      	movs	r1, #8
 800390e:	4802      	ldr	r0, [pc, #8]	; (8003918 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8003910:	f7ff fe74 	bl	80035fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003914:	bf00      	nop
}
 8003916:	bd80      	pop	{r7, pc}
 8003918:	58000c00 	.word	0x58000c00

0800391c <LL_AHB2_GRP1_EnableClock>:
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003928:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800392a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4313      	orrs	r3, r2
 8003932:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003938:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4013      	ands	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003940:	68fb      	ldr	r3, [r7, #12]
}
 8003942:	bf00      	nop
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800395a:	f107 030c 	add.w	r3, r7, #12
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	609a      	str	r2, [r3, #8]
 8003966:	60da      	str	r2, [r3, #12]
 8003968:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800396a:	2002      	movs	r0, #2
 800396c:	f7ff ffd6 	bl	800391c <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	4a12      	ldr	r2, [pc, #72]	; (80039bc <BSP_LED_Init+0x6c>)
 8003974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003978:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800397a:	2301      	movs	r3, #1
 800397c:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003982:	2302      	movs	r3, #2
 8003984:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	4a0d      	ldr	r2, [pc, #52]	; (80039c0 <BSP_LED_Init+0x70>)
 800398a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398e:	f107 020c 	add.w	r2, r7, #12
 8003992:	4611      	mov	r1, r2
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fe4d 	bl	8004634 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	4a08      	ldr	r2, [pc, #32]	; (80039c0 <BSP_LED_Init+0x70>)
 800399e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80039a2:	79fb      	ldrb	r3, [r7, #7]
 80039a4:	4a05      	ldr	r2, [pc, #20]	; (80039bc <BSP_LED_Init+0x6c>)
 80039a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039aa:	2200      	movs	r2, #0
 80039ac:	4619      	mov	r1, r3
 80039ae:	f000 ffb1 	bl	8004914 <HAL_GPIO_WritePin>
}
 80039b2:	bf00      	nop
 80039b4:	3720      	adds	r7, #32
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	0800c724 	.word	0x0800c724
 80039c0:	20000008 	.word	0x20000008

080039c4 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	4a07      	ldr	r2, [pc, #28]	; (80039f0 <BSP_LED_On+0x2c>)
 80039d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	4a06      	ldr	r2, [pc, #24]	; (80039f4 <BSP_LED_On+0x30>)
 80039da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039de:	2201      	movs	r2, #1
 80039e0:	4619      	mov	r1, r3
 80039e2:	f000 ff97 	bl	8004914 <HAL_GPIO_WritePin>
}
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000008 	.word	0x20000008
 80039f4:	0800c724 	.word	0x0800c724

080039f8 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	4a07      	ldr	r2, [pc, #28]	; (8003a24 <BSP_LED_Off+0x2c>)
 8003a06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	4a06      	ldr	r2, [pc, #24]	; (8003a28 <BSP_LED_Off+0x30>)
 8003a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a12:	2200      	movs	r2, #0
 8003a14:	4619      	mov	r1, r3
 8003a16:	f000 ff7d 	bl	8004914 <HAL_GPIO_WritePin>
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000008 	.word	0x20000008
 8003a28:	0800c724 	.word	0x0800c724

08003a2c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	460a      	mov	r2, r1
 8003a36:	71fb      	strb	r3, [r7, #7]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8003a3c:	f107 030c 	add.w	r3, r7, #12
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	605a      	str	r2, [r3, #4]
 8003a46:	609a      	str	r2, [r3, #8]
 8003a48:	60da      	str	r2, [r3, #12]
 8003a4a:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d103      	bne.n	8003a5a <BSP_PB_Init+0x2e>
 8003a52:	2004      	movs	r0, #4
 8003a54:	f7ff ff62 	bl	800391c <LL_AHB2_GRP1_EnableClock>
 8003a58:	e00c      	b.n	8003a74 <BSP_PB_Init+0x48>
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d103      	bne.n	8003a68 <BSP_PB_Init+0x3c>
 8003a60:	2008      	movs	r0, #8
 8003a62:	f7ff ff5b 	bl	800391c <LL_AHB2_GRP1_EnableClock>
 8003a66:	e005      	b.n	8003a74 <BSP_PB_Init+0x48>
 8003a68:	79fb      	ldrb	r3, [r7, #7]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d102      	bne.n	8003a74 <BSP_PB_Init+0x48>
 8003a6e:	2008      	movs	r0, #8
 8003a70:	f7ff ff54 	bl	800391c <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8003a74:	79bb      	ldrb	r3, [r7, #6]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d117      	bne.n	8003aaa <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	4a20      	ldr	r2, [pc, #128]	; (8003b00 <BSP_PB_Init+0xd4>)
 8003a7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a82:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	4a1c      	ldr	r2, [pc, #112]	; (8003b04 <BSP_PB_Init+0xd8>)
 8003a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a98:	f107 020c 	add.w	r2, r7, #12
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fdc8 	bl	8004634 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	f7fe f9b1 	bl	8001e0c <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8003aaa:	79bb      	ldrb	r3, [r7, #6]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d122      	bne.n	8003af6 <BSP_PB_Init+0xca>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	4a13      	ldr	r2, [pc, #76]	; (8003b00 <BSP_PB_Init+0xd4>)
 8003ab4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ab8:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8003aba:	2301      	movs	r3, #1
 8003abc:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8003abe:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <BSP_PB_Init+0xdc>)
 8003ac0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	4a0f      	ldr	r2, [pc, #60]	; (8003b04 <BSP_PB_Init+0xd8>)
 8003ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aca:	f107 020c 	add.w	r2, r7, #12
 8003ace:	4611      	mov	r1, r2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fdaf 	bl	8004634 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	4a0c      	ldr	r2, [pc, #48]	; (8003b0c <BSP_PB_Init+0xe0>)
 8003ada:	5cd3      	ldrb	r3, [r2, r3]
 8003adc:	b25b      	sxtb	r3, r3
 8003ade:	2200      	movs	r2, #0
 8003ae0:	210f      	movs	r1, #15
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fa82 	bl	8003fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	4a08      	ldr	r2, [pc, #32]	; (8003b0c <BSP_PB_Init+0xe0>)
 8003aec:	5cd3      	ldrb	r3, [r2, r3]
 8003aee:	b25b      	sxtb	r3, r3
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fa95 	bl	8004020 <HAL_NVIC_EnableIRQ>
  }
}
 8003af6:	bf00      	nop
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	0800c72c 	.word	0x0800c72c
 8003b04:	20000014 	.word	0x20000014
 8003b08:	10210000 	.word	0x10210000
 8003b0c:	0800c734 	.word	0x0800c734

08003b10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003b14:	4b26      	ldr	r3, [pc, #152]	; (8003bb0 <SystemInit+0xa0>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003b1a:	4b25      	ldr	r3, [pc, #148]	; (8003bb0 <SystemInit+0xa0>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b20:	4a23      	ldr	r2, [pc, #140]	; (8003bb0 <SystemInit+0xa0>)
 8003b22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003b42:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b4e:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <SystemInit+0xa4>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b60:	f023 0305 	bic.w	r3, r3, #5
 8003b64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b74:	f023 0301 	bic.w	r3, r3, #1
 8003b78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b80:	4a0d      	ldr	r2, [pc, #52]	; (8003bb8 <SystemInit+0xa8>)
 8003b82:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b88:	4a0b      	ldr	r2, [pc, #44]	; (8003bb8 <SystemInit+0xa8>)
 8003b8a:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	619a      	str	r2, [r3, #24]
}
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	e000ed00 	.word	0xe000ed00
 8003bb4:	faf6fefb 	.word	0xfaf6fefb
 8003bb8:	22041000 	.word	0x22041000

08003bbc <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8003bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	4a47      	ldr	r2, [pc, #284]	; (8003cec <SystemCoreClockUpdate+0x130>)
 8003bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 030c 	and.w	r3, r3, #12
 8003be0:	2b0c      	cmp	r3, #12
 8003be2:	d867      	bhi.n	8003cb4 <SystemCoreClockUpdate+0xf8>
 8003be4:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <SystemCoreClockUpdate+0x30>)
 8003be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bea:	bf00      	nop
 8003bec:	08003c21 	.word	0x08003c21
 8003bf0:	08003cb5 	.word	0x08003cb5
 8003bf4:	08003cb5 	.word	0x08003cb5
 8003bf8:	08003cb5 	.word	0x08003cb5
 8003bfc:	08003c29 	.word	0x08003c29
 8003c00:	08003cb5 	.word	0x08003cb5
 8003c04:	08003cb5 	.word	0x08003cb5
 8003c08:	08003cb5 	.word	0x08003cb5
 8003c0c:	08003c31 	.word	0x08003c31
 8003c10:	08003cb5 	.word	0x08003cb5
 8003c14:	08003cb5 	.word	0x08003cb5
 8003c18:	08003cb5 	.word	0x08003cb5
 8003c1c:	08003c39 	.word	0x08003c39
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8003c20:	4a33      	ldr	r2, [pc, #204]	; (8003cf0 <SystemCoreClockUpdate+0x134>)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	6013      	str	r3, [r2, #0]
      break;
 8003c26:	e049      	b.n	8003cbc <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8003c28:	4b31      	ldr	r3, [pc, #196]	; (8003cf0 <SystemCoreClockUpdate+0x134>)
 8003c2a:	4a32      	ldr	r2, [pc, #200]	; (8003cf4 <SystemCoreClockUpdate+0x138>)
 8003c2c:	601a      	str	r2, [r3, #0]
      break;
 8003c2e:	e045      	b.n	8003cbc <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003c30:	4b2f      	ldr	r3, [pc, #188]	; (8003cf0 <SystemCoreClockUpdate+0x134>)
 8003c32:	4a31      	ldr	r2, [pc, #196]	; (8003cf8 <SystemCoreClockUpdate+0x13c>)
 8003c34:	601a      	str	r2, [r3, #0]
      break;
 8003c36:	e041      	b.n	8003cbc <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8003c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	091b      	lsrs	r3, r3, #4
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	3301      	adds	r3, #1
 8003c52:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d105      	bne.n	8003c66 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8003c5a:	4a26      	ldr	r2, [pc, #152]	; (8003cf4 <SystemCoreClockUpdate+0x138>)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	e00d      	b.n	8003c82 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d105      	bne.n	8003c78 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8003c6c:	4a22      	ldr	r2, [pc, #136]	; (8003cf8 <SystemCoreClockUpdate+0x13c>)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	e004      	b.n	8003c82 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	0a1b      	lsrs	r3, r3, #8
 8003c8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	fb02 f303 	mul.w	r3, r2, r3
 8003c94:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8003c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	0f5b      	lsrs	r3, r3, #29
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cae:	4a10      	ldr	r2, [pc, #64]	; (8003cf0 <SystemCoreClockUpdate+0x134>)
 8003cb0:	6013      	str	r3, [r2, #0]
      break;
 8003cb2:	e003      	b.n	8003cbc <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8003cb4:	4a0e      	ldr	r2, [pc, #56]	; (8003cf0 <SystemCoreClockUpdate+0x134>)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	6013      	str	r3, [r2, #0]
      break;
 8003cba:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	091b      	lsrs	r3, r3, #4
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	4a0c      	ldr	r2, [pc, #48]	; (8003cfc <SystemCoreClockUpdate+0x140>)
 8003cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cce:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8003cd0:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <SystemCoreClockUpdate+0x134>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cda:	4a05      	ldr	r2, [pc, #20]	; (8003cf0 <SystemCoreClockUpdate+0x134>)
 8003cdc:	6013      	str	r3, [r2, #0]

}
 8003cde:	bf00      	nop
 8003ce0:	371c      	adds	r7, #28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	0800c798 	.word	0x0800c798
 8003cf0:	20000020 	.word	0x20000020
 8003cf4:	00f42400 	.word	0x00f42400
 8003cf8:	01e84800 	.word	0x01e84800
 8003cfc:	0800c738 	.word	0x0800c738

08003d00 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4a04      	ldr	r2, [pc, #16]	; (8003d1c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6053      	str	r3, [r2, #4]
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	e0042000 	.word	0xe0042000

08003d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <HAL_Init+0x3c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a0b      	ldr	r2, [pc, #44]	; (8003d5c <HAL_Init+0x3c>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d36:	2003      	movs	r0, #3
 8003d38:	f000 f94d 	bl	8003fd6 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	f7fe f85a 	bl	8001df6 <HAL_InitTick>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	71fb      	strb	r3, [r7, #7]
 8003d4c:	e001      	b.n	8003d52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d4e:	f7fe f8f9 	bl	8001f44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d52:	79fb      	ldrb	r3, [r7, #7]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	58004000 	.word	0x58004000

08003d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d64:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_IncTick+0x1c>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_IncTick+0x20>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	4a03      	ldr	r2, [pc, #12]	; (8003d7c <HAL_IncTick+0x1c>)
 8003d70:	6013      	str	r3, [r2, #0]
}
 8003d72:	bf00      	nop
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	200015c0 	.word	0x200015c0
 8003d80:	20000028 	.word	0x20000028

08003d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return uwTick;
 8003d88:	4b03      	ldr	r3, [pc, #12]	; (8003d98 <HAL_GetTick+0x14>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	200015c0 	.word	0x200015c0

08003d9c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003da0:	4b03      	ldr	r3, [pc, #12]	; (8003db0 <HAL_GetTickPrio+0x14>)
 8003da2:	681b      	ldr	r3, [r3, #0]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20000024 	.word	0x20000024

08003db4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003db8:	f7ff ffa2 	bl	8003d00 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003dbc:	bf00      	nop
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003df2:	4a04      	ldr	r2, [pc, #16]	; (8003e04 <__NVIC_SetPriorityGrouping+0x44>)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	60d3      	str	r3, [r2, #12]
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e0c:	4b04      	ldr	r3, [pc, #16]	; (8003e20 <__NVIC_GetPriorityGrouping+0x18>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	0a1b      	lsrs	r3, r3, #8
 8003e12:	f003 0307 	and.w	r3, r3, #7
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	e000ed00 	.word	0xe000ed00

08003e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	db0b      	blt.n	8003e4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	f003 021f 	and.w	r2, r3, #31
 8003e3c:	4907      	ldr	r1, [pc, #28]	; (8003e5c <__NVIC_EnableIRQ+0x38>)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	2001      	movs	r0, #1
 8003e46:	fa00 f202 	lsl.w	r2, r0, r2
 8003e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	e000e100 	.word	0xe000e100

08003e60 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	db10      	blt.n	8003e94 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	f003 021f 	and.w	r2, r3, #31
 8003e78:	4909      	ldr	r1, [pc, #36]	; (8003ea0 <__NVIC_DisableIRQ+0x40>)
 8003e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	2001      	movs	r0, #1
 8003e82:	fa00 f202 	lsl.w	r2, r0, r2
 8003e86:	3320      	adds	r3, #32
 8003e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e90:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	e000e100 	.word	0xe000e100

08003ea4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	db0c      	blt.n	8003ed0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	f003 021f 	and.w	r2, r3, #31
 8003ebc:	4907      	ldr	r1, [pc, #28]	; (8003edc <__NVIC_SetPendingIRQ+0x38>)
 8003ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	2001      	movs	r0, #1
 8003ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8003eca:	3340      	adds	r3, #64	; 0x40
 8003ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	e000e100 	.word	0xe000e100

08003ee0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	db0c      	blt.n	8003f0c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	f003 021f 	and.w	r2, r3, #31
 8003ef8:	4907      	ldr	r1, [pc, #28]	; (8003f18 <__NVIC_ClearPendingIRQ+0x38>)
 8003efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	2001      	movs	r0, #1
 8003f02:	fa00 f202 	lsl.w	r2, r0, r2
 8003f06:	3360      	adds	r3, #96	; 0x60
 8003f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	e000e100 	.word	0xe000e100

08003f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	6039      	str	r1, [r7, #0]
 8003f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	db0a      	blt.n	8003f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	490c      	ldr	r1, [pc, #48]	; (8003f68 <__NVIC_SetPriority+0x4c>)
 8003f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3a:	0112      	lsls	r2, r2, #4
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	440b      	add	r3, r1
 8003f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f44:	e00a      	b.n	8003f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	4908      	ldr	r1, [pc, #32]	; (8003f6c <__NVIC_SetPriority+0x50>)
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	3b04      	subs	r3, #4
 8003f54:	0112      	lsls	r2, r2, #4
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	440b      	add	r3, r1
 8003f5a:	761a      	strb	r2, [r3, #24]
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	e000e100 	.word	0xe000e100
 8003f6c:	e000ed00 	.word	0xe000ed00

08003f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b089      	sub	sp, #36	; 0x24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f1c3 0307 	rsb	r3, r3, #7
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	bf28      	it	cs
 8003f8e:	2304      	movcs	r3, #4
 8003f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3304      	adds	r3, #4
 8003f96:	2b06      	cmp	r3, #6
 8003f98:	d902      	bls.n	8003fa0 <NVIC_EncodePriority+0x30>
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	3b03      	subs	r3, #3
 8003f9e:	e000      	b.n	8003fa2 <NVIC_EncodePriority+0x32>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43da      	mvns	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc2:	43d9      	mvns	r1, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc8:	4313      	orrs	r3, r2
         );
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3724      	adds	r7, #36	; 0x24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b082      	sub	sp, #8
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff feee 	bl	8003dc0 <__NVIC_SetPriorityGrouping>
}
 8003fe4:	bf00      	nop
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
 8003ff8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ffa:	f7ff ff05 	bl	8003e08 <__NVIC_GetPriorityGrouping>
 8003ffe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	6978      	ldr	r0, [r7, #20]
 8004006:	f7ff ffb3 	bl	8003f70 <NVIC_EncodePriority>
 800400a:	4602      	mov	r2, r0
 800400c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004010:	4611      	mov	r1, r2
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff ff82 	bl	8003f1c <__NVIC_SetPriority>
}
 8004018:	bf00      	nop
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800402a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff fef8 	bl	8003e24 <__NVIC_EnableIRQ>
}
 8004034:	bf00      	nop
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff ff08 	bl	8003e60 <__NVIC_DisableIRQ>
}
 8004050:	bf00      	nop
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff ff1c 	bl	8003ea4 <__NVIC_SetPendingIRQ>
}
 800406c:	bf00      	nop
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800407e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff ff2c 	bl	8003ee0 <__NVIC_ClearPendingIRQ>
}
 8004088:	bf00      	nop
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e08d      	b.n	80041be <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	4b47      	ldr	r3, [pc, #284]	; (80041c8 <HAL_DMA_Init+0x138>)
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d80f      	bhi.n	80040ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	4b45      	ldr	r3, [pc, #276]	; (80041cc <HAL_DMA_Init+0x13c>)
 80040b6:	4413      	add	r3, r2
 80040b8:	4a45      	ldr	r2, [pc, #276]	; (80041d0 <HAL_DMA_Init+0x140>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	091b      	lsrs	r3, r3, #4
 80040c0:	009a      	lsls	r2, r3, #2
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a42      	ldr	r2, [pc, #264]	; (80041d4 <HAL_DMA_Init+0x144>)
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40
 80040cc:	e00e      	b.n	80040ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	4b40      	ldr	r3, [pc, #256]	; (80041d8 <HAL_DMA_Init+0x148>)
 80040d6:	4413      	add	r3, r2
 80040d8:	4a3d      	ldr	r2, [pc, #244]	; (80041d0 <HAL_DMA_Init+0x140>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	091b      	lsrs	r3, r3, #4
 80040e0:	009a      	lsls	r2, r3, #2
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a3c      	ldr	r2, [pc, #240]	; (80041dc <HAL_DMA_Init+0x14c>)
 80040ea:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004106:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004110:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800411c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004128:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fa16 	bl	8004570 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800414c:	d102      	bne.n	8004154 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004168:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d010      	beq.n	8004194 <HAL_DMA_Init+0x104>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b04      	cmp	r3, #4
 8004178:	d80c      	bhi.n	8004194 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fa36 	bl	80045ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004190:	605a      	str	r2, [r3, #4]
 8004192:	e008      	b.n	80041a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40020407 	.word	0x40020407
 80041cc:	bffdfff8 	.word	0xbffdfff8
 80041d0:	cccccccd 	.word	0xcccccccd
 80041d4:	40020000 	.word	0x40020000
 80041d8:	bffdfbf8 	.word	0xbffdfbf8
 80041dc:	40020400 	.word	0x40020400

080041e0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d101      	bne.n	8004200 <HAL_DMA_Start_IT+0x20>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e066      	b.n	80042ce <HAL_DMA_Start_IT+0xee>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b01      	cmp	r3, #1
 8004212:	d155      	bne.n	80042c0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0201 	bic.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	68b9      	ldr	r1, [r7, #8]
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f95a 	bl	80044f2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f042 020e 	orr.w	r2, r2, #14
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	e00f      	b.n	8004278 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0204 	bic.w	r2, r2, #4
 8004266:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 020a 	orr.w	r2, r2, #10
 8004276:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d007      	beq.n	8004296 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004294:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429a:	2b00      	cmp	r3, #0
 800429c:	d007      	beq.n	80042ae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0201 	orr.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	e005      	b.n	80042cc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80042c8:	2302      	movs	r3, #2
 80042ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80042cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d005      	beq.n	80042fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2204      	movs	r2, #4
 80042f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
 80042f8:	e047      	b.n	800438a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 020e 	bic.w	r2, r2, #14
 8004308:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0201 	bic.w	r2, r2, #1
 8004318:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004324:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004328:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	f003 021c 	and.w	r2, r3, #28
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	2101      	movs	r1, #1
 8004338:	fa01 f202 	lsl.w	r2, r1, r2
 800433c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004346:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00c      	beq.n	800436a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800435e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004368:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	4798      	blx	r3
    }
  }
  return status;
 800438a:	7bfb      	ldrb	r3, [r7, #15]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b0:	f003 031c 	and.w	r3, r3, #28
 80043b4:	2204      	movs	r2, #4
 80043b6:	409a      	lsls	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d026      	beq.n	800440e <HAL_DMA_IRQHandler+0x7a>
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d021      	beq.n	800440e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d107      	bne.n	80043e8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0204 	bic.w	r2, r2, #4
 80043e6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ec:	f003 021c 	and.w	r2, r3, #28
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	2104      	movs	r1, #4
 80043f6:	fa01 f202 	lsl.w	r2, r1, r2
 80043fa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004400:	2b00      	cmp	r3, #0
 8004402:	d071      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800440c:	e06c      	b.n	80044e8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	f003 031c 	and.w	r3, r3, #28
 8004416:	2202      	movs	r2, #2
 8004418:	409a      	lsls	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4013      	ands	r3, r2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d02e      	beq.n	8004480 <HAL_DMA_IRQHandler+0xec>
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d029      	beq.n	8004480 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10b      	bne.n	8004452 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 020a 	bic.w	r2, r2, #10
 8004448:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004456:	f003 021c 	and.w	r2, r3, #28
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	2102      	movs	r1, #2
 8004460:	fa01 f202 	lsl.w	r2, r1, r2
 8004464:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d038      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800447e:	e033      	b.n	80044e8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004484:	f003 031c 	and.w	r3, r3, #28
 8004488:	2208      	movs	r2, #8
 800448a:	409a      	lsls	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4013      	ands	r3, r2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d02a      	beq.n	80044ea <HAL_DMA_IRQHandler+0x156>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	d025      	beq.n	80044ea <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 020e 	bic.w	r2, r2, #14
 80044ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b2:	f003 021c 	and.w	r2, r3, #28
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	2101      	movs	r1, #1
 80044bc:	fa01 f202 	lsl.w	r2, r1, r2
 80044c0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d004      	beq.n	80044ea <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
}
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b085      	sub	sp, #20
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
 80044fe:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004508:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450e:	2b00      	cmp	r3, #0
 8004510:	d004      	beq.n	800451c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800451a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004520:	f003 021c 	and.w	r2, r3, #28
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	2101      	movs	r1, #1
 800452a:	fa01 f202 	lsl.w	r2, r1, r2
 800452e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b10      	cmp	r3, #16
 800453e:	d108      	bne.n	8004552 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004550:	e007      	b.n	8004562 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	60da      	str	r2, [r3, #12]
}
 8004562:	bf00      	nop
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
	...

08004570 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	4b17      	ldr	r3, [pc, #92]	; (80045dc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004580:	429a      	cmp	r2, r3
 8004582:	d80a      	bhi.n	800459a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004588:	089b      	lsrs	r3, r3, #2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004590:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6493      	str	r3, [r2, #72]	; 0x48
 8004598:	e007      	b.n	80045aa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459e:	089b      	lsrs	r3, r3, #2
 80045a0:	009a      	lsls	r2, r3, #2
 80045a2:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80045a4:	4413      	add	r3, r2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	3b08      	subs	r3, #8
 80045b2:	4a0c      	ldr	r2, [pc, #48]	; (80045e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80045b4:	fba2 2303 	umull	r2, r3, r2, r3
 80045b8:	091b      	lsrs	r3, r3, #4
 80045ba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a0a      	ldr	r2, [pc, #40]	; (80045e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80045c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 031c 	and.w	r3, r3, #28
 80045c8:	2201      	movs	r2, #1
 80045ca:	409a      	lsls	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	651a      	str	r2, [r3, #80]	; 0x50
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	40020407 	.word	0x40020407
 80045e0:	4002081c 	.word	0x4002081c
 80045e4:	cccccccd 	.word	0xcccccccd
 80045e8:	40020880 	.word	0x40020880

080045ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	4b0b      	ldr	r3, [pc, #44]	; (800462c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	461a      	mov	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a08      	ldr	r2, [pc, #32]	; (8004630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800460e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3b01      	subs	r3, #1
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	2201      	movs	r2, #1
 800461a:	409a      	lsls	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004620:	bf00      	nop
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	1000823f 	.word	0x1000823f
 8004630:	40020940 	.word	0x40020940

08004634 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004642:	e14c      	b.n	80048de <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	2101      	movs	r1, #1
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	fa01 f303 	lsl.w	r3, r1, r3
 8004650:	4013      	ands	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 813e 	beq.w	80048d8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d003      	beq.n	800466c <HAL_GPIO_Init+0x38>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b12      	cmp	r3, #18
 800466a:	d123      	bne.n	80046b4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	08da      	lsrs	r2, r3, #3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3208      	adds	r2, #8
 8004674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004678:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	220f      	movs	r2, #15
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	43db      	mvns	r3, r3
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4013      	ands	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	08da      	lsrs	r2, r3, #3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3208      	adds	r2, #8
 80046ae:	6939      	ldr	r1, [r7, #16]
 80046b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	2203      	movs	r2, #3
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4013      	ands	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 0203 	and.w	r2, r3, #3
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d00b      	beq.n	8004708 <HAL_GPIO_Init+0xd4>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d007      	beq.n	8004708 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046fc:	2b11      	cmp	r3, #17
 80046fe:	d003      	beq.n	8004708 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b12      	cmp	r3, #18
 8004706:	d130      	bne.n	800476a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	2203      	movs	r2, #3
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	43db      	mvns	r3, r3
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4013      	ands	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800473e:	2201      	movs	r2, #1
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43db      	mvns	r3, r3
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4013      	ands	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	091b      	lsrs	r3, r3, #4
 8004754:	f003 0201 	and.w	r2, r3, #1
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	2203      	movs	r2, #3
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43db      	mvns	r3, r3
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4013      	ands	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 8098 	beq.w	80048d8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80047a8:	4a54      	ldr	r2, [pc, #336]	; (80048fc <HAL_GPIO_Init+0x2c8>)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	089b      	lsrs	r3, r3, #2
 80047ae:	3302      	adds	r3, #2
 80047b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	220f      	movs	r2, #15
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	43db      	mvns	r3, r3
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4013      	ands	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80047d2:	d019      	beq.n	8004808 <HAL_GPIO_Init+0x1d4>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a4a      	ldr	r2, [pc, #296]	; (8004900 <HAL_GPIO_Init+0x2cc>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d013      	beq.n	8004804 <HAL_GPIO_Init+0x1d0>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a49      	ldr	r2, [pc, #292]	; (8004904 <HAL_GPIO_Init+0x2d0>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00d      	beq.n	8004800 <HAL_GPIO_Init+0x1cc>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a48      	ldr	r2, [pc, #288]	; (8004908 <HAL_GPIO_Init+0x2d4>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d007      	beq.n	80047fc <HAL_GPIO_Init+0x1c8>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a47      	ldr	r2, [pc, #284]	; (800490c <HAL_GPIO_Init+0x2d8>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d101      	bne.n	80047f8 <HAL_GPIO_Init+0x1c4>
 80047f4:	2304      	movs	r3, #4
 80047f6:	e008      	b.n	800480a <HAL_GPIO_Init+0x1d6>
 80047f8:	2307      	movs	r3, #7
 80047fa:	e006      	b.n	800480a <HAL_GPIO_Init+0x1d6>
 80047fc:	2303      	movs	r3, #3
 80047fe:	e004      	b.n	800480a <HAL_GPIO_Init+0x1d6>
 8004800:	2302      	movs	r3, #2
 8004802:	e002      	b.n	800480a <HAL_GPIO_Init+0x1d6>
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <HAL_GPIO_Init+0x1d6>
 8004808:	2300      	movs	r3, #0
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	f002 0203 	and.w	r2, r2, #3
 8004810:	0092      	lsls	r2, r2, #2
 8004812:	4093      	lsls	r3, r2
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800481a:	4938      	ldr	r1, [pc, #224]	; (80048fc <HAL_GPIO_Init+0x2c8>)
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	089b      	lsrs	r3, r3, #2
 8004820:	3302      	adds	r3, #2
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004828:	4b39      	ldr	r3, [pc, #228]	; (8004910 <HAL_GPIO_Init+0x2dc>)
 800482a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800482e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	43db      	mvns	r3, r3
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4013      	ands	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800484e:	4a30      	ldr	r2, [pc, #192]	; (8004910 <HAL_GPIO_Init+0x2dc>)
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004856:	4b2e      	ldr	r3, [pc, #184]	; (8004910 <HAL_GPIO_Init+0x2dc>)
 8004858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800485c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	43db      	mvns	r3, r3
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4013      	ands	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800487c:	4a24      	ldr	r2, [pc, #144]	; (8004910 <HAL_GPIO_Init+0x2dc>)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004884:	4b22      	ldr	r3, [pc, #136]	; (8004910 <HAL_GPIO_Init+0x2dc>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	43db      	mvns	r3, r3
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4013      	ands	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048a8:	4a19      	ldr	r2, [pc, #100]	; (8004910 <HAL_GPIO_Init+0x2dc>)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048ae:	4b18      	ldr	r3, [pc, #96]	; (8004910 <HAL_GPIO_Init+0x2dc>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4013      	ands	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048d2:	4a0f      	ldr	r2, [pc, #60]	; (8004910 <HAL_GPIO_Init+0x2dc>)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	3301      	adds	r3, #1
 80048dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f47f aeab 	bne.w	8004644 <HAL_GPIO_Init+0x10>
  }
}
 80048ee:	bf00      	nop
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40010000 	.word	0x40010000
 8004900:	48000400 	.word	0x48000400
 8004904:	48000800 	.word	0x48000800
 8004908:	48000c00 	.word	0x48000c00
 800490c:	48001000 	.word	0x48001000
 8004910:	58000800 	.word	0x58000800

08004914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	807b      	strh	r3, [r7, #2]
 8004920:	4613      	mov	r3, r2
 8004922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004924:	787b      	ldrb	r3, [r7, #1]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800492a:	887a      	ldrh	r2, [r7, #2]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004930:	e002      	b.n	8004938 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004932:	887a      	ldrh	r2, [r7, #2]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800494e:	4b08      	ldr	r3, [pc, #32]	; (8004970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	4013      	ands	r3, r2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d006      	beq.n	8004968 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800495a:	4a05      	ldr	r2, [pc, #20]	; (8004970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800495c:	88fb      	ldrh	r3, [r7, #6]
 800495e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	4618      	mov	r0, r3
 8004964:	f7fb ffae 	bl	80008c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004968:	bf00      	nop
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	58000800 	.word	0x58000800

08004974 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a04      	ldr	r2, [pc, #16]	; (8004990 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800497e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004982:	6013      	str	r3, [r2, #0]
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	58000400 	.word	0x58000400

08004994 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004998:	4b04      	ldr	r3, [pc, #16]	; (80049ac <HAL_PWREx_GetVoltageRange+0x18>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	58000400 	.word	0x58000400

080049b0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049c2:	d101      	bne.n	80049c8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <LL_RCC_HSE_EnableBypass>:
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80049d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049e6:	6013      	str	r3, [r2, #0]
}
 80049e8:	bf00      	nop
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <LL_RCC_HSE_DisableBypass>:
{
 80049f2:	b480      	push	{r7}
 80049f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80049f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a04:	6013      	str	r3, [r2, #0]
}
 8004a06:	bf00      	nop
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <LL_RCC_HSE_Enable>:
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a22:	6013      	str	r3, [r2, #0]
}
 8004a24:	bf00      	nop
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <LL_RCC_HSE_Disable>:
{
 8004a2e:	b480      	push	{r7}
 8004a30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a40:	6013      	str	r3, [r2, #0]
}
 8004a42:	bf00      	nop
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <LL_RCC_HSE_IsReady>:
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a5e:	d101      	bne.n	8004a64 <LL_RCC_HSE_IsReady+0x18>
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <LL_RCC_HSE_IsReady+0x1a>
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <LL_RCC_HSI_Enable>:
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a82:	6013      	str	r3, [r2, #0]
}
 8004a84:	bf00      	nop
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <LL_RCC_HSI_Disable>:
{
 8004a8e:	b480      	push	{r7}
 8004a90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aa0:	6013      	str	r3, [r2, #0]
}
 8004aa2:	bf00      	nop
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <LL_RCC_HSI_IsReady>:
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004abe:	d101      	bne.n	8004ac4 <LL_RCC_HSI_IsReady+0x18>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <LL_RCC_HSI_IsReady+0x1a>
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	061b      	lsls	r3, r3, #24
 8004ae6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aea:	4313      	orrs	r3, r2
 8004aec:	604b      	str	r3, [r1, #4]
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <LL_RCC_HSI48_Enable>:
{
 8004afa:	b480      	push	{r7}
 8004afc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004b12:	bf00      	nop
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <LL_RCC_HSI48_Disable>:
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004b34:	bf00      	nop
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <LL_RCC_HSI48_IsReady>:
{
 8004b3e:	b480      	push	{r7}
 8004b40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d101      	bne.n	8004b56 <LL_RCC_HSI48_IsReady+0x18>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <LL_RCC_HSI48_IsReady+0x1a>
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <LL_RCC_LSE_Enable>:
{
 8004b62:	b480      	push	{r7}
 8004b64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b72:	f043 0301 	orr.w	r3, r3, #1
 8004b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b7a:	bf00      	nop
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <LL_RCC_LSE_Disable>:
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b94:	f023 0301 	bic.w	r3, r3, #1
 8004b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b9c:	bf00      	nop
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <LL_RCC_LSE_EnableBypass>:
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bb6:	f043 0304 	orr.w	r3, r3, #4
 8004bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004bbe:	bf00      	nop
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <LL_RCC_LSE_DisableBypass>:
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bd8:	f023 0304 	bic.w	r3, r3, #4
 8004bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004be0:	bf00      	nop
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <LL_RCC_LSE_IsReady>:
{
 8004bea:	b480      	push	{r7}
 8004bec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d101      	bne.n	8004c02 <LL_RCC_LSE_IsReady+0x18>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <LL_RCC_LSE_IsReady+0x1a>
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <LL_RCC_LSI1_Enable>:
{
 8004c0e:	b480      	push	{r7}
 8004c10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c26:	bf00      	nop
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <LL_RCC_LSI1_Disable>:
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c40:	f023 0301 	bic.w	r3, r3, #1
 8004c44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c48:	bf00      	nop
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <LL_RCC_LSI1_IsReady>:
{
 8004c52:	b480      	push	{r7}
 8004c54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d101      	bne.n	8004c6a <LL_RCC_LSI1_IsReady+0x18>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <LL_RCC_LSI1_IsReady+0x1a>
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <LL_RCC_LSI2_Enable>:
{
 8004c76:	b480      	push	{r7}
 8004c78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c86:	f043 0304 	orr.w	r3, r3, #4
 8004c8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c8e:	bf00      	nop
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <LL_RCC_LSI2_Disable>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ca8:	f023 0304 	bic.w	r3, r3, #4
 8004cac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004cb0:	bf00      	nop
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <LL_RCC_LSI2_IsReady>:
{
 8004cba:	b480      	push	{r7}
 8004cbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d101      	bne.n	8004cd2 <LL_RCC_LSI2_IsReady+0x18>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <LL_RCC_LSI2_IsReady+0x1a>
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <LL_RCC_LSI2_SetTrimming>:
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	021b      	lsls	r3, r3, #8
 8004cf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <LL_RCC_MSI_Enable>:
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	6013      	str	r3, [r2, #0]
}
 8004d20:	bf00      	nop
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <LL_RCC_MSI_Disable>:
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d38:	f023 0301 	bic.w	r3, r3, #1
 8004d3c:	6013      	str	r3, [r2, #0]
}
 8004d3e:	bf00      	nop
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <LL_RCC_MSI_IsReady>:
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d101      	bne.n	8004d5e <LL_RCC_MSI_IsReady+0x16>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <LL_RCC_MSI_IsReady+0x18>
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <LL_RCC_MSI_SetRange>:
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	600b      	str	r3, [r1, #0]
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <LL_RCC_MSI_GetRange>:
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004da2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2bb0      	cmp	r3, #176	; 0xb0
 8004da8:	d901      	bls.n	8004dae <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004daa:	23b0      	movs	r3, #176	; 0xb0
 8004dac:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004dae:	687b      	ldr	r3, [r7, #4]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <LL_RCC_MSI_SetCalibTrimming>:
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	604b      	str	r3, [r1, #4]
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <LL_RCC_SetSysClkSource>:
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f023 0203 	bic.w	r2, r3, #3
 8004df8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	608b      	str	r3, [r1, #8]
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <LL_RCC_GetSysClkSource>:
{
 8004e0e:	b480      	push	{r7}
 8004e10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 030c 	and.w	r3, r3, #12
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <LL_RCC_SetAHBPrescaler>:
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	608b      	str	r3, [r1, #8]
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <LL_C2_RCC_SetAHBPrescaler>:
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004e5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <LL_RCC_SetAHB4Prescaler>:
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e86:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004e8a:	f023 020f 	bic.w	r2, r3, #15
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	091b      	lsrs	r3, r3, #4
 8004e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <LL_RCC_SetAPB1Prescaler>:
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	608b      	str	r3, [r1, #8]
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <LL_RCC_SetAPB2Prescaler>:
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	608b      	str	r3, [r1, #8]
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <LL_RCC_GetAHBPrescaler>:
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <LL_RCC_GetAHB4Prescaler>:
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f18:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <LL_RCC_GetAPB1Prescaler>:
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <LL_RCC_GetAPB2Prescaler>:
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <LL_RCC_PLL_Enable>:
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f6e:	6013      	str	r3, [r2, #0]
}
 8004f70:	bf00      	nop
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <LL_RCC_PLL_Disable>:
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f8c:	6013      	str	r3, [r2, #0]
}
 8004f8e:	bf00      	nop
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <LL_RCC_PLL_IsReady>:
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004faa:	d101      	bne.n	8004fb0 <LL_RCC_PLL_IsReady+0x18>
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <LL_RCC_PLL_IsReady+0x1a>
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <LL_RCC_PLL_GetN>:
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	0a1b      	lsrs	r3, r3, #8
 8004fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <LL_RCC_PLL_GetR>:
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <LL_RCC_PLL_GetDivider>:
{
 8004fee:	b480      	push	{r7}
 8004ff0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <LL_RCC_PLL_GetMainSource>:
{
 8005006:	b480      	push	{r7}
 8005008:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800500a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f003 0303 	and.w	r3, r3, #3
}
 8005014:	4618      	mov	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <LL_RCC_IsActiveFlag_HPRE>:
{
 800501e:	b480      	push	{r7}
 8005020:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800502c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005030:	d101      	bne.n	8005036 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005032:	2301      	movs	r3, #1
 8005034:	e000      	b.n	8005038 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8005042:	b480      	push	{r7}
 8005044:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800504a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800504e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005052:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005056:	d101      	bne.n	800505c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005058:	2301      	movs	r3, #1
 800505a:	e000      	b.n	800505e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800506c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005070:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800507c:	d101      	bne.n	8005082 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800507e:	2301      	movs	r3, #1
 8005080:	e000      	b.n	8005084 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800508e:	b480      	push	{r7}
 8005090:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050a0:	d101      	bne.n	80050a6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80050b2:	b480      	push	{r7}
 80050b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80050b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050c4:	d101      	bne.n	80050ca <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80050c6:	2301      	movs	r3, #1
 80050c8:	e000      	b.n	80050cc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
	...

080050d8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050d8:	b590      	push	{r4, r7, lr}
 80050da:	b08b      	sub	sp, #44	; 0x2c
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e34b      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 808f 	beq.w	8005216 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050f8:	f7ff fe89 	bl	8004e0e <LL_RCC_GetSysClkSource>
 80050fc:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050fe:	f7ff ff82 	bl	8005006 <LL_RCC_PLL_GetMainSource>
 8005102:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <HAL_RCC_OscConfig+0x3e>
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	2b0c      	cmp	r3, #12
 800510e:	d149      	bne.n	80051a4 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d146      	bne.n	80051a4 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005116:	f7ff fe17 	bl	8004d48 <LL_RCC_MSI_IsReady>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <HAL_RCC_OscConfig+0x54>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e32a      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005130:	f7ff fe2f 	bl	8004d92 <LL_RCC_MSI_GetRange>
 8005134:	4603      	mov	r3, r0
 8005136:	429c      	cmp	r4, r3
 8005138:	d914      	bls.n	8005164 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fd0e 	bl	8005b60 <RCC_SetFlashLatencyFromMSIRange>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e319      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff fe09 	bl	8004d6a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff fe2d 	bl	8004dbc <LL_RCC_MSI_SetCalibTrimming>
 8005162:	e013      	b.n	800518c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	4618      	mov	r0, r3
 800516a:	f7ff fdfe 	bl	8004d6a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff fe22 	bl	8004dbc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fcef 	bl	8005b60 <RCC_SetFlashLatencyFromMSIRange>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e2fa      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800518c:	f7fe fd16 	bl	8003bbc <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005190:	4bb4      	ldr	r3, [pc, #720]	; (8005464 <HAL_RCC_OscConfig+0x38c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	f7fc fe2e 	bl	8001df6 <HAL_InitTick>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d039      	beq.n	8005214 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e2ee      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01e      	beq.n	80051ea <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80051ac:	f7ff fdae 	bl	8004d0c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051b0:	f7fe fde8 	bl	8003d84 <HAL_GetTick>
 80051b4:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051b8:	f7fe fde4 	bl	8003d84 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e2db      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 80051ca:	f7ff fdbd 	bl	8004d48 <LL_RCC_MSI_IsReady>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f1      	beq.n	80051b8 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff fdc6 	bl	8004d6a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff fdea 	bl	8004dbc <LL_RCC_MSI_SetCalibTrimming>
 80051e8:	e015      	b.n	8005216 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80051ea:	f7ff fd9e 	bl	8004d2a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051ee:	f7fe fdc9 	bl	8003d84 <HAL_GetTick>
 80051f2:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051f6:	f7fe fdc5 	bl	8003d84 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e2bc      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005208:	f7ff fd9e 	bl	8004d48 <LL_RCC_MSI_IsReady>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f1      	bne.n	80051f6 <HAL_RCC_OscConfig+0x11e>
 8005212:	e000      	b.n	8005216 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005214:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d05a      	beq.n	80052d8 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005222:	f7ff fdf4 	bl	8004e0e <LL_RCC_GetSysClkSource>
 8005226:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005228:	f7ff feed 	bl	8005006 <LL_RCC_PLL_GetMainSource>
 800522c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b08      	cmp	r3, #8
 8005232:	d005      	beq.n	8005240 <HAL_RCC_OscConfig+0x168>
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b0c      	cmp	r3, #12
 8005238:	d10d      	bne.n	8005256 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b03      	cmp	r3, #3
 800523e:	d10a      	bne.n	8005256 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005240:	f7ff fc04 	bl	8004a4c <LL_RCC_HSE_IsReady>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d045      	beq.n	80052d6 <HAL_RCC_OscConfig+0x1fe>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d141      	bne.n	80052d6 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e295      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800525e:	d102      	bne.n	8005266 <HAL_RCC_OscConfig+0x18e>
 8005260:	f7ff fbd6 	bl	8004a10 <LL_RCC_HSE_Enable>
 8005264:	e00d      	b.n	8005282 <HAL_RCC_OscConfig+0x1aa>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800526e:	d104      	bne.n	800527a <HAL_RCC_OscConfig+0x1a2>
 8005270:	f7ff fbb0 	bl	80049d4 <LL_RCC_HSE_EnableBypass>
 8005274:	f7ff fbcc 	bl	8004a10 <LL_RCC_HSE_Enable>
 8005278:	e003      	b.n	8005282 <HAL_RCC_OscConfig+0x1aa>
 800527a:	f7ff fbd8 	bl	8004a2e <LL_RCC_HSE_Disable>
 800527e:	f7ff fbb8 	bl	80049f2 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d012      	beq.n	80052b0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528a:	f7fe fd7b 	bl	8003d84 <HAL_GetTick>
 800528e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005290:	e008      	b.n	80052a4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005292:	f7fe fd77 	bl	8003d84 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b64      	cmp	r3, #100	; 0x64
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e26e      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 80052a4:	f7ff fbd2 	bl	8004a4c <LL_RCC_HSE_IsReady>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0f1      	beq.n	8005292 <HAL_RCC_OscConfig+0x1ba>
 80052ae:	e013      	b.n	80052d8 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b0:	f7fe fd68 	bl	8003d84 <HAL_GetTick>
 80052b4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052b8:	f7fe fd64 	bl	8003d84 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b64      	cmp	r3, #100	; 0x64
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e25b      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 80052ca:	f7ff fbbf 	bl	8004a4c <LL_RCC_HSE_IsReady>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1f1      	bne.n	80052b8 <HAL_RCC_OscConfig+0x1e0>
 80052d4:	e000      	b.n	80052d8 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d051      	beq.n	8005388 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052e4:	f7ff fd93 	bl	8004e0e <LL_RCC_GetSysClkSource>
 80052e8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052ea:	f7ff fe8c 	bl	8005006 <LL_RCC_PLL_GetMainSource>
 80052ee:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d005      	beq.n	8005302 <HAL_RCC_OscConfig+0x22a>
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b0c      	cmp	r3, #12
 80052fa:	d113      	bne.n	8005324 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d110      	bne.n	8005324 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005302:	f7ff fbd3 	bl	8004aac <LL_RCC_HSI_IsReady>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d005      	beq.n	8005318 <HAL_RCC_OscConfig+0x240>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e234      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff fbd7 	bl	8004ad0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005322:	e031      	b.n	8005388 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d019      	beq.n	8005360 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800532c:	f7ff fba0 	bl	8004a70 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005330:	f7fe fd28 	bl	8003d84 <HAL_GetTick>
 8005334:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005338:	f7fe fd24 	bl	8003d84 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e21b      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 800534a:	f7ff fbaf 	bl	8004aac <LL_RCC_HSI_IsReady>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0f1      	beq.n	8005338 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	4618      	mov	r0, r3
 800535a:	f7ff fbb9 	bl	8004ad0 <LL_RCC_HSI_SetCalibTrimming>
 800535e:	e013      	b.n	8005388 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005360:	f7ff fb95 	bl	8004a8e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005364:	f7fe fd0e 	bl	8003d84 <HAL_GetTick>
 8005368:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800536c:	f7fe fd0a 	bl	8003d84 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e201      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 800537e:	f7ff fb95 	bl	8004aac <LL_RCC_HSI_IsReady>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1f1      	bne.n	800536c <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b00      	cmp	r3, #0
 8005392:	d106      	bne.n	80053a2 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 80a2 	beq.w	80054e6 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d075      	beq.n	8005496 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0310 	and.w	r3, r3, #16
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d046      	beq.n	8005444 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80053b6:	f7ff fc4c 	bl	8004c52 <LL_RCC_LSI1_IsReady>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d113      	bne.n	80053e8 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80053c0:	f7ff fc25 	bl	8004c0e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053c4:	f7fe fcde 	bl	8003d84 <HAL_GetTick>
 80053c8:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80053cc:	f7fe fcda 	bl	8003d84 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e1d1      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80053de:	f7ff fc38 	bl	8004c52 <LL_RCC_LSI1_IsReady>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0f1      	beq.n	80053cc <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80053e8:	f7ff fc45 	bl	8004c76 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ec:	f7fe fcca 	bl	8003d84 <HAL_GetTick>
 80053f0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80053f2:	e008      	b.n	8005406 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80053f4:	f7fe fcc6 	bl	8003d84 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e1bd      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005406:	f7ff fc58 	bl	8004cba <LL_RCC_LSI2_IsReady>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0f1      	beq.n	80053f4 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff fc62 	bl	8004cde <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800541a:	f7ff fc09 	bl	8004c30 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541e:	f7fe fcb1 	bl	8003d84 <HAL_GetTick>
 8005422:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005424:	e008      	b.n	8005438 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005426:	f7fe fcad 	bl	8003d84 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e1a4      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005438:	f7ff fc0b 	bl	8004c52 <LL_RCC_LSI1_IsReady>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f1      	bne.n	8005426 <HAL_RCC_OscConfig+0x34e>
 8005442:	e050      	b.n	80054e6 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005444:	f7ff fbe3 	bl	8004c0e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005448:	f7fe fc9c 	bl	8003d84 <HAL_GetTick>
 800544c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800544e:	e00b      	b.n	8005468 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005450:	f7fe fc98 	bl	8003d84 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d904      	bls.n	8005468 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e18f      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
 8005462:	bf00      	nop
 8005464:	20000024 	.word	0x20000024
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005468:	f7ff fbf3 	bl	8004c52 <LL_RCC_LSI1_IsReady>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0ee      	beq.n	8005450 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005472:	f7ff fc11 	bl	8004c98 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005478:	f7fe fc84 	bl	8003d84 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b03      	cmp	r3, #3
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e17b      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800548a:	f7ff fc16 	bl	8004cba <LL_RCC_LSI2_IsReady>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1f1      	bne.n	8005478 <HAL_RCC_OscConfig+0x3a0>
 8005494:	e027      	b.n	80054e6 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005496:	f7ff fbff 	bl	8004c98 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800549a:	f7fe fc73 	bl	8003d84 <HAL_GetTick>
 800549e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80054a2:	f7fe fc6f 	bl	8003d84 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e166      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80054b4:	f7ff fc01 	bl	8004cba <LL_RCC_LSI2_IsReady>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1f1      	bne.n	80054a2 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80054be:	f7ff fbb7 	bl	8004c30 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c2:	f7fe fc5f 	bl	8003d84 <HAL_GetTick>
 80054c6:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80054ca:	f7fe fc5b 	bl	8003d84 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e152      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80054dc:	f7ff fbb9 	bl	8004c52 <LL_RCC_LSI1_IsReady>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f1      	bne.n	80054ca <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d05b      	beq.n	80055aa <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054f2:	4ba6      	ldr	r3, [pc, #664]	; (800578c <HAL_RCC_OscConfig+0x6b4>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d114      	bne.n	8005528 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80054fe:	f7ff fa39 	bl	8004974 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005502:	f7fe fc3f 	bl	8003d84 <HAL_GetTick>
 8005506:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005508:	e008      	b.n	800551c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800550a:	f7fe fc3b 	bl	8003d84 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e132      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800551c:	4b9b      	ldr	r3, [pc, #620]	; (800578c <HAL_RCC_OscConfig+0x6b4>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f0      	beq.n	800550a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d102      	bne.n	8005536 <HAL_RCC_OscConfig+0x45e>
 8005530:	f7ff fb17 	bl	8004b62 <LL_RCC_LSE_Enable>
 8005534:	e00c      	b.n	8005550 <HAL_RCC_OscConfig+0x478>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b05      	cmp	r3, #5
 800553c:	d104      	bne.n	8005548 <HAL_RCC_OscConfig+0x470>
 800553e:	f7ff fb32 	bl	8004ba6 <LL_RCC_LSE_EnableBypass>
 8005542:	f7ff fb0e 	bl	8004b62 <LL_RCC_LSE_Enable>
 8005546:	e003      	b.n	8005550 <HAL_RCC_OscConfig+0x478>
 8005548:	f7ff fb1c 	bl	8004b84 <LL_RCC_LSE_Disable>
 800554c:	f7ff fb3c 	bl	8004bc8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d014      	beq.n	8005582 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005558:	f7fe fc14 	bl	8003d84 <HAL_GetTick>
 800555c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800555e:	e00a      	b.n	8005576 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005560:	f7fe fc10 	bl	8003d84 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	f241 3288 	movw	r2, #5000	; 0x1388
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e105      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005576:	f7ff fb38 	bl	8004bea <LL_RCC_LSE_IsReady>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0ef      	beq.n	8005560 <HAL_RCC_OscConfig+0x488>
 8005580:	e013      	b.n	80055aa <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005582:	f7fe fbff 	bl	8003d84 <HAL_GetTick>
 8005586:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005588:	e00a      	b.n	80055a0 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800558a:	f7fe fbfb 	bl	8003d84 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	f241 3288 	movw	r2, #5000	; 0x1388
 8005598:	4293      	cmp	r3, r2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e0f0      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 80055a0:	f7ff fb23 	bl	8004bea <LL_RCC_LSE_IsReady>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1ef      	bne.n	800558a <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d02c      	beq.n	8005610 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d014      	beq.n	80055e8 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055be:	f7ff fa9c 	bl	8004afa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c2:	f7fe fbdf 	bl	8003d84 <HAL_GetTick>
 80055c6:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80055c8:	e008      	b.n	80055dc <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055ca:	f7fe fbdb 	bl	8003d84 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e0d2      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80055dc:	f7ff faaf 	bl	8004b3e <LL_RCC_HSI48_IsReady>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0f1      	beq.n	80055ca <HAL_RCC_OscConfig+0x4f2>
 80055e6:	e013      	b.n	8005610 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055e8:	f7ff fa98 	bl	8004b1c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ec:	f7fe fbca 	bl	8003d84 <HAL_GetTick>
 80055f0:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80055f2:	e008      	b.n	8005606 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055f4:	f7fe fbc6 	bl	8003d84 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e0bd      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005606:	f7ff fa9a 	bl	8004b3e <LL_RCC_HSI48_IsReady>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1f1      	bne.n	80055f4 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 80b3 	beq.w	8005780 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800561a:	f7ff fbf8 	bl	8004e0e <LL_RCC_GetSysClkSource>
 800561e:	4603      	mov	r3, r0
 8005620:	2b0c      	cmp	r3, #12
 8005622:	d076      	beq.n	8005712 <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005628:	2b02      	cmp	r3, #2
 800562a:	d14b      	bne.n	80056c4 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800562c:	f7ff fca5 	bl	8004f7a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005630:	f7fe fba8 	bl	8003d84 <HAL_GetTick>
 8005634:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005638:	f7fe fba4 	bl	8003d84 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e09b      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800564a:	f7ff fca5 	bl	8004f98 <LL_RCC_PLL_IsReady>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1f1      	bne.n	8005638 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	4b4d      	ldr	r3, [pc, #308]	; (8005790 <HAL_RCC_OscConfig+0x6b8>)
 800565c:	4013      	ands	r3, r2
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005666:	4311      	orrs	r1, r2
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800566c:	0212      	lsls	r2, r2, #8
 800566e:	4311      	orrs	r1, r2
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005674:	4311      	orrs	r1, r2
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800567a:	4311      	orrs	r1, r2
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005680:	430a      	orrs	r2, r1
 8005682:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005686:	4313      	orrs	r3, r2
 8005688:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800568a:	f7ff fc67 	bl	8004f5c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800568e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800569c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569e:	f7fe fb71 	bl	8003d84 <HAL_GetTick>
 80056a2:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a6:	f7fe fb6d 	bl	8003d84 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e064      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 80056b8:	f7ff fc6e 	bl	8004f98 <LL_RCC_PLL_IsReady>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f1      	beq.n	80056a6 <HAL_RCC_OscConfig+0x5ce>
 80056c2:	e05d      	b.n	8005780 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c4:	f7ff fc59 	bl	8004f7a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80056c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056d2:	f023 0303 	bic.w	r3, r3, #3
 80056d6:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80056d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056e2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80056e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ea:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ec:	f7fe fb4a 	bl	8003d84 <HAL_GetTick>
 80056f0:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f4:	f7fe fb46 	bl	8003d84 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e03d      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005706:	f7ff fc47 	bl	8004f98 <LL_RCC_PLL_IsReady>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1f1      	bne.n	80056f4 <HAL_RCC_OscConfig+0x61c>
 8005710:	e036      	b.n	8005780 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005716:	2b01      	cmp	r3, #1
 8005718:	d101      	bne.n	800571e <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e031      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800571e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f003 0203 	and.w	r2, r3, #3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	429a      	cmp	r2, r3
 8005732:	d123      	bne.n	800577c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800573e:	429a      	cmp	r2, r3
 8005740:	d11c      	bne.n	800577c <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	0a1b      	lsrs	r3, r3, #8
 8005746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800574e:	429a      	cmp	r2, r3
 8005750:	d114      	bne.n	800577c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800575c:	429a      	cmp	r2, r3
 800575e:	d10d      	bne.n	800577c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800576a:	429a      	cmp	r2, r3
 800576c:	d106      	bne.n	800577c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005778:	429a      	cmp	r2, r3
 800577a:	d001      	beq.n	8005780 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	372c      	adds	r7, #44	; 0x2c
 8005786:	46bd      	mov	sp, r7
 8005788:	bd90      	pop	{r4, r7, pc}
 800578a:	bf00      	nop
 800578c:	58000400 	.word	0x58000400
 8005790:	11c1808c 	.word	0x11c1808c

08005794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e12a      	b.n	80059fe <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057a8:	4b97      	ldr	r3, [pc, #604]	; (8005a08 <HAL_RCC_ClockConfig+0x274>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d91b      	bls.n	80057ee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057b6:	4b94      	ldr	r3, [pc, #592]	; (8005a08 <HAL_RCC_ClockConfig+0x274>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f023 0207 	bic.w	r2, r3, #7
 80057be:	4992      	ldr	r1, [pc, #584]	; (8005a08 <HAL_RCC_ClockConfig+0x274>)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057c6:	f7fe fadd 	bl	8003d84 <HAL_GetTick>
 80057ca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057cc:	e008      	b.n	80057e0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80057ce:	f7fe fad9 	bl	8003d84 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e10e      	b.n	80059fe <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057e0:	4b89      	ldr	r3, [pc, #548]	; (8005a08 <HAL_RCC_ClockConfig+0x274>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d1ef      	bne.n	80057ce <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d016      	beq.n	8005828 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff fb11 	bl	8004e26 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005804:	f7fe fabe 	bl	8003d84 <HAL_GetTick>
 8005808:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800580a:	e008      	b.n	800581e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800580c:	f7fe faba 	bl	8003d84 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d901      	bls.n	800581e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e0ef      	b.n	80059fe <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800581e:	f7ff fbfe 	bl	800501e <LL_RCC_IsActiveFlag_HPRE>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0f1      	beq.n	800580c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0320 	and.w	r3, r3, #32
 8005830:	2b00      	cmp	r3, #0
 8005832:	d016      	beq.n	8005862 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff fb08 	bl	8004e4e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800583e:	f7fe faa1 	bl	8003d84 <HAL_GetTick>
 8005842:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005844:	e008      	b.n	8005858 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005846:	f7fe fa9d 	bl	8003d84 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d901      	bls.n	8005858 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e0d2      	b.n	80059fe <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005858:	f7ff fbf3 	bl	8005042 <LL_RCC_IsActiveFlag_C2HPRE>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0f1      	beq.n	8005846 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d016      	beq.n	800589c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff fb01 	bl	8004e7a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005878:	f7fe fa84 	bl	8003d84 <HAL_GetTick>
 800587c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800587e:	e008      	b.n	8005892 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005880:	f7fe fa80 	bl	8003d84 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e0b5      	b.n	80059fe <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005892:	f7ff fbe9 	bl	8005068 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0f1      	beq.n	8005880 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d016      	beq.n	80058d6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff fafb 	bl	8004ea8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80058b2:	f7fe fa67 	bl	8003d84 <HAL_GetTick>
 80058b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80058b8:	e008      	b.n	80058cc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80058ba:	f7fe fa63 	bl	8003d84 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e098      	b.n	80059fe <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80058cc:	f7ff fbdf 	bl	800508e <LL_RCC_IsActiveFlag_PPRE1>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d0f1      	beq.n	80058ba <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0308 	and.w	r3, r3, #8
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d017      	beq.n	8005912 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff faf1 	bl	8004ed0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80058ee:	f7fe fa49 	bl	8003d84 <HAL_GetTick>
 80058f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80058f6:	f7fe fa45 	bl	8003d84 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e07a      	b.n	80059fe <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005908:	f7ff fbd3 	bl	80050b2 <LL_RCC_IsActiveFlag_PPRE2>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0f1      	beq.n	80058f6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d043      	beq.n	80059a6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d106      	bne.n	8005934 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005926:	f7ff f891 	bl	8004a4c <LL_RCC_HSE_IsReady>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d11e      	bne.n	800596e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e064      	b.n	80059fe <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2b03      	cmp	r3, #3
 800593a:	d106      	bne.n	800594a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800593c:	f7ff fb2c 	bl	8004f98 <LL_RCC_PLL_IsReady>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d113      	bne.n	800596e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e059      	b.n	80059fe <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005952:	f7ff f9f9 	bl	8004d48 <LL_RCC_MSI_IsReady>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d108      	bne.n	800596e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e04e      	b.n	80059fe <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005960:	f7ff f8a4 	bl	8004aac <LL_RCC_HSI_IsReady>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e047      	b.n	80059fe <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff fa37 	bl	8004de6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005978:	f7fe fa04 	bl	8003d84 <HAL_GetTick>
 800597c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800597e:	e00a      	b.n	8005996 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005980:	f7fe fa00 	bl	8003d84 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	f241 3288 	movw	r2, #5000	; 0x1388
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e033      	b.n	80059fe <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005996:	f7ff fa3a 	bl	8004e0e <LL_RCC_GetSysClkSource>
 800599a:	4602      	mov	r2, r0
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d1ec      	bne.n	8005980 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059a6:	4b18      	ldr	r3, [pc, #96]	; (8005a08 <HAL_RCC_ClockConfig+0x274>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d21b      	bcs.n	80059ec <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b4:	4b14      	ldr	r3, [pc, #80]	; (8005a08 <HAL_RCC_ClockConfig+0x274>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f023 0207 	bic.w	r2, r3, #7
 80059bc:	4912      	ldr	r1, [pc, #72]	; (8005a08 <HAL_RCC_ClockConfig+0x274>)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059c4:	f7fe f9de 	bl	8003d84 <HAL_GetTick>
 80059c8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ca:	e008      	b.n	80059de <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80059cc:	f7fe f9da 	bl	8003d84 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e00f      	b.n	80059fe <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059de:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <HAL_RCC_ClockConfig+0x274>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d1ef      	bne.n	80059cc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 80059ec:	f7fe f8e6 	bl	8003bbc <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80059f0:	f7fe f9d4 	bl	8003d9c <HAL_GetTickPrio>
 80059f4:	4603      	mov	r3, r0
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fc f9fd 	bl	8001df6 <HAL_InitTick>
 80059fc:	4603      	mov	r3, r0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	58004000 	.word	0x58004000

08005a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a0c:	b590      	push	{r4, r7, lr}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a12:	f7ff f9fc 	bl	8004e0e <LL_RCC_GetSysClkSource>
 8005a16:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005a1e:	f7ff f9b8 	bl	8004d92 <LL_RCC_MSI_GetRange>
 8005a22:	4603      	mov	r3, r0
 8005a24:	091b      	lsrs	r3, r3, #4
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	4a2a      	ldr	r2, [pc, #168]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	e04a      	b.n	8005aca <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d102      	bne.n	8005a40 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a3a:	4b27      	ldr	r3, [pc, #156]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	e044      	b.n	8005aca <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d10a      	bne.n	8005a5c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005a46:	f7fe ffb3 	bl	80049b0 <LL_RCC_HSE_IsEnabledDiv2>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d102      	bne.n	8005a56 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005a50:	4b21      	ldr	r3, [pc, #132]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	e039      	b.n	8005aca <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005a56:	4b21      	ldr	r3, [pc, #132]	; (8005adc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	e036      	b.n	8005aca <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005a5c:	f7ff fad3 	bl	8005006 <LL_RCC_PLL_GetMainSource>
 8005a60:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d002      	beq.n	8005a6e <HAL_RCC_GetSysClockFreq+0x62>
 8005a68:	2b03      	cmp	r3, #3
 8005a6a:	d003      	beq.n	8005a74 <HAL_RCC_GetSysClockFreq+0x68>
 8005a6c:	e00d      	b.n	8005a8a <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005a6e:	4b1a      	ldr	r3, [pc, #104]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a70:	60bb      	str	r3, [r7, #8]
        break;
 8005a72:	e015      	b.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005a74:	f7fe ff9c 	bl	80049b0 <LL_RCC_HSE_IsEnabledDiv2>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d102      	bne.n	8005a84 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005a7e:	4b16      	ldr	r3, [pc, #88]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a80:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005a82:	e00d      	b.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8005a84:	4b15      	ldr	r3, [pc, #84]	; (8005adc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a86:	60bb      	str	r3, [r7, #8]
        break;
 8005a88:	e00a      	b.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005a8a:	f7ff f982 	bl	8004d92 <LL_RCC_MSI_GetRange>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	091b      	lsrs	r3, r3, #4
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	4a0f      	ldr	r2, [pc, #60]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a9c:	60bb      	str	r3, [r7, #8]
        break;
 8005a9e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005aa0:	f7ff fa8c 	bl	8004fbc <LL_RCC_PLL_GetN>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	fb03 f402 	mul.w	r4, r3, r2
 8005aac:	f7ff fa9f 	bl	8004fee <LL_RCC_PLL_GetDivider>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	091b      	lsrs	r3, r3, #4
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	fbb4 f4f3 	udiv	r4, r4, r3
 8005aba:	f7ff fa8c 	bl	8004fd6 <LL_RCC_PLL_GetR>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	0f5b      	lsrs	r3, r3, #29
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	fbb4 f3f3 	udiv	r3, r4, r3
 8005ac8:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005aca:	68fb      	ldr	r3, [r7, #12]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd90      	pop	{r4, r7, pc}
 8005ad4:	0800c798 	.word	0x0800c798
 8005ad8:	00f42400 	.word	0x00f42400
 8005adc:	01e84800 	.word	0x01e84800

08005ae0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ae0:	b598      	push	{r3, r4, r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005ae4:	f7ff ff92 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 8005ae8:	4604      	mov	r4, r0
 8005aea:	f7ff fa05 	bl	8004ef8 <LL_RCC_GetAHBPrescaler>
 8005aee:	4603      	mov	r3, r0
 8005af0:	091b      	lsrs	r3, r3, #4
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	4a03      	ldr	r2, [pc, #12]	; (8005b04 <HAL_RCC_GetHCLKFreq+0x24>)
 8005af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005afc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	bd98      	pop	{r3, r4, r7, pc}
 8005b04:	0800c738 	.word	0x0800c738

08005b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b08:	b598      	push	{r3, r4, r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005b0c:	f7ff ffe8 	bl	8005ae0 <HAL_RCC_GetHCLKFreq>
 8005b10:	4604      	mov	r4, r0
 8005b12:	f7ff fa0b 	bl	8004f2c <LL_RCC_GetAPB1Prescaler>
 8005b16:	4603      	mov	r3, r0
 8005b18:	0a1b      	lsrs	r3, r3, #8
 8005b1a:	f003 0307 	and.w	r3, r3, #7
 8005b1e:	4a04      	ldr	r2, [pc, #16]	; (8005b30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b24:	f003 031f 	and.w	r3, r3, #31
 8005b28:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	bd98      	pop	{r3, r4, r7, pc}
 8005b30:	0800c778 	.word	0x0800c778

08005b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b34:	b598      	push	{r3, r4, r7, lr}
 8005b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005b38:	f7ff ffd2 	bl	8005ae0 <HAL_RCC_GetHCLKFreq>
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	f7ff fa01 	bl	8004f44 <LL_RCC_GetAPB2Prescaler>
 8005b42:	4603      	mov	r3, r0
 8005b44:	0adb      	lsrs	r3, r3, #11
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	4a04      	ldr	r2, [pc, #16]	; (8005b5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b50:	f003 031f 	and.w	r3, r3, #31
 8005b54:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	bd98      	pop	{r3, r4, r7, pc}
 8005b5c:	0800c778 	.word	0x0800c778

08005b60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005b60:	b590      	push	{r4, r7, lr}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2bb0      	cmp	r3, #176	; 0xb0
 8005b6c:	d903      	bls.n	8005b76 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005b6e:	4b15      	ldr	r3, [pc, #84]	; (8005bc4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	e007      	b.n	8005b86 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	091b      	lsrs	r3, r3, #4
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	4a11      	ldr	r2, [pc, #68]	; (8005bc4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b84:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005b86:	f7ff f9c3 	bl	8004f10 <LL_RCC_GetAHB4Prescaler>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	091b      	lsrs	r3, r3, #4
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	4a0d      	ldr	r2, [pc, #52]	; (8005bc8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba8:	0c9c      	lsrs	r4, r3, #18
 8005baa:	f7fe fef3 	bl	8004994 <HAL_PWREx_GetVoltageRange>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f000 f80c 	bl	8005bd0 <RCC_SetFlashLatency>
 8005bb8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd90      	pop	{r4, r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	0800c798 	.word	0x0800c798
 8005bc8:	0800c738 	.word	0x0800c738
 8005bcc:	431bde83 	.word	0x431bde83

08005bd0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005bd0:	b590      	push	{r4, r7, lr}
 8005bd2:	b093      	sub	sp, #76	; 0x4c
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005bda:	4b39      	ldr	r3, [pc, #228]	; (8005cc0 <RCC_SetFlashLatency+0xf0>)
 8005bdc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005be0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005be2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005be6:	4a37      	ldr	r2, [pc, #220]	; (8005cc4 <RCC_SetFlashLatency+0xf4>)
 8005be8:	f107 031c 	add.w	r3, r7, #28
 8005bec:	ca07      	ldmia	r2, {r0, r1, r2}
 8005bee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005bf2:	4b35      	ldr	r3, [pc, #212]	; (8005cc8 <RCC_SetFlashLatency+0xf8>)
 8005bf4:	f107 040c 	add.w	r4, r7, #12
 8005bf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005bfe:	2300      	movs	r3, #0
 8005c00:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c08:	d11c      	bne.n	8005c44 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c0e:	e015      	b.n	8005c3c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005c18:	4413      	add	r3, r2
 8005c1a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d808      	bhi.n	8005c36 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005c32:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005c34:	e022      	b.n	8005c7c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c38:	3301      	adds	r3, #1
 8005c3a:	643b      	str	r3, [r7, #64]	; 0x40
 8005c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d9e6      	bls.n	8005c10 <RCC_SetFlashLatency+0x40>
 8005c42:	e01b      	b.n	8005c7c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005c44:	2300      	movs	r3, #0
 8005c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c48:	e015      	b.n	8005c76 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005c52:	4413      	add	r3, r2
 8005c54:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d808      	bhi.n	8005c70 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005c66:	4413      	add	r3, r2
 8005c68:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005c6c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005c6e:	e005      	b.n	8005c7c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c72:	3301      	adds	r3, #1
 8005c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d9e6      	bls.n	8005c4a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005c7c:	4b13      	ldr	r3, [pc, #76]	; (8005ccc <RCC_SetFlashLatency+0xfc>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f023 0207 	bic.w	r2, r3, #7
 8005c84:	4911      	ldr	r1, [pc, #68]	; (8005ccc <RCC_SetFlashLatency+0xfc>)
 8005c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c8c:	f7fe f87a 	bl	8003d84 <HAL_GetTick>
 8005c90:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005c92:	e008      	b.n	8005ca6 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005c94:	f7fe f876 	bl	8003d84 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d901      	bls.n	8005ca6 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e007      	b.n	8005cb6 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005ca6:	4b09      	ldr	r3, [pc, #36]	; (8005ccc <RCC_SetFlashLatency+0xfc>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d1ef      	bne.n	8005c94 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	374c      	adds	r7, #76	; 0x4c
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd90      	pop	{r4, r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	0800c838 	.word	0x0800c838
 8005cc4:	0800c848 	.word	0x0800c848
 8005cc8:	0800c854 	.word	0x0800c854
 8005ccc:	58004000 	.word	0x58004000

08005cd0 <LL_RCC_LSE_IsEnabled>:
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <LL_RCC_LSE_IsEnabled+0x18>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e000      	b.n	8005cea <LL_RCC_LSE_IsEnabled+0x1a>
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <LL_RCC_LSE_IsReady>:
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d101      	bne.n	8005d0c <LL_RCC_LSE_IsReady+0x18>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e000      	b.n	8005d0e <LL_RCC_LSE_IsReady+0x1a>
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <LL_RCC_SetRFWKPClockSource>:
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <LL_RCC_SetSMPSClockSource>:
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	f023 0203 	bic.w	r2, r3, #3
 8005d56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <LL_RCC_SetSMPSPrescaler>:
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <LL_RCC_SetUSARTClockSource>:
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da4:	f023 0203 	bic.w	r2, r3, #3
 8005da8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <LL_RCC_SetLPUARTClockSource>:
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005dd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <LL_RCC_SetI2CClockSource>:
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	091b      	lsrs	r3, r3, #4
 8005e00:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005e04:	43db      	mvns	r3, r3
 8005e06:	401a      	ands	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005e10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e14:	4313      	orrs	r3, r2
 8005e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <LL_RCC_SetLPTIMClockSource>:
{
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	0c1b      	lsrs	r3, r3, #16
 8005e3a:	041b      	lsls	r3, r3, #16
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	401a      	ands	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	041b      	lsls	r3, r3, #16
 8005e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e4e:	bf00      	nop
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <LL_RCC_SetSAIClockSource>:
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <LL_RCC_SetRNGClockSource>:
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e96:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005e9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <LL_RCC_SetCLK48ClockSource>:
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ec6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <LL_RCC_SetUSBClockSource>:
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b082      	sub	sp, #8
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff ffe3 	bl	8005eb2 <LL_RCC_SetCLK48ClockSource>
}
 8005eec:	bf00      	nop
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <LL_RCC_SetADCClockSource>:
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <LL_RCC_SetRTCClockSource>:
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <LL_RCC_GetRTCClockSource>:
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <LL_RCC_ForceBackupDomainReset>:
{
 8005f66:	b480      	push	{r7}
 8005f68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f7e:	bf00      	nop
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005fa0:	bf00      	nop
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <LL_RCC_PLLSAI1_Enable>:
{
 8005faa:	b480      	push	{r7}
 8005fac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fbc:	6013      	str	r3, [r2, #0]
}
 8005fbe:	bf00      	nop
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <LL_RCC_PLLSAI1_Disable>:
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fda:	6013      	str	r3, [r2, #0]
}
 8005fdc:	bf00      	nop
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <LL_RCC_PLLSAI1_IsReady>:
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ff8:	d101      	bne.n	8005ffe <LL_RCC_PLLSAI1_IsReady+0x18>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b088      	sub	sp, #32
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006012:	2300      	movs	r3, #0
 8006014:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006016:	2300      	movs	r3, #0
 8006018:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006022:	2b00      	cmp	r3, #0
 8006024:	d033      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800602e:	d00c      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006030:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006034:	d802      	bhi.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006036:	2b00      	cmp	r3, #0
 8006038:	d010      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x52>
 800603a:	e017      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x62>
 800603c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006040:	d017      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8006042:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006046:	d016      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8006048:	e010      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800604a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006058:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800605a:	e00d      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3304      	adds	r3, #4
 8006060:	4618      	mov	r0, r3
 8006062:	f000 f947 	bl	80062f4 <RCCEx_PLLSAI1_ConfigNP>
 8006066:	4603      	mov	r3, r0
 8006068:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800606a:	e005      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	77fb      	strb	r3, [r7, #31]
        break;
 8006070:	e002      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8006072:	bf00      	nop
 8006074:	e000      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8006076:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006078:	7ffb      	ldrb	r3, [r7, #31]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d105      	bne.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff fee9 	bl	8005e5a <LL_RCC_SetSAIClockSource>
 8006088:	e001      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608a:	7ffb      	ldrb	r3, [r7, #31]
 800608c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006096:	2b00      	cmp	r3, #0
 8006098:	d046      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800609a:	f7ff ff57 	bl	8005f4c <LL_RCC_GetRTCClockSource>
 800609e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d03c      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80060aa:	f7fe fc63 	bl	8004974 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d105      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff ff31 	bl	8005f20 <LL_RCC_SetRTCClockSource>
 80060be:	e02e      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80060c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80060ca:	f7ff ff4c 	bl	8005f66 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80060ce:	f7ff ff5b 	bl	8005f88 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060dc:	4313      	orrs	r3, r2
 80060de:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80060e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80060ea:	f7ff fdf1 	bl	8005cd0 <LL_RCC_LSE_IsEnabled>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d114      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060f4:	f7fd fe46 	bl	8003d84 <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80060fa:	e00b      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060fc:	f7fd fe42 	bl	8003d84 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	f241 3288 	movw	r2, #5000	; 0x1388
 800610a:	4293      	cmp	r3, r2
 800610c:	d902      	bls.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	77fb      	strb	r3, [r7, #31]
              break;
 8006112:	e004      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006114:	f7ff fdee 	bl	8005cf4 <LL_RCC_LSE_IsReady>
 8006118:	4603      	mov	r3, r0
 800611a:	2b01      	cmp	r3, #1
 800611c:	d1ee      	bne.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800611e:	7ffb      	ldrb	r3, [r7, #31]
 8006120:	77bb      	strb	r3, [r7, #30]
 8006122:	e001      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006124:	7ffb      	ldrb	r3, [r7, #31]
 8006126:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	d004      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	4618      	mov	r0, r3
 800613a:	f7ff fe2b 	bl	8005d94 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d004      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fe36 	bl	8005dc0 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0310 	and.w	r3, r3, #16
 800615c:	2b00      	cmp	r3, #0
 800615e:	d004      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006164:	4618      	mov	r0, r3
 8006166:	f7ff fe5e 	bl	8005e26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b00      	cmp	r3, #0
 8006174:	d004      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff fe53 	bl	8005e26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b00      	cmp	r3, #0
 800618a:	d004      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff fe2b 	bl	8005dec <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0308 	and.w	r3, r3, #8
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d004      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7ff fe20 	bl	8005dec <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d022      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061bc:	4618      	mov	r0, r3
 80061be:	f7ff fe8e 	bl	8005ede <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061ca:	d107      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80061cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061da:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061e4:	d10b      	bne.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	3304      	adds	r3, #4
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 f8dd 	bl	80063aa <RCCEx_PLLSAI1_ConfigNQ>
 80061f0:	4603      	mov	r3, r0
 80061f2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80061f4:	7ffb      	ldrb	r3, [r7, #31]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 80061fa:	7ffb      	ldrb	r3, [r7, #31]
 80061fc:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006206:	2b00      	cmp	r3, #0
 8006208:	d02b      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006212:	d008      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800621c:	d003      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006222:	2b00      	cmp	r3, #0
 8006224:	d105      	bne.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622a:	4618      	mov	r0, r3
 800622c:	f7ff fe2b 	bl	8005e86 <LL_RCC_SetRNGClockSource>
 8006230:	e00a      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	2000      	movs	r0, #0
 800623e:	f7ff fe22 	bl	8005e86 <LL_RCC_SetRNGClockSource>
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f7ff fe35 	bl	8005eb2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006250:	d107      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800625c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006260:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800626a:	2b00      	cmp	r3, #0
 800626c:	d022      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff fe3e 	bl	8005ef4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006280:	d107      	bne.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800628c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006290:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800629a:	d10b      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3304      	adds	r3, #4
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 f8dd 	bl	8006460 <RCCEx_PLLSAI1_ConfigNR>
 80062a6:	4603      	mov	r3, r0
 80062a8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80062aa:	7ffb      	ldrb	r3, [r7, #31]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 80062b0:	7ffb      	ldrb	r3, [r7, #31]
 80062b2:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d004      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff fd27 	bl	8005d18 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d009      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062da:	4618      	mov	r0, r3
 80062dc:	f7ff fd46 	bl	8005d6c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7ff fd2d 	bl	8005d44 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 80062ea:	7fbb      	ldrb	r3, [r7, #30]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3720      	adds	r7, #32
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006300:	f7ff fe62 	bl	8005fc8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006304:	f7fd fd3e 	bl	8003d84 <HAL_GetTick>
 8006308:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800630a:	e009      	b.n	8006320 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800630c:	f7fd fd3a 	bl	8003d84 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d902      	bls.n	8006320 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	73fb      	strb	r3, [r7, #15]
      break;
 800631e:	e004      	b.n	800632a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006320:	f7ff fe61 	bl	8005fe6 <LL_RCC_PLLSAI1_IsReady>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1f0      	bne.n	800630c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800632a:	7bfb      	ldrb	r3, [r7, #15]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d137      	bne.n	80063a0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	021b      	lsls	r3, r3, #8
 8006340:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006344:	4313      	orrs	r3, r2
 8006346:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800635a:	4313      	orrs	r3, r2
 800635c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800635e:	f7ff fe24 	bl	8005faa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006362:	f7fd fd0f 	bl	8003d84 <HAL_GetTick>
 8006366:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006368:	e009      	b.n	800637e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800636a:	f7fd fd0b 	bl	8003d84 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	2b02      	cmp	r3, #2
 8006376:	d902      	bls.n	800637e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	73fb      	strb	r3, [r7, #15]
        break;
 800637c:	e004      	b.n	8006388 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800637e:	f7ff fe32 	bl	8005fe6 <LL_RCC_PLLSAI1_IsReady>
 8006382:	4603      	mov	r3, r0
 8006384:	2b01      	cmp	r3, #1
 8006386:	d1f0      	bne.n	800636a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d108      	bne.n	80063a0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800638e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800639c:	4313      	orrs	r3, r2
 800639e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b084      	sub	sp, #16
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80063b6:	f7ff fe07 	bl	8005fc8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80063ba:	f7fd fce3 	bl	8003d84 <HAL_GetTick>
 80063be:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80063c0:	e009      	b.n	80063d6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063c2:	f7fd fcdf 	bl	8003d84 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d902      	bls.n	80063d6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	73fb      	strb	r3, [r7, #15]
      break;
 80063d4:	e004      	b.n	80063e0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80063d6:	f7ff fe06 	bl	8005fe6 <LL_RCC_PLLSAI1_IsReady>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1f0      	bne.n	80063c2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d137      	bne.n	8006456 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80063e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063fa:	4313      	orrs	r3, r2
 80063fc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80063fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006410:	4313      	orrs	r3, r2
 8006412:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006414:	f7ff fdc9 	bl	8005faa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006418:	f7fd fcb4 	bl	8003d84 <HAL_GetTick>
 800641c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800641e:	e009      	b.n	8006434 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006420:	f7fd fcb0 	bl	8003d84 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b02      	cmp	r3, #2
 800642c:	d902      	bls.n	8006434 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	73fb      	strb	r3, [r7, #15]
        break;
 8006432:	e004      	b.n	800643e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006434:	f7ff fdd7 	bl	8005fe6 <LL_RCC_PLLSAI1_IsReady>
 8006438:	4603      	mov	r3, r0
 800643a:	2b01      	cmp	r3, #1
 800643c:	d1f0      	bne.n	8006420 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800643e:	7bfb      	ldrb	r3, [r7, #15]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d108      	bne.n	8006456 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006448:	691a      	ldr	r2, [r3, #16]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006452:	4313      	orrs	r3, r2
 8006454:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006456:	7bfb      	ldrb	r3, [r7, #15]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800646c:	f7ff fdac 	bl	8005fc8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006470:	f7fd fc88 	bl	8003d84 <HAL_GetTick>
 8006474:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006476:	e009      	b.n	800648c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006478:	f7fd fc84 	bl	8003d84 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d902      	bls.n	800648c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	73fb      	strb	r3, [r7, #15]
      break;
 800648a:	e004      	b.n	8006496 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800648c:	f7ff fdab 	bl	8005fe6 <LL_RCC_PLLSAI1_IsReady>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f0      	bne.n	8006478 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006496:	7bfb      	ldrb	r3, [r7, #15]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d137      	bne.n	800650c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800649c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	021b      	lsls	r3, r3, #8
 80064ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064b0:	4313      	orrs	r3, r2
 80064b2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80064b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064c6:	4313      	orrs	r3, r2
 80064c8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80064ca:	f7ff fd6e 	bl	8005faa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ce:	f7fd fc59 	bl	8003d84 <HAL_GetTick>
 80064d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80064d4:	e009      	b.n	80064ea <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064d6:	f7fd fc55 	bl	8003d84 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d902      	bls.n	80064ea <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	73fb      	strb	r3, [r7, #15]
        break;
 80064e8:	e004      	b.n	80064f4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80064ea:	f7ff fd7c 	bl	8005fe6 <LL_RCC_PLLSAI1_IsReady>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d1f0      	bne.n	80064d6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d108      	bne.n	800650c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80064fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064fe:	691a      	ldr	r2, [r3, #16]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006508:	4313      	orrs	r3, r2
 800650a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800650c:	7bfb      	ldrb	r3, [r7, #15]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e090      	b.n	800664a <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d106      	bne.n	8006542 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7fb fde9 	bl	8002114 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2202      	movs	r2, #2
 8006546:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	22ca      	movs	r2, #202	; 0xca
 8006550:	625a      	str	r2, [r3, #36]	; 0x24
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2253      	movs	r2, #83	; 0x53
 8006558:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f89f 	bl	800669e <RTC_EnterInitMode>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d009      	beq.n	800657a <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	22ff      	movs	r2, #255	; 0xff
 800656c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2204      	movs	r2, #4
 8006572:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e067      	b.n	800664a <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6812      	ldr	r2, [r2, #0]
 8006584:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800658c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6899      	ldr	r1, [r3, #8]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	431a      	orrs	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	431a      	orrs	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	68d2      	ldr	r2, [r2, #12]
 80065b4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6919      	ldr	r1, [r3, #16]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	041a      	lsls	r2, r3, #16
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065d8:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0203 	bic.w	r2, r2, #3
 80065e8:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	69da      	ldr	r2, [r3, #28]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	431a      	orrs	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d113      	bne.n	8006638 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f81e 	bl	8006652 <HAL_RTC_WaitForSynchro>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00d      	beq.n	8006638 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	22ff      	movs	r2, #255	; 0xff
 8006622:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2204      	movs	r2, #4
 8006628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e008      	b.n	800664a <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	22ff      	movs	r2, #255	; 0xff
 800663e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006648:	2300      	movs	r3, #0
  }
}
 800664a:	4618      	mov	r0, r3
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b084      	sub	sp, #16
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68da      	ldr	r2, [r3, #12]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006668:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800666a:	f7fd fb8b 	bl	8003d84 <HAL_GetTick>
 800666e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006670:	e009      	b.n	8006686 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006672:	f7fd fb87 	bl	8003d84 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006680:	d901      	bls.n	8006686 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e007      	b.n	8006696 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f003 0320 	and.w	r3, r3, #32
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0ee      	beq.n	8006672 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b084      	sub	sp, #16
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d119      	bne.n	80066e8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f04f 32ff 	mov.w	r2, #4294967295
 80066bc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80066be:	f7fd fb61 	bl	8003d84 <HAL_GetTick>
 80066c2:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80066c4:	e009      	b.n	80066da <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80066c6:	f7fd fb5d 	bl	8003d84 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066d4:	d901      	bls.n	80066da <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e007      	b.n	80066ea <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d0ee      	beq.n	80066c6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006704:	2302      	movs	r3, #2
 8006706:	e024      	b.n	8006752 <HAL_RTCEx_EnableBypassShadow+0x60>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	22ca      	movs	r2, #202	; 0xca
 800671e:	625a      	str	r2, [r3, #36]	; 0x24
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2253      	movs	r2, #83	; 0x53
 8006726:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0220 	orr.w	r2, r2, #32
 8006736:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	22ff      	movs	r2, #255	; 0xff
 800673e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <LL_RCC_GetUSARTClockSource>:
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800676a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4013      	ands	r3, r2
}
 8006772:	4618      	mov	r0, r3
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <LL_RCC_GetLPUARTClockSource>:
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800678a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4013      	ands	r3, r2
}
 8006792:	4618      	mov	r0, r3
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b082      	sub	sp, #8
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e042      	b.n	8006836 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d106      	bne.n	80067c8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7fb fbc6 	bl	8001f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2224      	movs	r2, #36	; 0x24
 80067cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0201 	bic.w	r2, r2, #1
 80067de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fa41 	bl	8006c68 <UART_SetConfig>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d101      	bne.n	80067f0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e022      	b.n	8006836 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 fa99 	bl	8007d30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800680c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800681c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f042 0201 	orr.w	r2, r2, #1
 800682c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f001 fb20 	bl	8007e74 <UART_CheckIdleState>
 8006834:	4603      	mov	r3, r0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	4613      	mov	r3, r2
 800684c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006854:	2b20      	cmp	r3, #32
 8006856:	d168      	bne.n	800692a <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <HAL_UART_Transmit_DMA+0x24>
 800685e:	88fb      	ldrh	r3, [r7, #6]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e061      	b.n	800692c <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_UART_Transmit_DMA+0x36>
 8006872:	2302      	movs	r3, #2
 8006874:	e05a      	b.n	800692c <HAL_UART_Transmit_DMA+0xec>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	88fa      	ldrh	r2, [r7, #6]
 8006888:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	88fa      	ldrh	r2, [r7, #6]
 8006890:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2221      	movs	r2, #33	; 0x21
 80068a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d02c      	beq.n	8006906 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b0:	4a20      	ldr	r2, [pc, #128]	; (8006934 <HAL_UART_Transmit_DMA+0xf4>)
 80068b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b8:	4a1f      	ldr	r2, [pc, #124]	; (8006938 <HAL_UART_Transmit_DMA+0xf8>)
 80068ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c0:	4a1e      	ldr	r2, [pc, #120]	; (800693c <HAL_UART_Transmit_DMA+0xfc>)
 80068c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c8:	2200      	movs	r2, #0
 80068ca:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068d4:	4619      	mov	r1, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3328      	adds	r3, #40	; 0x28
 80068dc:	461a      	mov	r2, r3
 80068de:	88fb      	ldrh	r3, [r7, #6]
 80068e0:	f7fd fc7e 	bl	80041e0 <HAL_DMA_Start_IT>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00d      	beq.n	8006906 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2210      	movs	r2, #16
 80068ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2220      	movs	r2, #32
 80068fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e012      	b.n	800692c <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2240      	movs	r2, #64	; 0x40
 800690c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006924:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	e000      	b.n	800692c <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800692a:	2302      	movs	r3, #2
  }
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	08008087 	.word	0x08008087
 8006938:	080080db 	.word	0x080080db
 800693c:	080080f7 	.word	0x080080f7

08006940 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b088      	sub	sp, #32
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006960:	69fa      	ldr	r2, [r7, #28]
 8006962:	f640 030f 	movw	r3, #2063	; 0x80f
 8006966:	4013      	ands	r3, r2
 8006968:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d118      	bne.n	80069a2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	f003 0320 	and.w	r3, r3, #32
 8006976:	2b00      	cmp	r3, #0
 8006978:	d013      	beq.n	80069a2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	f003 0320 	and.w	r3, r3, #32
 8006980:	2b00      	cmp	r3, #0
 8006982:	d104      	bne.n	800698e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d009      	beq.n	80069a2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 8145 	beq.w	8006c22 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	4798      	blx	r3
      }
      return;
 80069a0:	e13f      	b.n	8006c22 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 80e8 	beq.w	8006b7a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	4ba1      	ldr	r3, [pc, #644]	; (8006c34 <HAL_UART_IRQHandler+0x2f4>)
 80069ae:	4013      	ands	r3, r2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d105      	bne.n	80069c0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	4ba0      	ldr	r3, [pc, #640]	; (8006c38 <HAL_UART_IRQHandler+0x2f8>)
 80069b8:	4013      	ands	r3, r2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 80dd 	beq.w	8006b7a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d010      	beq.n	80069ec <HAL_UART_IRQHandler+0xac>
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00b      	beq.n	80069ec <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2201      	movs	r2, #1
 80069da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e2:	f043 0201 	orr.w	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d010      	beq.n	8006a18 <HAL_UART_IRQHandler+0xd8>
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2202      	movs	r2, #2
 8006a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a0e:	f043 0204 	orr.w	r2, r3, #4
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	f003 0304 	and.w	r3, r3, #4
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d010      	beq.n	8006a44 <HAL_UART_IRQHandler+0x104>
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00b      	beq.n	8006a44 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2204      	movs	r2, #4
 8006a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a3a:	f043 0202 	orr.w	r2, r3, #2
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	f003 0308 	and.w	r3, r3, #8
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d015      	beq.n	8006a7a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	f003 0320 	and.w	r3, r3, #32
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d104      	bne.n	8006a62 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	4b76      	ldr	r3, [pc, #472]	; (8006c34 <HAL_UART_IRQHandler+0x2f4>)
 8006a5c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00b      	beq.n	8006a7a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2208      	movs	r2, #8
 8006a68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a70:	f043 0208 	orr.w	r2, r3, #8
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d011      	beq.n	8006aa8 <HAL_UART_IRQHandler+0x168>
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00c      	beq.n	8006aa8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a9e:	f043 0220 	orr.w	r2, r3, #32
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 80b9 	beq.w	8006c26 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	f003 0320 	and.w	r3, r3, #32
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d011      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	f003 0320 	and.w	r3, r3, #32
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d104      	bne.n	8006ad2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d007      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af4:	2b40      	cmp	r3, #64	; 0x40
 8006af6:	d004      	beq.n	8006b02 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d031      	beq.n	8006b66 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f001 fa9c 	bl	8008040 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b12:	2b40      	cmp	r3, #64	; 0x40
 8006b14:	d123      	bne.n	8006b5e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b24:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d013      	beq.n	8006b56 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b32:	4a42      	ldr	r2, [pc, #264]	; (8006c3c <HAL_UART_IRQHandler+0x2fc>)
 8006b34:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fd fbcb 	bl	80042d6 <HAL_DMA_Abort_IT>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d017      	beq.n	8006b76 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8006b50:	4610      	mov	r0, r2
 8006b52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b54:	e00f      	b.n	8006b76 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f87c 	bl	8006c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b5c:	e00b      	b.n	8006b76 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f878 	bl	8006c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b64:	e007      	b.n	8006b76 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f874 	bl	8006c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8006b74:	e057      	b.n	8006c26 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b76:	bf00      	nop
    return;
 8006b78:	e055      	b.n	8006c26 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00d      	beq.n	8006ba0 <HAL_UART_IRQHandler+0x260>
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d008      	beq.n	8006ba0 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f001 fb1c 	bl	80081d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b9e:	e045      	b.n	8006c2c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d012      	beq.n	8006bd0 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d104      	bne.n	8006bbe <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d008      	beq.n	8006bd0 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d031      	beq.n	8006c2a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	4798      	blx	r3
    }
    return;
 8006bce:	e02c      	b.n	8006c2a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d008      	beq.n	8006bec <HAL_UART_IRQHandler+0x2ac>
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 fadc 	bl	80081a2 <UART_EndTransmit_IT>
    return;
 8006bea:	e01f      	b.n	8006c2c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d008      	beq.n	8006c08 <HAL_UART_IRQHandler+0x2c8>
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d003      	beq.n	8006c08 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f001 fafc 	bl	80081fe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c06:	e011      	b.n	8006c2c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00c      	beq.n	8006c2c <HAL_UART_IRQHandler+0x2ec>
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	da09      	bge.n	8006c2c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f001 fae6 	bl	80081ea <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c1e:	bf00      	nop
 8006c20:	e004      	b.n	8006c2c <HAL_UART_IRQHandler+0x2ec>
      return;
 8006c22:	bf00      	nop
 8006c24:	e002      	b.n	8006c2c <HAL_UART_IRQHandler+0x2ec>
    return;
 8006c26:	bf00      	nop
 8006c28:	e000      	b.n	8006c2c <HAL_UART_IRQHandler+0x2ec>
    return;
 8006c2a:	bf00      	nop
  }
}
 8006c2c:	3720      	adds	r7, #32
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	10000001 	.word	0x10000001
 8006c38:	04000120 	.word	0x04000120
 8006c3c:	08008177 	.word	0x08008177

08006c40 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c68:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006c6c:	b08a      	sub	sp, #40	; 0x28
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	431a      	orrs	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	4ba4      	ldr	r3, [pc, #656]	; (8006f38 <UART_SetConfig+0x2d0>)
 8006ca8:	4013      	ands	r3, r2
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	6812      	ldr	r2, [r2, #0]
 8006cae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cb0:	430b      	orrs	r3, r1
 8006cb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68da      	ldr	r2, [r3, #12]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a99      	ldr	r2, [pc, #612]	; (8006f3c <UART_SetConfig+0x2d4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d004      	beq.n	8006ce4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006cee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	6812      	ldr	r2, [r2, #0]
 8006cf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cf8:	430b      	orrs	r3, r1
 8006cfa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d02:	f023 010f 	bic.w	r1, r3, #15
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a8a      	ldr	r2, [pc, #552]	; (8006f40 <UART_SetConfig+0x2d8>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d126      	bne.n	8006d6a <UART_SetConfig+0x102>
 8006d1c:	2003      	movs	r0, #3
 8006d1e:	f7ff fd1e 	bl	800675e <LL_RCC_GetUSARTClockSource>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	d81b      	bhi.n	8006d60 <UART_SetConfig+0xf8>
 8006d28:	a201      	add	r2, pc, #4	; (adr r2, 8006d30 <UART_SetConfig+0xc8>)
 8006d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2e:	bf00      	nop
 8006d30:	08006d41 	.word	0x08006d41
 8006d34:	08006d51 	.word	0x08006d51
 8006d38:	08006d49 	.word	0x08006d49
 8006d3c:	08006d59 	.word	0x08006d59
 8006d40:	2301      	movs	r3, #1
 8006d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d46:	e042      	b.n	8006dce <UART_SetConfig+0x166>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d4e:	e03e      	b.n	8006dce <UART_SetConfig+0x166>
 8006d50:	2304      	movs	r3, #4
 8006d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d56:	e03a      	b.n	8006dce <UART_SetConfig+0x166>
 8006d58:	2308      	movs	r3, #8
 8006d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d5e:	e036      	b.n	8006dce <UART_SetConfig+0x166>
 8006d60:	2310      	movs	r3, #16
 8006d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d66:	bf00      	nop
 8006d68:	e031      	b.n	8006dce <UART_SetConfig+0x166>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a73      	ldr	r2, [pc, #460]	; (8006f3c <UART_SetConfig+0x2d4>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d129      	bne.n	8006dc8 <UART_SetConfig+0x160>
 8006d74:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006d78:	f7ff fd01 	bl	800677e <LL_RCC_GetLPUARTClockSource>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d82:	d014      	beq.n	8006dae <UART_SetConfig+0x146>
 8006d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d88:	d802      	bhi.n	8006d90 <UART_SetConfig+0x128>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d007      	beq.n	8006d9e <UART_SetConfig+0x136>
 8006d8e:	e016      	b.n	8006dbe <UART_SetConfig+0x156>
 8006d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d94:	d007      	beq.n	8006da6 <UART_SetConfig+0x13e>
 8006d96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d9a:	d00c      	beq.n	8006db6 <UART_SetConfig+0x14e>
 8006d9c:	e00f      	b.n	8006dbe <UART_SetConfig+0x156>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006da4:	e013      	b.n	8006dce <UART_SetConfig+0x166>
 8006da6:	2302      	movs	r3, #2
 8006da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dac:	e00f      	b.n	8006dce <UART_SetConfig+0x166>
 8006dae:	2304      	movs	r3, #4
 8006db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006db4:	e00b      	b.n	8006dce <UART_SetConfig+0x166>
 8006db6:	2308      	movs	r3, #8
 8006db8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dbc:	e007      	b.n	8006dce <UART_SetConfig+0x166>
 8006dbe:	2310      	movs	r3, #16
 8006dc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dc4:	bf00      	nop
 8006dc6:	e002      	b.n	8006dce <UART_SetConfig+0x166>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a5a      	ldr	r2, [pc, #360]	; (8006f3c <UART_SetConfig+0x2d4>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	f040 8428 	bne.w	800762a <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006dda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dde:	2b08      	cmp	r3, #8
 8006de0:	f200 8171 	bhi.w	80070c6 <UART_SetConfig+0x45e>
 8006de4:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <UART_SetConfig+0x184>)
 8006de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dea:	bf00      	nop
 8006dec:	08006e11 	.word	0x08006e11
 8006df0:	080070c7 	.word	0x080070c7
 8006df4:	08006eb3 	.word	0x08006eb3
 8006df8:	080070c7 	.word	0x080070c7
 8006dfc:	08006f77 	.word	0x08006f77
 8006e00:	080070c7 	.word	0x080070c7
 8006e04:	080070c7 	.word	0x080070c7
 8006e08:	080070c7 	.word	0x080070c7
 8006e0c:	08007019 	.word	0x08007019
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006e10:	f7fe fe7a 	bl	8005b08 <HAL_RCC_GetPCLK1Freq>
 8006e14:	4602      	mov	r2, r0
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d044      	beq.n	8006ea8 <UART_SetConfig+0x240>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d03e      	beq.n	8006ea4 <UART_SetConfig+0x23c>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d038      	beq.n	8006ea0 <UART_SetConfig+0x238>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d032      	beq.n	8006e9c <UART_SetConfig+0x234>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d02c      	beq.n	8006e98 <UART_SetConfig+0x230>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e42:	2b05      	cmp	r3, #5
 8006e44:	d026      	beq.n	8006e94 <UART_SetConfig+0x22c>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	2b06      	cmp	r3, #6
 8006e4c:	d020      	beq.n	8006e90 <UART_SetConfig+0x228>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	2b07      	cmp	r3, #7
 8006e54:	d01a      	beq.n	8006e8c <UART_SetConfig+0x224>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	2b08      	cmp	r3, #8
 8006e5c:	d014      	beq.n	8006e88 <UART_SetConfig+0x220>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	2b09      	cmp	r3, #9
 8006e64:	d00e      	beq.n	8006e84 <UART_SetConfig+0x21c>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6a:	2b0a      	cmp	r3, #10
 8006e6c:	d008      	beq.n	8006e80 <UART_SetConfig+0x218>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	2b0b      	cmp	r3, #11
 8006e74:	d102      	bne.n	8006e7c <UART_SetConfig+0x214>
 8006e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e7a:	e016      	b.n	8006eaa <UART_SetConfig+0x242>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e014      	b.n	8006eaa <UART_SetConfig+0x242>
 8006e80:	2380      	movs	r3, #128	; 0x80
 8006e82:	e012      	b.n	8006eaa <UART_SetConfig+0x242>
 8006e84:	2340      	movs	r3, #64	; 0x40
 8006e86:	e010      	b.n	8006eaa <UART_SetConfig+0x242>
 8006e88:	2320      	movs	r3, #32
 8006e8a:	e00e      	b.n	8006eaa <UART_SetConfig+0x242>
 8006e8c:	2310      	movs	r3, #16
 8006e8e:	e00c      	b.n	8006eaa <UART_SetConfig+0x242>
 8006e90:	230c      	movs	r3, #12
 8006e92:	e00a      	b.n	8006eaa <UART_SetConfig+0x242>
 8006e94:	230a      	movs	r3, #10
 8006e96:	e008      	b.n	8006eaa <UART_SetConfig+0x242>
 8006e98:	2308      	movs	r3, #8
 8006e9a:	e006      	b.n	8006eaa <UART_SetConfig+0x242>
 8006e9c:	2306      	movs	r3, #6
 8006e9e:	e004      	b.n	8006eaa <UART_SetConfig+0x242>
 8006ea0:	2304      	movs	r3, #4
 8006ea2:	e002      	b.n	8006eaa <UART_SetConfig+0x242>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e000      	b.n	8006eaa <UART_SetConfig+0x242>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eae:	617b      	str	r3, [r7, #20]
        break;
 8006eb0:	e10c      	b.n	80070cc <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d05a      	beq.n	8006f70 <UART_SetConfig+0x308>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d054      	beq.n	8006f6c <UART_SetConfig+0x304>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d04e      	beq.n	8006f68 <UART_SetConfig+0x300>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d048      	beq.n	8006f64 <UART_SetConfig+0x2fc>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d02c      	beq.n	8006f34 <UART_SetConfig+0x2cc>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	2b05      	cmp	r3, #5
 8006ee0:	d026      	beq.n	8006f30 <UART_SetConfig+0x2c8>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee6:	2b06      	cmp	r3, #6
 8006ee8:	d020      	beq.n	8006f2c <UART_SetConfig+0x2c4>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	2b07      	cmp	r3, #7
 8006ef0:	d01a      	beq.n	8006f28 <UART_SetConfig+0x2c0>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	2b08      	cmp	r3, #8
 8006ef8:	d014      	beq.n	8006f24 <UART_SetConfig+0x2bc>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	2b09      	cmp	r3, #9
 8006f00:	d00e      	beq.n	8006f20 <UART_SetConfig+0x2b8>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	2b0a      	cmp	r3, #10
 8006f08:	d008      	beq.n	8006f1c <UART_SetConfig+0x2b4>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	2b0b      	cmp	r3, #11
 8006f10:	d102      	bne.n	8006f18 <UART_SetConfig+0x2b0>
 8006f12:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006f16:	e02c      	b.n	8006f72 <UART_SetConfig+0x30a>
 8006f18:	4b0a      	ldr	r3, [pc, #40]	; (8006f44 <UART_SetConfig+0x2dc>)
 8006f1a:	e02a      	b.n	8006f72 <UART_SetConfig+0x30a>
 8006f1c:	4b0a      	ldr	r3, [pc, #40]	; (8006f48 <UART_SetConfig+0x2e0>)
 8006f1e:	e028      	b.n	8006f72 <UART_SetConfig+0x30a>
 8006f20:	4b0a      	ldr	r3, [pc, #40]	; (8006f4c <UART_SetConfig+0x2e4>)
 8006f22:	e026      	b.n	8006f72 <UART_SetConfig+0x30a>
 8006f24:	4b0a      	ldr	r3, [pc, #40]	; (8006f50 <UART_SetConfig+0x2e8>)
 8006f26:	e024      	b.n	8006f72 <UART_SetConfig+0x30a>
 8006f28:	4b0a      	ldr	r3, [pc, #40]	; (8006f54 <UART_SetConfig+0x2ec>)
 8006f2a:	e022      	b.n	8006f72 <UART_SetConfig+0x30a>
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <UART_SetConfig+0x2f0>)
 8006f2e:	e020      	b.n	8006f72 <UART_SetConfig+0x30a>
 8006f30:	4b0a      	ldr	r3, [pc, #40]	; (8006f5c <UART_SetConfig+0x2f4>)
 8006f32:	e01e      	b.n	8006f72 <UART_SetConfig+0x30a>
 8006f34:	4b0a      	ldr	r3, [pc, #40]	; (8006f60 <UART_SetConfig+0x2f8>)
 8006f36:	e01c      	b.n	8006f72 <UART_SetConfig+0x30a>
 8006f38:	cfff69f3 	.word	0xcfff69f3
 8006f3c:	40008000 	.word	0x40008000
 8006f40:	40013800 	.word	0x40013800
 8006f44:	00f42400 	.word	0x00f42400
 8006f48:	0001e848 	.word	0x0001e848
 8006f4c:	0003d090 	.word	0x0003d090
 8006f50:	0007a120 	.word	0x0007a120
 8006f54:	000f4240 	.word	0x000f4240
 8006f58:	00145855 	.word	0x00145855
 8006f5c:	00186a00 	.word	0x00186a00
 8006f60:	001e8480 	.word	0x001e8480
 8006f64:	4ba6      	ldr	r3, [pc, #664]	; (8007200 <UART_SetConfig+0x598>)
 8006f66:	e004      	b.n	8006f72 <UART_SetConfig+0x30a>
 8006f68:	4ba6      	ldr	r3, [pc, #664]	; (8007204 <UART_SetConfig+0x59c>)
 8006f6a:	e002      	b.n	8006f72 <UART_SetConfig+0x30a>
 8006f6c:	4ba6      	ldr	r3, [pc, #664]	; (8007208 <UART_SetConfig+0x5a0>)
 8006f6e:	e000      	b.n	8006f72 <UART_SetConfig+0x30a>
 8006f70:	4ba6      	ldr	r3, [pc, #664]	; (800720c <UART_SetConfig+0x5a4>)
 8006f72:	617b      	str	r3, [r7, #20]
        break;
 8006f74:	e0aa      	b.n	80070cc <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006f76:	f7fe fd49 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d044      	beq.n	800700e <UART_SetConfig+0x3a6>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d03e      	beq.n	800700a <UART_SetConfig+0x3a2>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d038      	beq.n	8007006 <UART_SetConfig+0x39e>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f98:	2b03      	cmp	r3, #3
 8006f9a:	d032      	beq.n	8007002 <UART_SetConfig+0x39a>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d02c      	beq.n	8006ffe <UART_SetConfig+0x396>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa8:	2b05      	cmp	r3, #5
 8006faa:	d026      	beq.n	8006ffa <UART_SetConfig+0x392>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	2b06      	cmp	r3, #6
 8006fb2:	d020      	beq.n	8006ff6 <UART_SetConfig+0x38e>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	2b07      	cmp	r3, #7
 8006fba:	d01a      	beq.n	8006ff2 <UART_SetConfig+0x38a>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	d014      	beq.n	8006fee <UART_SetConfig+0x386>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	2b09      	cmp	r3, #9
 8006fca:	d00e      	beq.n	8006fea <UART_SetConfig+0x382>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	2b0a      	cmp	r3, #10
 8006fd2:	d008      	beq.n	8006fe6 <UART_SetConfig+0x37e>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	2b0b      	cmp	r3, #11
 8006fda:	d102      	bne.n	8006fe2 <UART_SetConfig+0x37a>
 8006fdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fe0:	e016      	b.n	8007010 <UART_SetConfig+0x3a8>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e014      	b.n	8007010 <UART_SetConfig+0x3a8>
 8006fe6:	2380      	movs	r3, #128	; 0x80
 8006fe8:	e012      	b.n	8007010 <UART_SetConfig+0x3a8>
 8006fea:	2340      	movs	r3, #64	; 0x40
 8006fec:	e010      	b.n	8007010 <UART_SetConfig+0x3a8>
 8006fee:	2320      	movs	r3, #32
 8006ff0:	e00e      	b.n	8007010 <UART_SetConfig+0x3a8>
 8006ff2:	2310      	movs	r3, #16
 8006ff4:	e00c      	b.n	8007010 <UART_SetConfig+0x3a8>
 8006ff6:	230c      	movs	r3, #12
 8006ff8:	e00a      	b.n	8007010 <UART_SetConfig+0x3a8>
 8006ffa:	230a      	movs	r3, #10
 8006ffc:	e008      	b.n	8007010 <UART_SetConfig+0x3a8>
 8006ffe:	2308      	movs	r3, #8
 8007000:	e006      	b.n	8007010 <UART_SetConfig+0x3a8>
 8007002:	2306      	movs	r3, #6
 8007004:	e004      	b.n	8007010 <UART_SetConfig+0x3a8>
 8007006:	2304      	movs	r3, #4
 8007008:	e002      	b.n	8007010 <UART_SetConfig+0x3a8>
 800700a:	2302      	movs	r3, #2
 800700c:	e000      	b.n	8007010 <UART_SetConfig+0x3a8>
 800700e:	2301      	movs	r3, #1
 8007010:	fbb2 f3f3 	udiv	r3, r2, r3
 8007014:	617b      	str	r3, [r7, #20]
        break;
 8007016:	e059      	b.n	80070cc <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	2b00      	cmp	r3, #0
 800701e:	d04e      	beq.n	80070be <UART_SetConfig+0x456>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	2b01      	cmp	r3, #1
 8007026:	d047      	beq.n	80070b8 <UART_SetConfig+0x450>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702c:	2b02      	cmp	r3, #2
 800702e:	d040      	beq.n	80070b2 <UART_SetConfig+0x44a>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	2b03      	cmp	r3, #3
 8007036:	d039      	beq.n	80070ac <UART_SetConfig+0x444>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703c:	2b04      	cmp	r3, #4
 800703e:	d032      	beq.n	80070a6 <UART_SetConfig+0x43e>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007044:	2b05      	cmp	r3, #5
 8007046:	d02b      	beq.n	80070a0 <UART_SetConfig+0x438>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	2b06      	cmp	r3, #6
 800704e:	d024      	beq.n	800709a <UART_SetConfig+0x432>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	2b07      	cmp	r3, #7
 8007056:	d01d      	beq.n	8007094 <UART_SetConfig+0x42c>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	2b08      	cmp	r3, #8
 800705e:	d016      	beq.n	800708e <UART_SetConfig+0x426>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	2b09      	cmp	r3, #9
 8007066:	d00f      	beq.n	8007088 <UART_SetConfig+0x420>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	2b0a      	cmp	r3, #10
 800706e:	d008      	beq.n	8007082 <UART_SetConfig+0x41a>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	2b0b      	cmp	r3, #11
 8007076:	d101      	bne.n	800707c <UART_SetConfig+0x414>
 8007078:	2380      	movs	r3, #128	; 0x80
 800707a:	e022      	b.n	80070c2 <UART_SetConfig+0x45a>
 800707c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007080:	e01f      	b.n	80070c2 <UART_SetConfig+0x45a>
 8007082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007086:	e01c      	b.n	80070c2 <UART_SetConfig+0x45a>
 8007088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800708c:	e019      	b.n	80070c2 <UART_SetConfig+0x45a>
 800708e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007092:	e016      	b.n	80070c2 <UART_SetConfig+0x45a>
 8007094:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007098:	e013      	b.n	80070c2 <UART_SetConfig+0x45a>
 800709a:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800709e:	e010      	b.n	80070c2 <UART_SetConfig+0x45a>
 80070a0:	f640 43cc 	movw	r3, #3276	; 0xccc
 80070a4:	e00d      	b.n	80070c2 <UART_SetConfig+0x45a>
 80070a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070aa:	e00a      	b.n	80070c2 <UART_SetConfig+0x45a>
 80070ac:	f241 5355 	movw	r3, #5461	; 0x1555
 80070b0:	e007      	b.n	80070c2 <UART_SetConfig+0x45a>
 80070b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070b6:	e004      	b.n	80070c2 <UART_SetConfig+0x45a>
 80070b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80070bc:	e001      	b.n	80070c2 <UART_SetConfig+0x45a>
 80070be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070c2:	617b      	str	r3, [r7, #20]
        break;
 80070c4:	e002      	b.n	80070cc <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	76fb      	strb	r3, [r7, #27]
        break;
 80070ca:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f000 8604 	beq.w	8007cdc <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	4613      	mov	r3, r2
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	4413      	add	r3, r2
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d305      	bcc.n	80070f0 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d903      	bls.n	80070f8 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	76fb      	strb	r3, [r7, #27]
 80070f4:	f000 bdf2 	b.w	8007cdc <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 80070f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	f200 8281 	bhi.w	8007604 <UART_SetConfig+0x99c>
 8007102:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <UART_SetConfig+0x4a0>)
 8007104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007108:	0800712d 	.word	0x0800712d
 800710c:	08007605 	.word	0x08007605
 8007110:	0800727d 	.word	0x0800727d
 8007114:	08007605 	.word	0x08007605
 8007118:	08007373 	.word	0x08007373
 800711c:	08007605 	.word	0x08007605
 8007120:	08007605 	.word	0x08007605
 8007124:	08007605 	.word	0x08007605
 8007128:	080074b1 	.word	0x080074b1
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800712c:	f7fe fcec 	bl	8005b08 <HAL_RCC_GetPCLK1Freq>
 8007130:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	4618      	mov	r0, r3
 8007136:	f04f 0100 	mov.w	r1, #0
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713e:	2b00      	cmp	r3, #0
 8007140:	d070      	beq.n	8007224 <UART_SetConfig+0x5bc>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	2b01      	cmp	r3, #1
 8007148:	d067      	beq.n	800721a <UART_SetConfig+0x5b2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714e:	2b02      	cmp	r3, #2
 8007150:	d05e      	beq.n	8007210 <UART_SetConfig+0x5a8>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	2b03      	cmp	r3, #3
 8007158:	d04c      	beq.n	80071f4 <UART_SetConfig+0x58c>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715e:	2b04      	cmp	r3, #4
 8007160:	d043      	beq.n	80071ea <UART_SetConfig+0x582>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007166:	2b05      	cmp	r3, #5
 8007168:	d03a      	beq.n	80071e0 <UART_SetConfig+0x578>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	2b06      	cmp	r3, #6
 8007170:	d031      	beq.n	80071d6 <UART_SetConfig+0x56e>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007176:	2b07      	cmp	r3, #7
 8007178:	d028      	beq.n	80071cc <UART_SetConfig+0x564>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717e:	2b08      	cmp	r3, #8
 8007180:	d01f      	beq.n	80071c2 <UART_SetConfig+0x55a>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007186:	2b09      	cmp	r3, #9
 8007188:	d016      	beq.n	80071b8 <UART_SetConfig+0x550>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718e:	2b0a      	cmp	r3, #10
 8007190:	d00d      	beq.n	80071ae <UART_SetConfig+0x546>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	2b0b      	cmp	r3, #11
 8007198:	d104      	bne.n	80071a4 <UART_SetConfig+0x53c>
 800719a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800719e:	f04f 0400 	mov.w	r4, #0
 80071a2:	e043      	b.n	800722c <UART_SetConfig+0x5c4>
 80071a4:	f04f 0301 	mov.w	r3, #1
 80071a8:	f04f 0400 	mov.w	r4, #0
 80071ac:	e03e      	b.n	800722c <UART_SetConfig+0x5c4>
 80071ae:	f04f 0380 	mov.w	r3, #128	; 0x80
 80071b2:	f04f 0400 	mov.w	r4, #0
 80071b6:	e039      	b.n	800722c <UART_SetConfig+0x5c4>
 80071b8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80071bc:	f04f 0400 	mov.w	r4, #0
 80071c0:	e034      	b.n	800722c <UART_SetConfig+0x5c4>
 80071c2:	f04f 0320 	mov.w	r3, #32
 80071c6:	f04f 0400 	mov.w	r4, #0
 80071ca:	e02f      	b.n	800722c <UART_SetConfig+0x5c4>
 80071cc:	f04f 0310 	mov.w	r3, #16
 80071d0:	f04f 0400 	mov.w	r4, #0
 80071d4:	e02a      	b.n	800722c <UART_SetConfig+0x5c4>
 80071d6:	f04f 030c 	mov.w	r3, #12
 80071da:	f04f 0400 	mov.w	r4, #0
 80071de:	e025      	b.n	800722c <UART_SetConfig+0x5c4>
 80071e0:	f04f 030a 	mov.w	r3, #10
 80071e4:	f04f 0400 	mov.w	r4, #0
 80071e8:	e020      	b.n	800722c <UART_SetConfig+0x5c4>
 80071ea:	f04f 0308 	mov.w	r3, #8
 80071ee:	f04f 0400 	mov.w	r4, #0
 80071f2:	e01b      	b.n	800722c <UART_SetConfig+0x5c4>
 80071f4:	f04f 0306 	mov.w	r3, #6
 80071f8:	f04f 0400 	mov.w	r4, #0
 80071fc:	e016      	b.n	800722c <UART_SetConfig+0x5c4>
 80071fe:	bf00      	nop
 8007200:	0028b0aa 	.word	0x0028b0aa
 8007204:	003d0900 	.word	0x003d0900
 8007208:	007a1200 	.word	0x007a1200
 800720c:	00f42400 	.word	0x00f42400
 8007210:	f04f 0304 	mov.w	r3, #4
 8007214:	f04f 0400 	mov.w	r4, #0
 8007218:	e008      	b.n	800722c <UART_SetConfig+0x5c4>
 800721a:	f04f 0302 	mov.w	r3, #2
 800721e:	f04f 0400 	mov.w	r4, #0
 8007222:	e003      	b.n	800722c <UART_SetConfig+0x5c4>
 8007224:	f04f 0301 	mov.w	r3, #1
 8007228:	f04f 0400 	mov.w	r4, #0
 800722c:	461a      	mov	r2, r3
 800722e:	4623      	mov	r3, r4
 8007230:	f7f8 fffe 	bl	8000230 <__aeabi_uldivmod>
 8007234:	4603      	mov	r3, r0
 8007236:	460c      	mov	r4, r1
 8007238:	4619      	mov	r1, r3
 800723a:	4622      	mov	r2, r4
 800723c:	f04f 0300 	mov.w	r3, #0
 8007240:	f04f 0400 	mov.w	r4, #0
 8007244:	0214      	lsls	r4, r2, #8
 8007246:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800724a:	020b      	lsls	r3, r1, #8
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	6852      	ldr	r2, [r2, #4]
 8007250:	0852      	lsrs	r2, r2, #1
 8007252:	4611      	mov	r1, r2
 8007254:	f04f 0200 	mov.w	r2, #0
 8007258:	eb13 0b01 	adds.w	fp, r3, r1
 800725c:	eb44 0c02 	adc.w	ip, r4, r2
 8007260:	4658      	mov	r0, fp
 8007262:	4661      	mov	r1, ip
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f04f 0400 	mov.w	r4, #0
 800726c:	461a      	mov	r2, r3
 800726e:	4623      	mov	r3, r4
 8007270:	f7f8 ffde 	bl	8000230 <__aeabi_uldivmod>
 8007274:	4603      	mov	r3, r0
 8007276:	460c      	mov	r4, r1
 8007278:	61fb      	str	r3, [r7, #28]
            break;
 800727a:	e1c6      	b.n	800760a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	2b00      	cmp	r3, #0
 8007282:	d05b      	beq.n	800733c <UART_SetConfig+0x6d4>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	2b01      	cmp	r3, #1
 800728a:	d053      	beq.n	8007334 <UART_SetConfig+0x6cc>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	2b02      	cmp	r3, #2
 8007292:	d04b      	beq.n	800732c <UART_SetConfig+0x6c4>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007298:	2b03      	cmp	r3, #3
 800729a:	d043      	beq.n	8007324 <UART_SetConfig+0x6bc>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	d03b      	beq.n	800731c <UART_SetConfig+0x6b4>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a8:	2b05      	cmp	r3, #5
 80072aa:	d033      	beq.n	8007314 <UART_SetConfig+0x6ac>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	2b06      	cmp	r3, #6
 80072b2:	d02b      	beq.n	800730c <UART_SetConfig+0x6a4>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b8:	2b07      	cmp	r3, #7
 80072ba:	d023      	beq.n	8007304 <UART_SetConfig+0x69c>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c0:	2b08      	cmp	r3, #8
 80072c2:	d01b      	beq.n	80072fc <UART_SetConfig+0x694>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	2b09      	cmp	r3, #9
 80072ca:	d013      	beq.n	80072f4 <UART_SetConfig+0x68c>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	2b0a      	cmp	r3, #10
 80072d2:	d00b      	beq.n	80072ec <UART_SetConfig+0x684>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	2b0b      	cmp	r3, #11
 80072da:	d103      	bne.n	80072e4 <UART_SetConfig+0x67c>
 80072dc:	4bae      	ldr	r3, [pc, #696]	; (8007598 <UART_SetConfig+0x930>)
 80072de:	f04f 0400 	mov.w	r4, #0
 80072e2:	e02e      	b.n	8007342 <UART_SetConfig+0x6da>
 80072e4:	4bad      	ldr	r3, [pc, #692]	; (800759c <UART_SetConfig+0x934>)
 80072e6:	f04f 0400 	mov.w	r4, #0
 80072ea:	e02a      	b.n	8007342 <UART_SetConfig+0x6da>
 80072ec:	4bac      	ldr	r3, [pc, #688]	; (80075a0 <UART_SetConfig+0x938>)
 80072ee:	f04f 0400 	mov.w	r4, #0
 80072f2:	e026      	b.n	8007342 <UART_SetConfig+0x6da>
 80072f4:	4bab      	ldr	r3, [pc, #684]	; (80075a4 <UART_SetConfig+0x93c>)
 80072f6:	f04f 0400 	mov.w	r4, #0
 80072fa:	e022      	b.n	8007342 <UART_SetConfig+0x6da>
 80072fc:	4baa      	ldr	r3, [pc, #680]	; (80075a8 <UART_SetConfig+0x940>)
 80072fe:	f04f 0400 	mov.w	r4, #0
 8007302:	e01e      	b.n	8007342 <UART_SetConfig+0x6da>
 8007304:	4ba9      	ldr	r3, [pc, #676]	; (80075ac <UART_SetConfig+0x944>)
 8007306:	f04f 0400 	mov.w	r4, #0
 800730a:	e01a      	b.n	8007342 <UART_SetConfig+0x6da>
 800730c:	a49e      	add	r4, pc, #632	; (adr r4, 8007588 <UART_SetConfig+0x920>)
 800730e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007312:	e016      	b.n	8007342 <UART_SetConfig+0x6da>
 8007314:	4ba6      	ldr	r3, [pc, #664]	; (80075b0 <UART_SetConfig+0x948>)
 8007316:	f04f 0400 	mov.w	r4, #0
 800731a:	e012      	b.n	8007342 <UART_SetConfig+0x6da>
 800731c:	4ba5      	ldr	r3, [pc, #660]	; (80075b4 <UART_SetConfig+0x94c>)
 800731e:	f04f 0400 	mov.w	r4, #0
 8007322:	e00e      	b.n	8007342 <UART_SetConfig+0x6da>
 8007324:	a49a      	add	r4, pc, #616	; (adr r4, 8007590 <UART_SetConfig+0x928>)
 8007326:	e9d4 3400 	ldrd	r3, r4, [r4]
 800732a:	e00a      	b.n	8007342 <UART_SetConfig+0x6da>
 800732c:	4ba2      	ldr	r3, [pc, #648]	; (80075b8 <UART_SetConfig+0x950>)
 800732e:	f04f 0400 	mov.w	r4, #0
 8007332:	e006      	b.n	8007342 <UART_SetConfig+0x6da>
 8007334:	4ba1      	ldr	r3, [pc, #644]	; (80075bc <UART_SetConfig+0x954>)
 8007336:	f04f 0400 	mov.w	r4, #0
 800733a:	e002      	b.n	8007342 <UART_SetConfig+0x6da>
 800733c:	4b97      	ldr	r3, [pc, #604]	; (800759c <UART_SetConfig+0x934>)
 800733e:	f04f 0400 	mov.w	r4, #0
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	6852      	ldr	r2, [r2, #4]
 8007346:	0852      	lsrs	r2, r2, #1
 8007348:	4611      	mov	r1, r2
 800734a:	f04f 0200 	mov.w	r2, #0
 800734e:	eb13 0b01 	adds.w	fp, r3, r1
 8007352:	eb44 0c02 	adc.w	ip, r4, r2
 8007356:	4658      	mov	r0, fp
 8007358:	4661      	mov	r1, ip
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f04f 0400 	mov.w	r4, #0
 8007362:	461a      	mov	r2, r3
 8007364:	4623      	mov	r3, r4
 8007366:	f7f8 ff63 	bl	8000230 <__aeabi_uldivmod>
 800736a:	4603      	mov	r3, r0
 800736c:	460c      	mov	r4, r1
 800736e:	61fb      	str	r3, [r7, #28]
            break;
 8007370:	e14b      	b.n	800760a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8007372:	f7fe fb4b 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 8007376:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	4618      	mov	r0, r3
 800737c:	f04f 0100 	mov.w	r1, #0
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	2b00      	cmp	r3, #0
 8007386:	d067      	beq.n	8007458 <UART_SetConfig+0x7f0>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	2b01      	cmp	r3, #1
 800738e:	d05e      	beq.n	800744e <UART_SetConfig+0x7e6>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	2b02      	cmp	r3, #2
 8007396:	d055      	beq.n	8007444 <UART_SetConfig+0x7dc>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	2b03      	cmp	r3, #3
 800739e:	d04c      	beq.n	800743a <UART_SetConfig+0x7d2>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	2b04      	cmp	r3, #4
 80073a6:	d043      	beq.n	8007430 <UART_SetConfig+0x7c8>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	2b05      	cmp	r3, #5
 80073ae:	d03a      	beq.n	8007426 <UART_SetConfig+0x7be>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	2b06      	cmp	r3, #6
 80073b6:	d031      	beq.n	800741c <UART_SetConfig+0x7b4>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073bc:	2b07      	cmp	r3, #7
 80073be:	d028      	beq.n	8007412 <UART_SetConfig+0x7aa>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d01f      	beq.n	8007408 <UART_SetConfig+0x7a0>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	2b09      	cmp	r3, #9
 80073ce:	d016      	beq.n	80073fe <UART_SetConfig+0x796>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	2b0a      	cmp	r3, #10
 80073d6:	d00d      	beq.n	80073f4 <UART_SetConfig+0x78c>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	2b0b      	cmp	r3, #11
 80073de:	d104      	bne.n	80073ea <UART_SetConfig+0x782>
 80073e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073e4:	f04f 0400 	mov.w	r4, #0
 80073e8:	e03a      	b.n	8007460 <UART_SetConfig+0x7f8>
 80073ea:	f04f 0301 	mov.w	r3, #1
 80073ee:	f04f 0400 	mov.w	r4, #0
 80073f2:	e035      	b.n	8007460 <UART_SetConfig+0x7f8>
 80073f4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80073f8:	f04f 0400 	mov.w	r4, #0
 80073fc:	e030      	b.n	8007460 <UART_SetConfig+0x7f8>
 80073fe:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007402:	f04f 0400 	mov.w	r4, #0
 8007406:	e02b      	b.n	8007460 <UART_SetConfig+0x7f8>
 8007408:	f04f 0320 	mov.w	r3, #32
 800740c:	f04f 0400 	mov.w	r4, #0
 8007410:	e026      	b.n	8007460 <UART_SetConfig+0x7f8>
 8007412:	f04f 0310 	mov.w	r3, #16
 8007416:	f04f 0400 	mov.w	r4, #0
 800741a:	e021      	b.n	8007460 <UART_SetConfig+0x7f8>
 800741c:	f04f 030c 	mov.w	r3, #12
 8007420:	f04f 0400 	mov.w	r4, #0
 8007424:	e01c      	b.n	8007460 <UART_SetConfig+0x7f8>
 8007426:	f04f 030a 	mov.w	r3, #10
 800742a:	f04f 0400 	mov.w	r4, #0
 800742e:	e017      	b.n	8007460 <UART_SetConfig+0x7f8>
 8007430:	f04f 0308 	mov.w	r3, #8
 8007434:	f04f 0400 	mov.w	r4, #0
 8007438:	e012      	b.n	8007460 <UART_SetConfig+0x7f8>
 800743a:	f04f 0306 	mov.w	r3, #6
 800743e:	f04f 0400 	mov.w	r4, #0
 8007442:	e00d      	b.n	8007460 <UART_SetConfig+0x7f8>
 8007444:	f04f 0304 	mov.w	r3, #4
 8007448:	f04f 0400 	mov.w	r4, #0
 800744c:	e008      	b.n	8007460 <UART_SetConfig+0x7f8>
 800744e:	f04f 0302 	mov.w	r3, #2
 8007452:	f04f 0400 	mov.w	r4, #0
 8007456:	e003      	b.n	8007460 <UART_SetConfig+0x7f8>
 8007458:	f04f 0301 	mov.w	r3, #1
 800745c:	f04f 0400 	mov.w	r4, #0
 8007460:	461a      	mov	r2, r3
 8007462:	4623      	mov	r3, r4
 8007464:	f7f8 fee4 	bl	8000230 <__aeabi_uldivmod>
 8007468:	4603      	mov	r3, r0
 800746a:	460c      	mov	r4, r1
 800746c:	4619      	mov	r1, r3
 800746e:	4622      	mov	r2, r4
 8007470:	f04f 0300 	mov.w	r3, #0
 8007474:	f04f 0400 	mov.w	r4, #0
 8007478:	0214      	lsls	r4, r2, #8
 800747a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800747e:	020b      	lsls	r3, r1, #8
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	6852      	ldr	r2, [r2, #4]
 8007484:	0852      	lsrs	r2, r2, #1
 8007486:	4611      	mov	r1, r2
 8007488:	f04f 0200 	mov.w	r2, #0
 800748c:	eb13 0b01 	adds.w	fp, r3, r1
 8007490:	eb44 0c02 	adc.w	ip, r4, r2
 8007494:	4658      	mov	r0, fp
 8007496:	4661      	mov	r1, ip
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f04f 0400 	mov.w	r4, #0
 80074a0:	461a      	mov	r2, r3
 80074a2:	4623      	mov	r3, r4
 80074a4:	f7f8 fec4 	bl	8000230 <__aeabi_uldivmod>
 80074a8:	4603      	mov	r3, r0
 80074aa:	460c      	mov	r4, r1
 80074ac:	61fb      	str	r3, [r7, #28]
            break;
 80074ae:	e0ac      	b.n	800760a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 8089 	beq.w	80075cc <UART_SetConfig+0x964>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d05b      	beq.n	800757a <UART_SetConfig+0x912>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d052      	beq.n	8007570 <UART_SetConfig+0x908>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d04a      	beq.n	8007568 <UART_SetConfig+0x900>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	d041      	beq.n	800755e <UART_SetConfig+0x8f6>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	2b05      	cmp	r3, #5
 80074e0:	d039      	beq.n	8007556 <UART_SetConfig+0x8ee>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e6:	2b06      	cmp	r3, #6
 80074e8:	d031      	beq.n	800754e <UART_SetConfig+0x8e6>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	2b07      	cmp	r3, #7
 80074f0:	d028      	beq.n	8007544 <UART_SetConfig+0x8dc>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	2b08      	cmp	r3, #8
 80074f8:	d01f      	beq.n	800753a <UART_SetConfig+0x8d2>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	2b09      	cmp	r3, #9
 8007500:	d016      	beq.n	8007530 <UART_SetConfig+0x8c8>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007506:	2b0a      	cmp	r3, #10
 8007508:	d00d      	beq.n	8007526 <UART_SetConfig+0x8be>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750e:	2b0b      	cmp	r3, #11
 8007510:	d104      	bne.n	800751c <UART_SetConfig+0x8b4>
 8007512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007516:	f04f 0400 	mov.w	r4, #0
 800751a:	e05b      	b.n	80075d4 <UART_SetConfig+0x96c>
 800751c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007520:	f04f 0400 	mov.w	r4, #0
 8007524:	e056      	b.n	80075d4 <UART_SetConfig+0x96c>
 8007526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800752a:	f04f 0400 	mov.w	r4, #0
 800752e:	e051      	b.n	80075d4 <UART_SetConfig+0x96c>
 8007530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007534:	f04f 0400 	mov.w	r4, #0
 8007538:	e04c      	b.n	80075d4 <UART_SetConfig+0x96c>
 800753a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800753e:	f04f 0400 	mov.w	r4, #0
 8007542:	e047      	b.n	80075d4 <UART_SetConfig+0x96c>
 8007544:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007548:	f04f 0400 	mov.w	r4, #0
 800754c:	e042      	b.n	80075d4 <UART_SetConfig+0x96c>
 800754e:	4b1c      	ldr	r3, [pc, #112]	; (80075c0 <UART_SetConfig+0x958>)
 8007550:	f04f 0400 	mov.w	r4, #0
 8007554:	e03e      	b.n	80075d4 <UART_SetConfig+0x96c>
 8007556:	4b1b      	ldr	r3, [pc, #108]	; (80075c4 <UART_SetConfig+0x95c>)
 8007558:	f04f 0400 	mov.w	r4, #0
 800755c:	e03a      	b.n	80075d4 <UART_SetConfig+0x96c>
 800755e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007562:	f04f 0400 	mov.w	r4, #0
 8007566:	e035      	b.n	80075d4 <UART_SetConfig+0x96c>
 8007568:	4b17      	ldr	r3, [pc, #92]	; (80075c8 <UART_SetConfig+0x960>)
 800756a:	f04f 0400 	mov.w	r4, #0
 800756e:	e031      	b.n	80075d4 <UART_SetConfig+0x96c>
 8007570:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007574:	f04f 0400 	mov.w	r4, #0
 8007578:	e02c      	b.n	80075d4 <UART_SetConfig+0x96c>
 800757a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800757e:	f04f 0400 	mov.w	r4, #0
 8007582:	e027      	b.n	80075d4 <UART_SetConfig+0x96c>
 8007584:	f3af 8000 	nop.w
 8007588:	14585500 	.word	0x14585500
 800758c:	00000000 	.word	0x00000000
 8007590:	28b0aa00 	.word	0x28b0aa00
 8007594:	00000000 	.word	0x00000000
 8007598:	00f42400 	.word	0x00f42400
 800759c:	f4240000 	.word	0xf4240000
 80075a0:	01e84800 	.word	0x01e84800
 80075a4:	03d09000 	.word	0x03d09000
 80075a8:	07a12000 	.word	0x07a12000
 80075ac:	0f424000 	.word	0x0f424000
 80075b0:	186a0000 	.word	0x186a0000
 80075b4:	1e848000 	.word	0x1e848000
 80075b8:	3d090000 	.word	0x3d090000
 80075bc:	7a120000 	.word	0x7a120000
 80075c0:	000aaa00 	.word	0x000aaa00
 80075c4:	000ccc00 	.word	0x000ccc00
 80075c8:	00155500 	.word	0x00155500
 80075cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80075d0:	f04f 0400 	mov.w	r4, #0
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	6852      	ldr	r2, [r2, #4]
 80075d8:	0852      	lsrs	r2, r2, #1
 80075da:	4611      	mov	r1, r2
 80075dc:	f04f 0200 	mov.w	r2, #0
 80075e0:	eb13 0b01 	adds.w	fp, r3, r1
 80075e4:	eb44 0c02 	adc.w	ip, r4, r2
 80075e8:	4658      	mov	r0, fp
 80075ea:	4661      	mov	r1, ip
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f04f 0400 	mov.w	r4, #0
 80075f4:	461a      	mov	r2, r3
 80075f6:	4623      	mov	r3, r4
 80075f8:	f7f8 fe1a 	bl	8000230 <__aeabi_uldivmod>
 80075fc:	4603      	mov	r3, r0
 80075fe:	460c      	mov	r4, r1
 8007600:	61fb      	str	r3, [r7, #28]
            break;
 8007602:	e002      	b.n	800760a <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	76fb      	strb	r3, [r7, #27]
            break;
 8007608:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007610:	d308      	bcc.n	8007624 <UART_SetConfig+0x9bc>
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007618:	d204      	bcs.n	8007624 <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69fa      	ldr	r2, [r7, #28]
 8007620:	60da      	str	r2, [r3, #12]
 8007622:	e35b      	b.n	8007cdc <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	76fb      	strb	r3, [r7, #27]
 8007628:	e358      	b.n	8007cdc <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007632:	f040 81a6 	bne.w	8007982 <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007636:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800763a:	3b01      	subs	r3, #1
 800763c:	2b07      	cmp	r3, #7
 800763e:	f200 8180 	bhi.w	8007942 <UART_SetConfig+0xcda>
 8007642:	a201      	add	r2, pc, #4	; (adr r2, 8007648 <UART_SetConfig+0x9e0>)
 8007644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007648:	08007669 	.word	0x08007669
 800764c:	08007721 	.word	0x08007721
 8007650:	08007943 	.word	0x08007943
 8007654:	080077c9 	.word	0x080077c9
 8007658:	08007943 	.word	0x08007943
 800765c:	08007943 	.word	0x08007943
 8007660:	08007943 	.word	0x08007943
 8007664:	08007881 	.word	0x08007881
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007668:	f7fe fa64 	bl	8005b34 <HAL_RCC_GetPCLK2Freq>
 800766c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007672:	2b00      	cmp	r3, #0
 8007674:	d044      	beq.n	8007700 <UART_SetConfig+0xa98>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	2b01      	cmp	r3, #1
 800767c:	d03e      	beq.n	80076fc <UART_SetConfig+0xa94>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	2b02      	cmp	r3, #2
 8007684:	d038      	beq.n	80076f8 <UART_SetConfig+0xa90>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768a:	2b03      	cmp	r3, #3
 800768c:	d032      	beq.n	80076f4 <UART_SetConfig+0xa8c>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007692:	2b04      	cmp	r3, #4
 8007694:	d02c      	beq.n	80076f0 <UART_SetConfig+0xa88>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769a:	2b05      	cmp	r3, #5
 800769c:	d026      	beq.n	80076ec <UART_SetConfig+0xa84>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a2:	2b06      	cmp	r3, #6
 80076a4:	d020      	beq.n	80076e8 <UART_SetConfig+0xa80>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	2b07      	cmp	r3, #7
 80076ac:	d01a      	beq.n	80076e4 <UART_SetConfig+0xa7c>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	2b08      	cmp	r3, #8
 80076b4:	d014      	beq.n	80076e0 <UART_SetConfig+0xa78>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ba:	2b09      	cmp	r3, #9
 80076bc:	d00e      	beq.n	80076dc <UART_SetConfig+0xa74>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	2b0a      	cmp	r3, #10
 80076c4:	d008      	beq.n	80076d8 <UART_SetConfig+0xa70>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ca:	2b0b      	cmp	r3, #11
 80076cc:	d102      	bne.n	80076d4 <UART_SetConfig+0xa6c>
 80076ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076d2:	e016      	b.n	8007702 <UART_SetConfig+0xa9a>
 80076d4:	2301      	movs	r3, #1
 80076d6:	e014      	b.n	8007702 <UART_SetConfig+0xa9a>
 80076d8:	2380      	movs	r3, #128	; 0x80
 80076da:	e012      	b.n	8007702 <UART_SetConfig+0xa9a>
 80076dc:	2340      	movs	r3, #64	; 0x40
 80076de:	e010      	b.n	8007702 <UART_SetConfig+0xa9a>
 80076e0:	2320      	movs	r3, #32
 80076e2:	e00e      	b.n	8007702 <UART_SetConfig+0xa9a>
 80076e4:	2310      	movs	r3, #16
 80076e6:	e00c      	b.n	8007702 <UART_SetConfig+0xa9a>
 80076e8:	230c      	movs	r3, #12
 80076ea:	e00a      	b.n	8007702 <UART_SetConfig+0xa9a>
 80076ec:	230a      	movs	r3, #10
 80076ee:	e008      	b.n	8007702 <UART_SetConfig+0xa9a>
 80076f0:	2308      	movs	r3, #8
 80076f2:	e006      	b.n	8007702 <UART_SetConfig+0xa9a>
 80076f4:	2306      	movs	r3, #6
 80076f6:	e004      	b.n	8007702 <UART_SetConfig+0xa9a>
 80076f8:	2304      	movs	r3, #4
 80076fa:	e002      	b.n	8007702 <UART_SetConfig+0xa9a>
 80076fc:	2302      	movs	r3, #2
 80076fe:	e000      	b.n	8007702 <UART_SetConfig+0xa9a>
 8007700:	2301      	movs	r3, #1
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	fbb2 f3f3 	udiv	r3, r2, r3
 8007708:	005a      	lsls	r2, r3, #1
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	085b      	lsrs	r3, r3, #1
 8007710:	441a      	add	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	fbb2 f3f3 	udiv	r3, r2, r3
 800771a:	b29b      	uxth	r3, r3
 800771c:	61fb      	str	r3, [r7, #28]
        break;
 800771e:	e113      	b.n	8007948 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	2b00      	cmp	r3, #0
 8007726:	d043      	beq.n	80077b0 <UART_SetConfig+0xb48>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	2b01      	cmp	r3, #1
 800772e:	d03d      	beq.n	80077ac <UART_SetConfig+0xb44>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007734:	2b02      	cmp	r3, #2
 8007736:	d037      	beq.n	80077a8 <UART_SetConfig+0xb40>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773c:	2b03      	cmp	r3, #3
 800773e:	d031      	beq.n	80077a4 <UART_SetConfig+0xb3c>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007744:	2b04      	cmp	r3, #4
 8007746:	d02b      	beq.n	80077a0 <UART_SetConfig+0xb38>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	2b05      	cmp	r3, #5
 800774e:	d025      	beq.n	800779c <UART_SetConfig+0xb34>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007754:	2b06      	cmp	r3, #6
 8007756:	d01f      	beq.n	8007798 <UART_SetConfig+0xb30>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775c:	2b07      	cmp	r3, #7
 800775e:	d019      	beq.n	8007794 <UART_SetConfig+0xb2c>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007764:	2b08      	cmp	r3, #8
 8007766:	d013      	beq.n	8007790 <UART_SetConfig+0xb28>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776c:	2b09      	cmp	r3, #9
 800776e:	d00d      	beq.n	800778c <UART_SetConfig+0xb24>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007774:	2b0a      	cmp	r3, #10
 8007776:	d007      	beq.n	8007788 <UART_SetConfig+0xb20>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777c:	2b0b      	cmp	r3, #11
 800777e:	d101      	bne.n	8007784 <UART_SetConfig+0xb1c>
 8007780:	4b8c      	ldr	r3, [pc, #560]	; (80079b4 <UART_SetConfig+0xd4c>)
 8007782:	e016      	b.n	80077b2 <UART_SetConfig+0xb4a>
 8007784:	4b8c      	ldr	r3, [pc, #560]	; (80079b8 <UART_SetConfig+0xd50>)
 8007786:	e014      	b.n	80077b2 <UART_SetConfig+0xb4a>
 8007788:	4b8c      	ldr	r3, [pc, #560]	; (80079bc <UART_SetConfig+0xd54>)
 800778a:	e012      	b.n	80077b2 <UART_SetConfig+0xb4a>
 800778c:	4b8c      	ldr	r3, [pc, #560]	; (80079c0 <UART_SetConfig+0xd58>)
 800778e:	e010      	b.n	80077b2 <UART_SetConfig+0xb4a>
 8007790:	4b8c      	ldr	r3, [pc, #560]	; (80079c4 <UART_SetConfig+0xd5c>)
 8007792:	e00e      	b.n	80077b2 <UART_SetConfig+0xb4a>
 8007794:	4b8c      	ldr	r3, [pc, #560]	; (80079c8 <UART_SetConfig+0xd60>)
 8007796:	e00c      	b.n	80077b2 <UART_SetConfig+0xb4a>
 8007798:	4b8c      	ldr	r3, [pc, #560]	; (80079cc <UART_SetConfig+0xd64>)
 800779a:	e00a      	b.n	80077b2 <UART_SetConfig+0xb4a>
 800779c:	4b8c      	ldr	r3, [pc, #560]	; (80079d0 <UART_SetConfig+0xd68>)
 800779e:	e008      	b.n	80077b2 <UART_SetConfig+0xb4a>
 80077a0:	4b8c      	ldr	r3, [pc, #560]	; (80079d4 <UART_SetConfig+0xd6c>)
 80077a2:	e006      	b.n	80077b2 <UART_SetConfig+0xb4a>
 80077a4:	4b8c      	ldr	r3, [pc, #560]	; (80079d8 <UART_SetConfig+0xd70>)
 80077a6:	e004      	b.n	80077b2 <UART_SetConfig+0xb4a>
 80077a8:	4b8c      	ldr	r3, [pc, #560]	; (80079dc <UART_SetConfig+0xd74>)
 80077aa:	e002      	b.n	80077b2 <UART_SetConfig+0xb4a>
 80077ac:	4b8c      	ldr	r3, [pc, #560]	; (80079e0 <UART_SetConfig+0xd78>)
 80077ae:	e000      	b.n	80077b2 <UART_SetConfig+0xb4a>
 80077b0:	4b81      	ldr	r3, [pc, #516]	; (80079b8 <UART_SetConfig+0xd50>)
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	6852      	ldr	r2, [r2, #4]
 80077b6:	0852      	lsrs	r2, r2, #1
 80077b8:	441a      	add	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	61fb      	str	r3, [r7, #28]
        break;
 80077c6:	e0bf      	b.n	8007948 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077c8:	f7fe f920 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 80077cc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d044      	beq.n	8007860 <UART_SetConfig+0xbf8>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d03e      	beq.n	800785c <UART_SetConfig+0xbf4>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d038      	beq.n	8007858 <UART_SetConfig+0xbf0>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d032      	beq.n	8007854 <UART_SetConfig+0xbec>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d02c      	beq.n	8007850 <UART_SetConfig+0xbe8>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	2b05      	cmp	r3, #5
 80077fc:	d026      	beq.n	800784c <UART_SetConfig+0xbe4>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	2b06      	cmp	r3, #6
 8007804:	d020      	beq.n	8007848 <UART_SetConfig+0xbe0>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780a:	2b07      	cmp	r3, #7
 800780c:	d01a      	beq.n	8007844 <UART_SetConfig+0xbdc>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	2b08      	cmp	r3, #8
 8007814:	d014      	beq.n	8007840 <UART_SetConfig+0xbd8>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	2b09      	cmp	r3, #9
 800781c:	d00e      	beq.n	800783c <UART_SetConfig+0xbd4>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007822:	2b0a      	cmp	r3, #10
 8007824:	d008      	beq.n	8007838 <UART_SetConfig+0xbd0>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	2b0b      	cmp	r3, #11
 800782c:	d102      	bne.n	8007834 <UART_SetConfig+0xbcc>
 800782e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007832:	e016      	b.n	8007862 <UART_SetConfig+0xbfa>
 8007834:	2301      	movs	r3, #1
 8007836:	e014      	b.n	8007862 <UART_SetConfig+0xbfa>
 8007838:	2380      	movs	r3, #128	; 0x80
 800783a:	e012      	b.n	8007862 <UART_SetConfig+0xbfa>
 800783c:	2340      	movs	r3, #64	; 0x40
 800783e:	e010      	b.n	8007862 <UART_SetConfig+0xbfa>
 8007840:	2320      	movs	r3, #32
 8007842:	e00e      	b.n	8007862 <UART_SetConfig+0xbfa>
 8007844:	2310      	movs	r3, #16
 8007846:	e00c      	b.n	8007862 <UART_SetConfig+0xbfa>
 8007848:	230c      	movs	r3, #12
 800784a:	e00a      	b.n	8007862 <UART_SetConfig+0xbfa>
 800784c:	230a      	movs	r3, #10
 800784e:	e008      	b.n	8007862 <UART_SetConfig+0xbfa>
 8007850:	2308      	movs	r3, #8
 8007852:	e006      	b.n	8007862 <UART_SetConfig+0xbfa>
 8007854:	2306      	movs	r3, #6
 8007856:	e004      	b.n	8007862 <UART_SetConfig+0xbfa>
 8007858:	2304      	movs	r3, #4
 800785a:	e002      	b.n	8007862 <UART_SetConfig+0xbfa>
 800785c:	2302      	movs	r3, #2
 800785e:	e000      	b.n	8007862 <UART_SetConfig+0xbfa>
 8007860:	2301      	movs	r3, #1
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	fbb2 f3f3 	udiv	r3, r2, r3
 8007868:	005a      	lsls	r2, r3, #1
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	085b      	lsrs	r3, r3, #1
 8007870:	441a      	add	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	fbb2 f3f3 	udiv	r3, r2, r3
 800787a:	b29b      	uxth	r3, r3
 800787c:	61fb      	str	r3, [r7, #28]
        break;
 800787e:	e063      	b.n	8007948 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007884:	2b00      	cmp	r3, #0
 8007886:	d04f      	beq.n	8007928 <UART_SetConfig+0xcc0>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	2b01      	cmp	r3, #1
 800788e:	d048      	beq.n	8007922 <UART_SetConfig+0xcba>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007894:	2b02      	cmp	r3, #2
 8007896:	d041      	beq.n	800791c <UART_SetConfig+0xcb4>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	2b03      	cmp	r3, #3
 800789e:	d03a      	beq.n	8007916 <UART_SetConfig+0xcae>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	d033      	beq.n	8007910 <UART_SetConfig+0xca8>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ac:	2b05      	cmp	r3, #5
 80078ae:	d02c      	beq.n	800790a <UART_SetConfig+0xca2>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b4:	2b06      	cmp	r3, #6
 80078b6:	d025      	beq.n	8007904 <UART_SetConfig+0xc9c>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078bc:	2b07      	cmp	r3, #7
 80078be:	d01e      	beq.n	80078fe <UART_SetConfig+0xc96>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	2b08      	cmp	r3, #8
 80078c6:	d017      	beq.n	80078f8 <UART_SetConfig+0xc90>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078cc:	2b09      	cmp	r3, #9
 80078ce:	d010      	beq.n	80078f2 <UART_SetConfig+0xc8a>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d4:	2b0a      	cmp	r3, #10
 80078d6:	d009      	beq.n	80078ec <UART_SetConfig+0xc84>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	2b0b      	cmp	r3, #11
 80078de:	d102      	bne.n	80078e6 <UART_SetConfig+0xc7e>
 80078e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078e4:	e022      	b.n	800792c <UART_SetConfig+0xcc4>
 80078e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80078ea:	e01f      	b.n	800792c <UART_SetConfig+0xcc4>
 80078ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078f0:	e01c      	b.n	800792c <UART_SetConfig+0xcc4>
 80078f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078f6:	e019      	b.n	800792c <UART_SetConfig+0xcc4>
 80078f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078fc:	e016      	b.n	800792c <UART_SetConfig+0xcc4>
 80078fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007902:	e013      	b.n	800792c <UART_SetConfig+0xcc4>
 8007904:	f241 5354 	movw	r3, #5460	; 0x1554
 8007908:	e010      	b.n	800792c <UART_SetConfig+0xcc4>
 800790a:	f641 1398 	movw	r3, #6552	; 0x1998
 800790e:	e00d      	b.n	800792c <UART_SetConfig+0xcc4>
 8007910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007914:	e00a      	b.n	800792c <UART_SetConfig+0xcc4>
 8007916:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800791a:	e007      	b.n	800792c <UART_SetConfig+0xcc4>
 800791c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007920:	e004      	b.n	800792c <UART_SetConfig+0xcc4>
 8007922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007926:	e001      	b.n	800792c <UART_SetConfig+0xcc4>
 8007928:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	6852      	ldr	r2, [r2, #4]
 8007930:	0852      	lsrs	r2, r2, #1
 8007932:	441a      	add	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	fbb2 f3f3 	udiv	r3, r2, r3
 800793c:	b29b      	uxth	r3, r3
 800793e:	61fb      	str	r3, [r7, #28]
        break;
 8007940:	e002      	b.n	8007948 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	76fb      	strb	r3, [r7, #27]
        break;
 8007946:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	2b0f      	cmp	r3, #15
 800794c:	d916      	bls.n	800797c <UART_SetConfig+0xd14>
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007954:	d212      	bcs.n	800797c <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	b29b      	uxth	r3, r3
 800795a:	f023 030f 	bic.w	r3, r3, #15
 800795e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	085b      	lsrs	r3, r3, #1
 8007964:	b29b      	uxth	r3, r3
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	b29a      	uxth	r2, r3
 800796c:	89fb      	ldrh	r3, [r7, #14]
 800796e:	4313      	orrs	r3, r2
 8007970:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	89fa      	ldrh	r2, [r7, #14]
 8007978:	60da      	str	r2, [r3, #12]
 800797a:	e1af      	b.n	8007cdc <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	76fb      	strb	r3, [r7, #27]
 8007980:	e1ac      	b.n	8007cdc <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 8007982:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007986:	3b01      	subs	r3, #1
 8007988:	2b07      	cmp	r3, #7
 800798a:	f200 8196 	bhi.w	8007cba <UART_SetConfig+0x1052>
 800798e:	a201      	add	r2, pc, #4	; (adr r2, 8007994 <UART_SetConfig+0xd2c>)
 8007990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007994:	080079e5 	.word	0x080079e5
 8007998:	08007a9b 	.word	0x08007a9b
 800799c:	08007cbb 	.word	0x08007cbb
 80079a0:	08007b45 	.word	0x08007b45
 80079a4:	08007cbb 	.word	0x08007cbb
 80079a8:	08007cbb 	.word	0x08007cbb
 80079ac:	08007cbb 	.word	0x08007cbb
 80079b0:	08007bfb 	.word	0x08007bfb
 80079b4:	0001e848 	.word	0x0001e848
 80079b8:	01e84800 	.word	0x01e84800
 80079bc:	0003d090 	.word	0x0003d090
 80079c0:	0007a120 	.word	0x0007a120
 80079c4:	000f4240 	.word	0x000f4240
 80079c8:	001e8480 	.word	0x001e8480
 80079cc:	0028b0aa 	.word	0x0028b0aa
 80079d0:	0030d400 	.word	0x0030d400
 80079d4:	003d0900 	.word	0x003d0900
 80079d8:	00516154 	.word	0x00516154
 80079dc:	007a1200 	.word	0x007a1200
 80079e0:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079e4:	f7fe f8a6 	bl	8005b34 <HAL_RCC_GetPCLK2Freq>
 80079e8:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d044      	beq.n	8007a7c <UART_SetConfig+0xe14>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d03e      	beq.n	8007a78 <UART_SetConfig+0xe10>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d038      	beq.n	8007a74 <UART_SetConfig+0xe0c>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d032      	beq.n	8007a70 <UART_SetConfig+0xe08>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0e:	2b04      	cmp	r3, #4
 8007a10:	d02c      	beq.n	8007a6c <UART_SetConfig+0xe04>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a16:	2b05      	cmp	r3, #5
 8007a18:	d026      	beq.n	8007a68 <UART_SetConfig+0xe00>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	2b06      	cmp	r3, #6
 8007a20:	d020      	beq.n	8007a64 <UART_SetConfig+0xdfc>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a26:	2b07      	cmp	r3, #7
 8007a28:	d01a      	beq.n	8007a60 <UART_SetConfig+0xdf8>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2e:	2b08      	cmp	r3, #8
 8007a30:	d014      	beq.n	8007a5c <UART_SetConfig+0xdf4>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	2b09      	cmp	r3, #9
 8007a38:	d00e      	beq.n	8007a58 <UART_SetConfig+0xdf0>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3e:	2b0a      	cmp	r3, #10
 8007a40:	d008      	beq.n	8007a54 <UART_SetConfig+0xdec>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a46:	2b0b      	cmp	r3, #11
 8007a48:	d102      	bne.n	8007a50 <UART_SetConfig+0xde8>
 8007a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a4e:	e016      	b.n	8007a7e <UART_SetConfig+0xe16>
 8007a50:	2301      	movs	r3, #1
 8007a52:	e014      	b.n	8007a7e <UART_SetConfig+0xe16>
 8007a54:	2380      	movs	r3, #128	; 0x80
 8007a56:	e012      	b.n	8007a7e <UART_SetConfig+0xe16>
 8007a58:	2340      	movs	r3, #64	; 0x40
 8007a5a:	e010      	b.n	8007a7e <UART_SetConfig+0xe16>
 8007a5c:	2320      	movs	r3, #32
 8007a5e:	e00e      	b.n	8007a7e <UART_SetConfig+0xe16>
 8007a60:	2310      	movs	r3, #16
 8007a62:	e00c      	b.n	8007a7e <UART_SetConfig+0xe16>
 8007a64:	230c      	movs	r3, #12
 8007a66:	e00a      	b.n	8007a7e <UART_SetConfig+0xe16>
 8007a68:	230a      	movs	r3, #10
 8007a6a:	e008      	b.n	8007a7e <UART_SetConfig+0xe16>
 8007a6c:	2308      	movs	r3, #8
 8007a6e:	e006      	b.n	8007a7e <UART_SetConfig+0xe16>
 8007a70:	2306      	movs	r3, #6
 8007a72:	e004      	b.n	8007a7e <UART_SetConfig+0xe16>
 8007a74:	2304      	movs	r3, #4
 8007a76:	e002      	b.n	8007a7e <UART_SetConfig+0xe16>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e000      	b.n	8007a7e <UART_SetConfig+0xe16>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	085b      	lsrs	r3, r3, #1
 8007a8a:	441a      	add	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	61fb      	str	r3, [r7, #28]
        break;
 8007a98:	e112      	b.n	8007cc0 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d044      	beq.n	8007b2c <UART_SetConfig+0xec4>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d03e      	beq.n	8007b28 <UART_SetConfig+0xec0>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d038      	beq.n	8007b24 <UART_SetConfig+0xebc>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d032      	beq.n	8007b20 <UART_SetConfig+0xeb8>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d02c      	beq.n	8007b1c <UART_SetConfig+0xeb4>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	2b05      	cmp	r3, #5
 8007ac8:	d026      	beq.n	8007b18 <UART_SetConfig+0xeb0>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	2b06      	cmp	r3, #6
 8007ad0:	d020      	beq.n	8007b14 <UART_SetConfig+0xeac>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	2b07      	cmp	r3, #7
 8007ad8:	d01a      	beq.n	8007b10 <UART_SetConfig+0xea8>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	2b08      	cmp	r3, #8
 8007ae0:	d014      	beq.n	8007b0c <UART_SetConfig+0xea4>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	2b09      	cmp	r3, #9
 8007ae8:	d00e      	beq.n	8007b08 <UART_SetConfig+0xea0>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	2b0a      	cmp	r3, #10
 8007af0:	d008      	beq.n	8007b04 <UART_SetConfig+0xe9c>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	2b0b      	cmp	r3, #11
 8007af8:	d102      	bne.n	8007b00 <UART_SetConfig+0xe98>
 8007afa:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007afe:	e016      	b.n	8007b2e <UART_SetConfig+0xec6>
 8007b00:	4b80      	ldr	r3, [pc, #512]	; (8007d04 <UART_SetConfig+0x109c>)
 8007b02:	e014      	b.n	8007b2e <UART_SetConfig+0xec6>
 8007b04:	4b80      	ldr	r3, [pc, #512]	; (8007d08 <UART_SetConfig+0x10a0>)
 8007b06:	e012      	b.n	8007b2e <UART_SetConfig+0xec6>
 8007b08:	4b80      	ldr	r3, [pc, #512]	; (8007d0c <UART_SetConfig+0x10a4>)
 8007b0a:	e010      	b.n	8007b2e <UART_SetConfig+0xec6>
 8007b0c:	4b80      	ldr	r3, [pc, #512]	; (8007d10 <UART_SetConfig+0x10a8>)
 8007b0e:	e00e      	b.n	8007b2e <UART_SetConfig+0xec6>
 8007b10:	4b80      	ldr	r3, [pc, #512]	; (8007d14 <UART_SetConfig+0x10ac>)
 8007b12:	e00c      	b.n	8007b2e <UART_SetConfig+0xec6>
 8007b14:	4b80      	ldr	r3, [pc, #512]	; (8007d18 <UART_SetConfig+0x10b0>)
 8007b16:	e00a      	b.n	8007b2e <UART_SetConfig+0xec6>
 8007b18:	4b80      	ldr	r3, [pc, #512]	; (8007d1c <UART_SetConfig+0x10b4>)
 8007b1a:	e008      	b.n	8007b2e <UART_SetConfig+0xec6>
 8007b1c:	4b80      	ldr	r3, [pc, #512]	; (8007d20 <UART_SetConfig+0x10b8>)
 8007b1e:	e006      	b.n	8007b2e <UART_SetConfig+0xec6>
 8007b20:	4b80      	ldr	r3, [pc, #512]	; (8007d24 <UART_SetConfig+0x10bc>)
 8007b22:	e004      	b.n	8007b2e <UART_SetConfig+0xec6>
 8007b24:	4b80      	ldr	r3, [pc, #512]	; (8007d28 <UART_SetConfig+0x10c0>)
 8007b26:	e002      	b.n	8007b2e <UART_SetConfig+0xec6>
 8007b28:	4b80      	ldr	r3, [pc, #512]	; (8007d2c <UART_SetConfig+0x10c4>)
 8007b2a:	e000      	b.n	8007b2e <UART_SetConfig+0xec6>
 8007b2c:	4b75      	ldr	r3, [pc, #468]	; (8007d04 <UART_SetConfig+0x109c>)
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	6852      	ldr	r2, [r2, #4]
 8007b32:	0852      	lsrs	r2, r2, #1
 8007b34:	441a      	add	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	61fb      	str	r3, [r7, #28]
        break;
 8007b42:	e0bd      	b.n	8007cc0 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b44:	f7fd ff62 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 8007b48:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d044      	beq.n	8007bdc <UART_SetConfig+0xf74>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d03e      	beq.n	8007bd8 <UART_SetConfig+0xf70>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d038      	beq.n	8007bd4 <UART_SetConfig+0xf6c>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d032      	beq.n	8007bd0 <UART_SetConfig+0xf68>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	d02c      	beq.n	8007bcc <UART_SetConfig+0xf64>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b76:	2b05      	cmp	r3, #5
 8007b78:	d026      	beq.n	8007bc8 <UART_SetConfig+0xf60>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7e:	2b06      	cmp	r3, #6
 8007b80:	d020      	beq.n	8007bc4 <UART_SetConfig+0xf5c>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	2b07      	cmp	r3, #7
 8007b88:	d01a      	beq.n	8007bc0 <UART_SetConfig+0xf58>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8e:	2b08      	cmp	r3, #8
 8007b90:	d014      	beq.n	8007bbc <UART_SetConfig+0xf54>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b96:	2b09      	cmp	r3, #9
 8007b98:	d00e      	beq.n	8007bb8 <UART_SetConfig+0xf50>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	2b0a      	cmp	r3, #10
 8007ba0:	d008      	beq.n	8007bb4 <UART_SetConfig+0xf4c>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	2b0b      	cmp	r3, #11
 8007ba8:	d102      	bne.n	8007bb0 <UART_SetConfig+0xf48>
 8007baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bae:	e016      	b.n	8007bde <UART_SetConfig+0xf76>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e014      	b.n	8007bde <UART_SetConfig+0xf76>
 8007bb4:	2380      	movs	r3, #128	; 0x80
 8007bb6:	e012      	b.n	8007bde <UART_SetConfig+0xf76>
 8007bb8:	2340      	movs	r3, #64	; 0x40
 8007bba:	e010      	b.n	8007bde <UART_SetConfig+0xf76>
 8007bbc:	2320      	movs	r3, #32
 8007bbe:	e00e      	b.n	8007bde <UART_SetConfig+0xf76>
 8007bc0:	2310      	movs	r3, #16
 8007bc2:	e00c      	b.n	8007bde <UART_SetConfig+0xf76>
 8007bc4:	230c      	movs	r3, #12
 8007bc6:	e00a      	b.n	8007bde <UART_SetConfig+0xf76>
 8007bc8:	230a      	movs	r3, #10
 8007bca:	e008      	b.n	8007bde <UART_SetConfig+0xf76>
 8007bcc:	2308      	movs	r3, #8
 8007bce:	e006      	b.n	8007bde <UART_SetConfig+0xf76>
 8007bd0:	2306      	movs	r3, #6
 8007bd2:	e004      	b.n	8007bde <UART_SetConfig+0xf76>
 8007bd4:	2304      	movs	r3, #4
 8007bd6:	e002      	b.n	8007bde <UART_SetConfig+0xf76>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e000      	b.n	8007bde <UART_SetConfig+0xf76>
 8007bdc:	2301      	movs	r3, #1
 8007bde:	693a      	ldr	r2, [r7, #16]
 8007be0:	fbb2 f2f3 	udiv	r2, r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	085b      	lsrs	r3, r3, #1
 8007bea:	441a      	add	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	61fb      	str	r3, [r7, #28]
        break;
 8007bf8:	e062      	b.n	8007cc0 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d04e      	beq.n	8007ca0 <UART_SetConfig+0x1038>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d047      	beq.n	8007c9a <UART_SetConfig+0x1032>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d040      	beq.n	8007c94 <UART_SetConfig+0x102c>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d039      	beq.n	8007c8e <UART_SetConfig+0x1026>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d032      	beq.n	8007c88 <UART_SetConfig+0x1020>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c26:	2b05      	cmp	r3, #5
 8007c28:	d02b      	beq.n	8007c82 <UART_SetConfig+0x101a>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2e:	2b06      	cmp	r3, #6
 8007c30:	d024      	beq.n	8007c7c <UART_SetConfig+0x1014>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c36:	2b07      	cmp	r3, #7
 8007c38:	d01d      	beq.n	8007c76 <UART_SetConfig+0x100e>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3e:	2b08      	cmp	r3, #8
 8007c40:	d016      	beq.n	8007c70 <UART_SetConfig+0x1008>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c46:	2b09      	cmp	r3, #9
 8007c48:	d00f      	beq.n	8007c6a <UART_SetConfig+0x1002>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4e:	2b0a      	cmp	r3, #10
 8007c50:	d008      	beq.n	8007c64 <UART_SetConfig+0xffc>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c56:	2b0b      	cmp	r3, #11
 8007c58:	d101      	bne.n	8007c5e <UART_SetConfig+0xff6>
 8007c5a:	2380      	movs	r3, #128	; 0x80
 8007c5c:	e022      	b.n	8007ca4 <UART_SetConfig+0x103c>
 8007c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c62:	e01f      	b.n	8007ca4 <UART_SetConfig+0x103c>
 8007c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c68:	e01c      	b.n	8007ca4 <UART_SetConfig+0x103c>
 8007c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c6e:	e019      	b.n	8007ca4 <UART_SetConfig+0x103c>
 8007c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c74:	e016      	b.n	8007ca4 <UART_SetConfig+0x103c>
 8007c76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c7a:	e013      	b.n	8007ca4 <UART_SetConfig+0x103c>
 8007c7c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007c80:	e010      	b.n	8007ca4 <UART_SetConfig+0x103c>
 8007c82:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007c86:	e00d      	b.n	8007ca4 <UART_SetConfig+0x103c>
 8007c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c8c:	e00a      	b.n	8007ca4 <UART_SetConfig+0x103c>
 8007c8e:	f241 5355 	movw	r3, #5461	; 0x1555
 8007c92:	e007      	b.n	8007ca4 <UART_SetConfig+0x103c>
 8007c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c98:	e004      	b.n	8007ca4 <UART_SetConfig+0x103c>
 8007c9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c9e:	e001      	b.n	8007ca4 <UART_SetConfig+0x103c>
 8007ca0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	6852      	ldr	r2, [r2, #4]
 8007ca8:	0852      	lsrs	r2, r2, #1
 8007caa:	441a      	add	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	61fb      	str	r3, [r7, #28]
        break;
 8007cb8:	e002      	b.n	8007cc0 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	76fb      	strb	r3, [r7, #27]
        break;
 8007cbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	2b0f      	cmp	r3, #15
 8007cc4:	d908      	bls.n	8007cd8 <UART_SetConfig+0x1070>
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ccc:	d204      	bcs.n	8007cd8 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	69fa      	ldr	r2, [r7, #28]
 8007cd4:	60da      	str	r2, [r3, #12]
 8007cd6:	e001      	b.n	8007cdc <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007cf8:	7efb      	ldrb	r3, [r7, #27]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3728      	adds	r7, #40	; 0x28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007d04:	00f42400 	.word	0x00f42400
 8007d08:	0001e848 	.word	0x0001e848
 8007d0c:	0003d090 	.word	0x0003d090
 8007d10:	0007a120 	.word	0x0007a120
 8007d14:	000f4240 	.word	0x000f4240
 8007d18:	00145855 	.word	0x00145855
 8007d1c:	00186a00 	.word	0x00186a00
 8007d20:	001e8480 	.word	0x001e8480
 8007d24:	0028b0aa 	.word	0x0028b0aa
 8007d28:	003d0900 	.word	0x003d0900
 8007d2c:	007a1200 	.word	0x007a1200

08007d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3c:	f003 0301 	and.w	r3, r3, #1
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00a      	beq.n	8007d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5e:	f003 0302 	and.w	r3, r3, #2
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00a      	beq.n	8007d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d80:	f003 0304 	and.w	r3, r3, #4
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00a      	beq.n	8007d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da2:	f003 0308 	and.w	r3, r3, #8
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00a      	beq.n	8007dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc4:	f003 0310 	and.w	r3, r3, #16
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00a      	beq.n	8007de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de6:	f003 0320 	and.w	r3, r3, #32
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00a      	beq.n	8007e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	430a      	orrs	r2, r1
 8007e02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d01a      	beq.n	8007e46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	430a      	orrs	r2, r1
 8007e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e2e:	d10a      	bne.n	8007e46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00a      	beq.n	8007e68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	605a      	str	r2, [r3, #4]
  }
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af02      	add	r7, sp, #8
 8007e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007e84:	f7fb ff7e 	bl	8003d84 <HAL_GetTick>
 8007e88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0308 	and.w	r3, r3, #8
 8007e94:	2b08      	cmp	r3, #8
 8007e96:	d10e      	bne.n	8007eb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f82c 	bl	8007f04 <UART_WaitOnFlagUntilTimeout>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e022      	b.n	8007efc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b04      	cmp	r3, #4
 8007ec2:	d10e      	bne.n	8007ee2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ec4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f816 	bl	8007f04 <UART_WaitOnFlagUntilTimeout>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e00c      	b.n	8007efc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2220      	movs	r2, #32
 8007eee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	603b      	str	r3, [r7, #0]
 8007f10:	4613      	mov	r3, r2
 8007f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f14:	e062      	b.n	8007fdc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1c:	d05e      	beq.n	8007fdc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f1e:	f7fb ff31 	bl	8003d84 <HAL_GetTick>
 8007f22:	4602      	mov	r2, r0
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d302      	bcc.n	8007f34 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d11d      	bne.n	8007f70 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f42:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689a      	ldr	r2, [r3, #8]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f022 0201 	bic.w	r2, r2, #1
 8007f52:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2220      	movs	r2, #32
 8007f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e045      	b.n	8007ffc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0304 	and.w	r3, r3, #4
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d02e      	beq.n	8007fdc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	69db      	ldr	r3, [r3, #28]
 8007f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f8c:	d126      	bne.n	8007fdc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f96:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007fa6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689a      	ldr	r2, [r3, #8]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 0201 	bic.w	r2, r2, #1
 8007fb6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2220      	movs	r2, #32
 8007fcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e00f      	b.n	8007ffc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	69da      	ldr	r2, [r3, #28]
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	bf0c      	ite	eq
 8007fec:	2301      	moveq	r3, #1
 8007fee:	2300      	movne	r3, #0
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	79fb      	ldrb	r3, [r7, #7]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d08d      	beq.n	8007f16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800801a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	689a      	ldr	r2, [r3, #8]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800802a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2220      	movs	r2, #32
 8008030:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008056:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	6812      	ldr	r2, [r2, #0]
 8008062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008066:	f023 0301 	bic.w	r3, r3, #1
 800806a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2220      	movs	r2, #32
 8008070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800807a:	bf00      	nop
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b084      	sub	sp, #16
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008092:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0320 	and.w	r3, r3, #32
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d114      	bne.n	80080cc <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	689a      	ldr	r2, [r3, #8]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080b8:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080c8:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080ca:	e002      	b.n	80080d2 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f7f9 faf3 	bl	80016b8 <HAL_UART_TxCpltCallback>
}
 80080d2:	bf00      	nop
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b084      	sub	sp, #16
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f7fe fda9 	bl	8006c40 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080ee:	bf00      	nop
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b086      	sub	sp, #24
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008102:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800810a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008112:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800811e:	2b80      	cmp	r3, #128	; 0x80
 8008120:	d109      	bne.n	8008136 <UART_DMAError+0x40>
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	2b21      	cmp	r3, #33	; 0x21
 8008126:	d106      	bne.n	8008136 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	2200      	movs	r2, #0
 800812c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008130:	6978      	ldr	r0, [r7, #20]
 8008132:	f7ff ff67 	bl	8008004 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008140:	2b40      	cmp	r3, #64	; 0x40
 8008142:	d109      	bne.n	8008158 <UART_DMAError+0x62>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2b22      	cmp	r3, #34	; 0x22
 8008148:	d106      	bne.n	8008158 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2200      	movs	r2, #0
 800814e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008152:	6978      	ldr	r0, [r7, #20]
 8008154:	f7ff ff74 	bl	8008040 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800815e:	f043 0210 	orr.w	r2, r3, #16
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008168:	6978      	ldr	r0, [r7, #20]
 800816a:	f7fe fd73 	bl	8006c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800816e:	bf00      	nop
 8008170:	3718      	adds	r7, #24
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b084      	sub	sp, #16
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008182:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2200      	movs	r2, #0
 8008188:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f7fe fd5d 	bl	8006c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800819a:	bf00      	nop
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b082      	sub	sp, #8
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081b8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2220      	movs	r2, #32
 80081be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f7f9 fa75 	bl	80016b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081ce:	bf00      	nop
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80081de:	bf00      	nop
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80081f2:	bf00      	nop
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80081fe:	b480      	push	{r7}
 8008200:	b083      	sub	sp, #12
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008212:	b480      	push	{r7}
 8008214:	b085      	sub	sp, #20
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008220:	2b01      	cmp	r3, #1
 8008222:	d101      	bne.n	8008228 <HAL_UARTEx_DisableFifoMode+0x16>
 8008224:	2302      	movs	r3, #2
 8008226:	e027      	b.n	8008278 <HAL_UARTEx_DisableFifoMode+0x66>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2224      	movs	r2, #36	; 0x24
 8008234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f022 0201 	bic.w	r2, r2, #1
 800824e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008256:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2220      	movs	r2, #32
 800826a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3714      	adds	r7, #20
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008294:	2b01      	cmp	r3, #1
 8008296:	d101      	bne.n	800829c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008298:	2302      	movs	r3, #2
 800829a:	e02d      	b.n	80082f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2224      	movs	r2, #36	; 0x24
 80082a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f022 0201 	bic.w	r2, r2, #1
 80082c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	430a      	orrs	r2, r1
 80082d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f84f 	bl	800837c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2220      	movs	r2, #32
 80082ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008310:	2b01      	cmp	r3, #1
 8008312:	d101      	bne.n	8008318 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008314:	2302      	movs	r3, #2
 8008316:	e02d      	b.n	8008374 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2224      	movs	r2, #36	; 0x24
 8008324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f022 0201 	bic.w	r2, r2, #1
 800833e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	430a      	orrs	r2, r1
 8008352:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f811 	bl	800837c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2220      	movs	r2, #32
 8008366:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800837c:	b480      	push	{r7}
 800837e:	b089      	sub	sp, #36	; 0x24
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008384:	4a2f      	ldr	r2, [pc, #188]	; (8008444 <UARTEx_SetNbDataToProcess+0xc8>)
 8008386:	f107 0314 	add.w	r3, r7, #20
 800838a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800838e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008392:	4a2d      	ldr	r2, [pc, #180]	; (8008448 <UARTEx_SetNbDataToProcess+0xcc>)
 8008394:	f107 030c 	add.w	r3, r7, #12
 8008398:	e892 0003 	ldmia.w	r2, {r0, r1}
 800839c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d108      	bne.n	80083ba <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80083b8:	e03d      	b.n	8008436 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80083ba:	2308      	movs	r3, #8
 80083bc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80083be:	2308      	movs	r3, #8
 80083c0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	0e5b      	lsrs	r3, r3, #25
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	f003 0307 	and.w	r3, r3, #7
 80083d0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	0f5b      	lsrs	r3, r3, #29
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	f003 0307 	and.w	r3, r3, #7
 80083e0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80083e2:	7fbb      	ldrb	r3, [r7, #30]
 80083e4:	7f3a      	ldrb	r2, [r7, #28]
 80083e6:	f107 0120 	add.w	r1, r7, #32
 80083ea:	440a      	add	r2, r1
 80083ec:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80083f0:	fb02 f303 	mul.w	r3, r2, r3
 80083f4:	7f3a      	ldrb	r2, [r7, #28]
 80083f6:	f107 0120 	add.w	r1, r7, #32
 80083fa:	440a      	add	r2, r1
 80083fc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008400:	fb93 f3f2 	sdiv	r3, r3, r2
 8008404:	b29a      	uxth	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800840c:	7ffb      	ldrb	r3, [r7, #31]
 800840e:	7f7a      	ldrb	r2, [r7, #29]
 8008410:	f107 0120 	add.w	r1, r7, #32
 8008414:	440a      	add	r2, r1
 8008416:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800841a:	fb02 f303 	mul.w	r3, r2, r3
 800841e:	7f7a      	ldrb	r2, [r7, #29]
 8008420:	f107 0120 	add.w	r1, r7, #32
 8008424:	440a      	add	r2, r1
 8008426:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800842a:	fb93 f3f2 	sdiv	r3, r3, r2
 800842e:	b29a      	uxth	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008436:	bf00      	nop
 8008438:	3724      	adds	r7, #36	; 0x24
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	0800c864 	.word	0x0800c864
 8008448:	0800c86c 	.word	0x0800c86c

0800844c <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b0cc      	sub	sp, #304	; 0x130
 8008450:	af00      	add	r7, sp, #0
 8008452:	4602      	mov	r2, r0
 8008454:	1dfb      	adds	r3, r7, #7
 8008456:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008458:	f107 0310 	add.w	r3, r7, #16
 800845c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008460:	f107 030f 	add.w	r3, r7, #15
 8008464:	2200      	movs	r2, #0
 8008466:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008468:	2300      	movs	r3, #0
 800846a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = htob(IO_Capability, 1);
 800846e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008472:	1dfa      	adds	r2, r7, #7
 8008474:	7812      	ldrb	r2, [r2, #0]
 8008476:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008478:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800847c:	3301      	adds	r3, #1
 800847e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008482:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008486:	2218      	movs	r2, #24
 8008488:	2100      	movs	r1, #0
 800848a:	4618      	mov	r0, r3
 800848c:	f001 fb5e 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008490:	233f      	movs	r3, #63	; 0x3f
 8008492:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8008496:	2385      	movs	r3, #133	; 0x85
 8008498:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800849c:	f107 0310 	add.w	r3, r7, #16
 80084a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80084a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80084ac:	f107 030f 	add.w	r3, r7, #15
 80084b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80084b4:	2301      	movs	r3, #1
 80084b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80084ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80084be:	2100      	movs	r1, #0
 80084c0:	4618      	mov	r0, r3
 80084c2:	f001 fa07 	bl	80098d4 <hci_send_req>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	da01      	bge.n	80084d0 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 80084cc:	23ff      	movs	r3, #255	; 0xff
 80084ce:	e009      	b.n	80084e4 <aci_gap_set_io_capability+0x98>
  if (status) 
 80084d0:	f107 030f 	add.w	r3, r7, #15
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <aci_gap_set_io_capability+0x96>
  {
    return status;
 80084da:	f107 030f 	add.w	r3, r7, #15
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	e000      	b.n	80084e4 <aci_gap_set_io_capability+0x98>
  }
  return BLE_STATUS_SUCCESS;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 80084ee:	b5b0      	push	{r4, r5, r7, lr}
 80084f0:	b0cc      	sub	sp, #304	; 0x130
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	4605      	mov	r5, r0
 80084f6:	460c      	mov	r4, r1
 80084f8:	4610      	mov	r0, r2
 80084fa:	4619      	mov	r1, r3
 80084fc:	1dfb      	adds	r3, r7, #7
 80084fe:	462a      	mov	r2, r5
 8008500:	701a      	strb	r2, [r3, #0]
 8008502:	1dbb      	adds	r3, r7, #6
 8008504:	4622      	mov	r2, r4
 8008506:	701a      	strb	r2, [r3, #0]
 8008508:	1d7b      	adds	r3, r7, #5
 800850a:	4602      	mov	r2, r0
 800850c:	701a      	strb	r2, [r3, #0]
 800850e:	1d3b      	adds	r3, r7, #4
 8008510:	460a      	mov	r2, r1
 8008512:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008514:	f107 0310 	add.w	r3, r7, #16
 8008518:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800851c:	f107 030f 	add.w	r3, r7, #15
 8008520:	2200      	movs	r2, #0
 8008522:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008524:	2300      	movs	r3, #0
 8008526:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800852a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800852e:	1dfa      	adds	r2, r7, #7
 8008530:	7812      	ldrb	r2, [r2, #0]
 8008532:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008534:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008538:	3301      	adds	r3, #1
 800853a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800853e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008542:	1dba      	adds	r2, r7, #6
 8008544:	7812      	ldrb	r2, [r2, #0]
 8008546:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008548:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800854c:	3301      	adds	r3, #1
 800854e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = htob(SC_Support, 1);
 8008552:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008556:	1d7a      	adds	r2, r7, #5
 8008558:	7812      	ldrb	r2, [r2, #0]
 800855a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800855c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008560:	3301      	adds	r3, #1
 8008562:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 8008566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800856a:	1d3a      	adds	r2, r7, #4
 800856c:	7812      	ldrb	r2, [r2, #0]
 800856e:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008570:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008574:	3301      	adds	r3, #1
 8008576:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800857a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800857e:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008582:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008584:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008588:	3301      	adds	r3, #1
 800858a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800858e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008592:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008596:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008598:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800859c:	3301      	adds	r3, #1
 800859e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 80085a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085a6:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80085aa:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80085ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085b0:	3301      	adds	r3, #1
 80085b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 80085b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085ba:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80085be:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80085c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085c6:	3304      	adds	r3, #4
 80085c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 80085cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085d0:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80085d4:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80085d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085da:	3301      	adds	r3, #1
 80085dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 80085e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80085e4:	2218      	movs	r2, #24
 80085e6:	2100      	movs	r1, #0
 80085e8:	4618      	mov	r0, r3
 80085ea:	f001 faaf 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x3f;
 80085ee:	233f      	movs	r3, #63	; 0x3f
 80085f0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80085f4:	2386      	movs	r3, #134	; 0x86
 80085f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80085fa:	f107 0310 	add.w	r3, r7, #16
 80085fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008602:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008606:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800860a:	f107 030f 	add.w	r3, r7, #15
 800860e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008612:	2301      	movs	r3, #1
 8008614:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008618:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800861c:	2100      	movs	r1, #0
 800861e:	4618      	mov	r0, r3
 8008620:	f001 f958 	bl	80098d4 <hci_send_req>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	da01      	bge.n	800862e <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800862a:	23ff      	movs	r3, #255	; 0xff
 800862c:	e009      	b.n	8008642 <aci_gap_set_authentication_requirement+0x154>
  if (status) 
 800862e:	f107 030f 	add.w	r3, r7, #15
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d003      	beq.n	8008640 <aci_gap_set_authentication_requirement+0x152>
  {
    return status;
 8008638:	f107 030f 	add.w	r3, r7, #15
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	e000      	b.n	8008642 <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008648:	46bd      	mov	sp, r7
 800864a:	bdb0      	pop	{r4, r5, r7, pc}

0800864c <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800864c:	b590      	push	{r4, r7, lr}
 800864e:	b0cd      	sub	sp, #308	; 0x134
 8008650:	af00      	add	r7, sp, #0
 8008652:	4604      	mov	r4, r0
 8008654:	4608      	mov	r0, r1
 8008656:	4611      	mov	r1, r2
 8008658:	463a      	mov	r2, r7
 800865a:	6013      	str	r3, [r2, #0]
 800865c:	1dfb      	adds	r3, r7, #7
 800865e:	4622      	mov	r2, r4
 8008660:	701a      	strb	r2, [r3, #0]
 8008662:	1dbb      	adds	r3, r7, #6
 8008664:	4602      	mov	r2, r0
 8008666:	701a      	strb	r2, [r3, #0]
 8008668:	1d7b      	adds	r3, r7, #5
 800866a:	460a      	mov	r2, r1
 800866c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800866e:	f107 0310 	add.w	r3, r7, #16
 8008672:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8008676:	f107 0308 	add.w	r3, r7, #8
 800867a:	2207      	movs	r2, #7
 800867c:	2100      	movs	r1, #0
 800867e:	4618      	mov	r0, r3
 8008680:	f001 fa64 	bl	8009b4c <Osal_MemSet>
  int index_input = 0;
 8008684:	2300      	movs	r3, #0
 8008686:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = htob(Role, 1);
 800868a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800868e:	1dfa      	adds	r2, r7, #7
 8008690:	7812      	ldrb	r2, [r2, #0]
 8008692:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008694:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008698:	3301      	adds	r3, #1
 800869a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800869e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086a2:	1dba      	adds	r2, r7, #6
 80086a4:	7812      	ldrb	r2, [r2, #0]
 80086a6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80086a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086ac:	3301      	adds	r3, #1
 80086ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 80086b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086b6:	1d7a      	adds	r2, r7, #5
 80086b8:	7812      	ldrb	r2, [r2, #0]
 80086ba:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80086bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086c0:	3301      	adds	r3, #1
 80086c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 80086c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80086ca:	2218      	movs	r2, #24
 80086cc:	2100      	movs	r1, #0
 80086ce:	4618      	mov	r0, r3
 80086d0:	f001 fa3c 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x3f;
 80086d4:	233f      	movs	r3, #63	; 0x3f
 80086d6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80086da:	238a      	movs	r3, #138	; 0x8a
 80086dc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80086e0:	f107 0310 	add.w	r3, r7, #16
 80086e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80086e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80086f0:	f107 0308 	add.w	r3, r7, #8
 80086f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80086f8:	2307      	movs	r3, #7
 80086fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80086fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008702:	2100      	movs	r1, #0
 8008704:	4618      	mov	r0, r3
 8008706:	f001 f8e5 	bl	80098d4 <hci_send_req>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	da01      	bge.n	8008714 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8008710:	23ff      	movs	r3, #255	; 0xff
 8008712:	e021      	b.n	8008758 <aci_gap_init+0x10c>
  if (resp.Status) 
 8008714:	f107 0308 	add.w	r3, r7, #8
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d003      	beq.n	8008726 <aci_gap_init+0xda>
  {
    return resp.Status;
 800871e:	f107 0308 	add.w	r3, r7, #8
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	e018      	b.n	8008758 <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8008726:	f107 0308 	add.w	r3, r7, #8
 800872a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800872e:	b29a      	uxth	r2, r3
 8008730:	463b      	mov	r3, r7
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8008736:	f107 0308 	add.w	r3, r7, #8
 800873a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800873e:	b29a      	uxth	r2, r3
 8008740:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008744:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8008746:	f107 0308 	add.w	r3, r7, #8
 800874a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800874e:	b29a      	uxth	r2, r3
 8008750:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008754:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800875e:	46bd      	mov	sp, r7
 8008760:	bd90      	pop	{r4, r7, pc}

08008762 <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b088      	sub	sp, #32
 8008766:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008768:	2300      	movs	r3, #0
 800876a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800876c:	f107 0308 	add.w	r3, r7, #8
 8008770:	2218      	movs	r2, #24
 8008772:	2100      	movs	r1, #0
 8008774:	4618      	mov	r0, r3
 8008776:	f001 f9e9 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x3f;
 800877a:	233f      	movs	r3, #63	; 0x3f
 800877c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800877e:	2392      	movs	r3, #146	; 0x92
 8008780:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008782:	1dfb      	adds	r3, r7, #7
 8008784:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008786:	2301      	movs	r3, #1
 8008788:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800878a:	f107 0308 	add.w	r3, r7, #8
 800878e:	2100      	movs	r1, #0
 8008790:	4618      	mov	r0, r3
 8008792:	f001 f89f 	bl	80098d4 <hci_send_req>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	da01      	bge.n	80087a0 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800879c:	23ff      	movs	r3, #255	; 0xff
 800879e:	e005      	b.n	80087ac <aci_gap_configure_whitelist+0x4a>
  if (status) 
 80087a0:	79fb      	ldrb	r3, [r7, #7]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d001      	beq.n	80087aa <aci_gap_configure_whitelist+0x48>
  {
    return status;
 80087a6:	79fb      	ldrb	r3, [r7, #7]
 80087a8:	e000      	b.n	80087ac <aci_gap_configure_whitelist+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3720      	adds	r7, #32
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <aci_gap_terminate>:

tBleStatus aci_gap_terminate(uint16_t Connection_Handle,
                             uint8_t Reason)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b0cc      	sub	sp, #304	; 0x130
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	4602      	mov	r2, r0
 80087bc:	1dbb      	adds	r3, r7, #6
 80087be:	801a      	strh	r2, [r3, #0]
 80087c0:	1d7b      	adds	r3, r7, #5
 80087c2:	460a      	mov	r2, r1
 80087c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_cp0 *cp0 = (aci_gap_terminate_cp0*)(cmd_buffer);
 80087c6:	f107 0310 	add.w	r3, r7, #16
 80087ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80087ce:	f107 030f 	add.w	r3, r7, #15
 80087d2:	2200      	movs	r2, #0
 80087d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 80087dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087e0:	1dba      	adds	r2, r7, #6
 80087e2:	8812      	ldrh	r2, [r2, #0]
 80087e4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80087e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087ea:	3302      	adds	r3, #2
 80087ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Reason = htob(Reason, 1);
 80087f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087f4:	1d7a      	adds	r2, r7, #5
 80087f6:	7812      	ldrb	r2, [r2, #0]
 80087f8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80087fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087fe:	3301      	adds	r3, #1
 8008800:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008804:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008808:	2218      	movs	r2, #24
 800880a:	2100      	movs	r1, #0
 800880c:	4618      	mov	r0, r3
 800880e:	f001 f99d 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008812:	233f      	movs	r3, #63	; 0x3f
 8008814:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x093;
 8008818:	2393      	movs	r3, #147	; 0x93
 800881a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800881e:	230f      	movs	r3, #15
 8008820:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008824:	f107 0310 	add.w	r3, r7, #16
 8008828:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800882c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008830:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008834:	f107 030f 	add.w	r3, r7, #15
 8008838:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800883c:	2301      	movs	r3, #1
 800883e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008842:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008846:	2100      	movs	r1, #0
 8008848:	4618      	mov	r0, r3
 800884a:	f001 f843 	bl	80098d4 <hci_send_req>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	da01      	bge.n	8008858 <aci_gap_terminate+0xa4>
    return BLE_STATUS_TIMEOUT;
 8008854:	23ff      	movs	r3, #255	; 0xff
 8008856:	e009      	b.n	800886c <aci_gap_terminate+0xb8>
  if (status) 
 8008858:	f107 030f 	add.w	r3, r7, #15
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d003      	beq.n	800886a <aci_gap_terminate+0xb6>
  {
    return status;
 8008862:	f107 030f 	add.w	r3, r7, #15
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	e000      	b.n	800886c <aci_gap_terminate+0xb8>
  }
  return BLE_STATUS_SUCCESS;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc(uint16_t LE_Scan_Interval,
                                                uint16_t LE_Scan_Window,
                                                uint8_t Own_Address_Type,
                                                uint8_t Filter_Duplicates)
{
 8008876:	b5b0      	push	{r4, r5, r7, lr}
 8008878:	b0cc      	sub	sp, #304	; 0x130
 800887a:	af00      	add	r7, sp, #0
 800887c:	4605      	mov	r5, r0
 800887e:	460c      	mov	r4, r1
 8008880:	4610      	mov	r0, r2
 8008882:	4619      	mov	r1, r3
 8008884:	1dbb      	adds	r3, r7, #6
 8008886:	462a      	mov	r2, r5
 8008888:	801a      	strh	r2, [r3, #0]
 800888a:	1d3b      	adds	r3, r7, #4
 800888c:	4622      	mov	r2, r4
 800888e:	801a      	strh	r2, [r3, #0]
 8008890:	1cfb      	adds	r3, r7, #3
 8008892:	4602      	mov	r2, r0
 8008894:	701a      	strb	r2, [r3, #0]
 8008896:	1cbb      	adds	r3, r7, #2
 8008898:	460a      	mov	r2, r1
 800889a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 800889c:	f107 0310 	add.w	r3, r7, #16
 80088a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80088a4:	f107 030f 	add.w	r3, r7, #15
 80088a8:	2200      	movs	r2, #0
 80088aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 80088b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088b6:	1dba      	adds	r2, r7, #6
 80088b8:	8812      	ldrh	r2, [r2, #0]
 80088ba:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80088bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088c0:	3302      	adds	r3, #2
 80088c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 80088c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ca:	1d3a      	adds	r2, r7, #4
 80088cc:	8812      	ldrh	r2, [r2, #0]
 80088ce:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80088d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088d4:	3302      	adds	r3, #2
 80088d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 80088da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088de:	1cfa      	adds	r2, r7, #3
 80088e0:	7812      	ldrb	r2, [r2, #0]
 80088e2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80088e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088e8:	3301      	adds	r3, #1
 80088ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = htob(Filter_Duplicates, 1);
 80088ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088f2:	1cba      	adds	r2, r7, #2
 80088f4:	7812      	ldrb	r2, [r2, #0]
 80088f6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80088f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088fc:	3301      	adds	r3, #1
 80088fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008902:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008906:	2218      	movs	r2, #24
 8008908:	2100      	movs	r1, #0
 800890a:	4618      	mov	r0, r3
 800890c:	f001 f91e 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008910:	233f      	movs	r3, #63	; 0x3f
 8008912:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 8008916:	2397      	movs	r3, #151	; 0x97
 8008918:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800891c:	230f      	movs	r3, #15
 800891e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008922:	f107 0310 	add.w	r3, r7, #16
 8008926:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800892a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800892e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008932:	f107 030f 	add.w	r3, r7, #15
 8008936:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800893a:	2301      	movs	r3, #1
 800893c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008940:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008944:	2100      	movs	r1, #0
 8008946:	4618      	mov	r0, r3
 8008948:	f000 ffc4 	bl	80098d4 <hci_send_req>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	da01      	bge.n	8008956 <aci_gap_start_general_discovery_proc+0xe0>
    return BLE_STATUS_TIMEOUT;
 8008952:	23ff      	movs	r3, #255	; 0xff
 8008954:	e009      	b.n	800896a <aci_gap_start_general_discovery_proc+0xf4>
  if (status) 
 8008956:	f107 030f 	add.w	r3, r7, #15
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d003      	beq.n	8008968 <aci_gap_start_general_discovery_proc+0xf2>
  {
    return status;
 8008960:	f107 030f 	add.w	r3, r7, #15
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	e000      	b.n	800896a <aci_gap_start_general_discovery_proc+0xf4>
  }
  return BLE_STATUS_SUCCESS;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008970:	46bd      	mov	sp, r7
 8008972:	bdb0      	pop	{r4, r5, r7, pc}

08008974 <aci_gap_create_connection>:
                                     uint16_t Conn_Interval_Max,
                                     uint16_t Conn_Latency,
                                     uint16_t Supervision_Timeout,
                                     uint16_t Minimum_CE_Length,
                                     uint16_t Maximum_CE_Length)
{
 8008974:	b590      	push	{r4, r7, lr}
 8008976:	b0cf      	sub	sp, #316	; 0x13c
 8008978:	af00      	add	r7, sp, #0
 800897a:	4604      	mov	r4, r0
 800897c:	4608      	mov	r0, r1
 800897e:	4611      	mov	r1, r2
 8008980:	1d3a      	adds	r2, r7, #4
 8008982:	6013      	str	r3, [r2, #0]
 8008984:	f107 030e 	add.w	r3, r7, #14
 8008988:	4622      	mov	r2, r4
 800898a:	801a      	strh	r2, [r3, #0]
 800898c:	f107 030c 	add.w	r3, r7, #12
 8008990:	4602      	mov	r2, r0
 8008992:	801a      	strh	r2, [r3, #0]
 8008994:	f107 030b 	add.w	r3, r7, #11
 8008998:	460a      	mov	r2, r1
 800899a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 800899c:	f107 0318 	add.w	r3, r7, #24
 80089a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 80089a4:	f107 0317 	add.w	r3, r7, #23
 80089a8:	2200      	movs	r2, #0
 80089aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80089ac:	2300      	movs	r3, #0
 80089ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 80089b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089b6:	f107 020e 	add.w	r2, r7, #14
 80089ba:	8812      	ldrh	r2, [r2, #0]
 80089bc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80089be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80089c2:	3302      	adds	r3, #2
 80089c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 80089c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089cc:	f107 020c 	add.w	r2, r7, #12
 80089d0:	8812      	ldrh	r2, [r2, #0]
 80089d2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80089d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80089d8:	3302      	adds	r3, #2
 80089da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 80089de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089e2:	f107 020b 	add.w	r2, r7, #11
 80089e6:	7812      	ldrb	r2, [r2, #0]
 80089e8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80089ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80089ee:	3301      	adds	r3, #1
 80089f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 80089f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089f8:	1d58      	adds	r0, r3, #5
 80089fa:	1d3b      	adds	r3, r7, #4
 80089fc:	2206      	movs	r2, #6
 80089fe:	6819      	ldr	r1, [r3, #0]
 8008a00:	f001 f894 	bl	8009b2c <Osal_MemCpy>
  index_input += 6;
 8008a04:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a08:	3306      	adds	r3, #6
 8008a0a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8008a0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a12:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008a16:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008a18:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 8008a22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a26:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8008a2a:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8008a2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a30:	3302      	adds	r3, #2
 8008a32:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 8008a36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a3a:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 8008a3e:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 8008a40:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a44:	3302      	adds	r3, #2
 8008a46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Latency = htob(Conn_Latency, 2);
 8008a4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a4e:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 8008a52:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 8008a54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a58:	3302      	adds	r3, #2
 8008a5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Supervision_Timeout = htob(Supervision_Timeout, 2);
 8008a5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a62:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8008a66:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 8008a68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a6c:	3302      	adds	r3, #2
 8008a6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 8008a72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a76:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008a7a:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 8008a7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a80:	3302      	adds	r3, #2
 8008a82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 8008a86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a8a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008a8e:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 8008a90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a94:	3302      	adds	r3, #2
 8008a96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008a9a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008a9e:	2218      	movs	r2, #24
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f001 f852 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008aa8:	233f      	movs	r3, #63	; 0x3f
 8008aaa:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 8008aae:	239c      	movs	r3, #156	; 0x9c
 8008ab0:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8008ab4:	230f      	movs	r3, #15
 8008ab6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8008aba:	f107 0318 	add.w	r3, r7, #24
 8008abe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008ac2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008ac6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8008aca:	f107 0317 	add.w	r3, r7, #23
 8008ace:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8008ad8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008adc:	2100      	movs	r1, #0
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 fef8 	bl	80098d4 <hci_send_req>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	da01      	bge.n	8008aee <aci_gap_create_connection+0x17a>
    return BLE_STATUS_TIMEOUT;
 8008aea:	23ff      	movs	r3, #255	; 0xff
 8008aec:	e009      	b.n	8008b02 <aci_gap_create_connection+0x18e>
  if (status) 
 8008aee:	f107 0317 	add.w	r3, r7, #23
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d003      	beq.n	8008b00 <aci_gap_create_connection+0x18c>
  {
    return status;
 8008af8:	f107 0317 	add.w	r3, r7, #23
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	e000      	b.n	8008b02 <aci_gap_create_connection+0x18e>
  }
  return BLE_STATUS_SUCCESS;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd90      	pop	{r4, r7, pc}

08008b0c <aci_gap_terminate_gap_proc>:

tBleStatus aci_gap_terminate_gap_proc(uint8_t Procedure_Code)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b0cc      	sub	sp, #304	; 0x130
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	4602      	mov	r2, r0
 8008b14:	1dfb      	adds	r3, r7, #7
 8008b16:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 8008b18:	f107 0310 	add.w	r3, r7, #16
 8008b1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008b20:	f107 030f 	add.w	r3, r7, #15
 8008b24:	2200      	movs	r2, #0
 8008b26:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Procedure_Code = htob(Procedure_Code, 1);
 8008b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b32:	1dfa      	adds	r2, r7, #7
 8008b34:	7812      	ldrb	r2, [r2, #0]
 8008b36:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008b38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008b42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b46:	2218      	movs	r2, #24
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 fffe 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b50:	233f      	movs	r3, #63	; 0x3f
 8008b52:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 8008b56:	239d      	movs	r3, #157	; 0x9d
 8008b58:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b5c:	f107 0310 	add.w	r3, r7, #16
 8008b60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008b6c:	f107 030f 	add.w	r3, r7, #15
 8008b70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008b74:	2301      	movs	r3, #1
 8008b76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008b7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b7e:	2100      	movs	r1, #0
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 fea7 	bl	80098d4 <hci_send_req>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	da01      	bge.n	8008b90 <aci_gap_terminate_gap_proc+0x84>
    return BLE_STATUS_TIMEOUT;
 8008b8c:	23ff      	movs	r3, #255	; 0xff
 8008b8e:	e009      	b.n	8008ba4 <aci_gap_terminate_gap_proc+0x98>
  if (status) 
 8008b90:	f107 030f 	add.w	r3, r7, #15
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <aci_gap_terminate_gap_proc+0x96>
  {
    return status;
 8008b9a:	f107 030f 	add.w	r3, r7, #15
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	e000      	b.n	8008ba4 <aci_gap_terminate_gap_proc+0x98>
  }
  return BLE_STATUS_SUCCESS;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b088      	sub	sp, #32
 8008bb2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008bb8:	f107 0308 	add.w	r3, r7, #8
 8008bbc:	2218      	movs	r2, #24
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 ffc3 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008bc6:	233f      	movs	r3, #63	; 0x3f
 8008bc8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008bca:	f240 1301 	movw	r3, #257	; 0x101
 8008bce:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008bd0:	1dfb      	adds	r3, r7, #7
 8008bd2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8008bd8:	f107 0308 	add.w	r3, r7, #8
 8008bdc:	2100      	movs	r1, #0
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 fe78 	bl	80098d4 <hci_send_req>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	da01      	bge.n	8008bee <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008bea:	23ff      	movs	r3, #255	; 0xff
 8008bec:	e005      	b.n	8008bfa <aci_gatt_init+0x4c>
  if (status) 
 8008bee:	79fb      	ldrb	r3, [r7, #7]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <aci_gatt_init+0x4a>
  {
    return status;
 8008bf4:	79fb      	ldrb	r3, [r7, #7]
 8008bf6:	e000      	b.n	8008bfa <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3720      	adds	r7, #32
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8008c02:	b5b0      	push	{r4, r5, r7, lr}
 8008c04:	b0cc      	sub	sp, #304	; 0x130
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	4605      	mov	r5, r0
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4619      	mov	r1, r3
 8008c10:	1dbb      	adds	r3, r7, #6
 8008c12:	462a      	mov	r2, r5
 8008c14:	801a      	strh	r2, [r3, #0]
 8008c16:	1d3b      	adds	r3, r7, #4
 8008c18:	4622      	mov	r2, r4
 8008c1a:	801a      	strh	r2, [r3, #0]
 8008c1c:	1cfb      	adds	r3, r7, #3
 8008c1e:	4602      	mov	r2, r0
 8008c20:	701a      	strb	r2, [r3, #0]
 8008c22:	1cbb      	adds	r3, r7, #2
 8008c24:	460a      	mov	r2, r1
 8008c26:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008c28:	f107 0310 	add.w	r3, r7, #16
 8008c2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008c30:	f107 030f 	add.w	r3, r7, #15
 8008c34:	2200      	movs	r2, #0
 8008c36:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = htob(Service_Handle, 2);
 8008c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c42:	1dba      	adds	r2, r7, #6
 8008c44:	8812      	ldrh	r2, [r2, #0]
 8008c46:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008c48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c4c:	3302      	adds	r3, #2
 8008c4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 8008c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c56:	1d3a      	adds	r2, r7, #4
 8008c58:	8812      	ldrh	r2, [r2, #0]
 8008c5a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008c5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c60:	3302      	adds	r3, #2
 8008c62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = htob(Val_Offset, 1);
 8008c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c6a:	1cfa      	adds	r2, r7, #3
 8008c6c:	7812      	ldrb	r2, [r2, #0]
 8008c6e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008c70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c74:	3301      	adds	r3, #1
 8008c76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8008c7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c7e:	1cba      	adds	r2, r7, #2
 8008c80:	7812      	ldrb	r2, [r2, #0]
 8008c82:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008c84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c88:	3301      	adds	r3, #1
 8008c8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 8008c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c92:	1d98      	adds	r0, r3, #6
 8008c94:	1cbb      	adds	r3, r7, #2
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	461a      	mov	r2, r3
 8008c9a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008c9e:	f000 ff45 	bl	8009b2c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8008ca2:	1cbb      	adds	r3, r7, #2
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008caa:	4413      	add	r3, r2
 8008cac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008cb0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cb4:	2218      	movs	r2, #24
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 ff47 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008cbe:	233f      	movs	r3, #63	; 0x3f
 8008cc0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8008cc4:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008cc8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008ccc:	f107 0310 	add.w	r3, r7, #16
 8008cd0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008cd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cd8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008cdc:	f107 030f 	add.w	r3, r7, #15
 8008ce0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008cea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cee:	2100      	movs	r1, #0
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f000 fdef 	bl	80098d4 <hci_send_req>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	da01      	bge.n	8008d00 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8008cfc:	23ff      	movs	r3, #255	; 0xff
 8008cfe:	e009      	b.n	8008d14 <aci_gatt_update_char_value+0x112>
  if (status) 
 8008d00:	f107 030f 	add.w	r3, r7, #15
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d003      	beq.n	8008d12 <aci_gatt_update_char_value+0x110>
  {
    return status;
 8008d0a:	f107 030f 	add.w	r3, r7, #15
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	e000      	b.n	8008d14 <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bdb0      	pop	{r4, r5, r7, pc}

08008d1e <aci_gatt_disc_all_primary_services>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gatt_disc_all_primary_services(uint16_t Connection_Handle)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b0cc      	sub	sp, #304	; 0x130
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	4602      	mov	r2, r0
 8008d26:	1dbb      	adds	r3, r7, #6
 8008d28:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 8008d2a:	f107 0310 	add.w	r3, r7, #16
 8008d2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008d32:	f107 030f 	add.w	r3, r7, #15
 8008d36:	2200      	movs	r2, #0
 8008d38:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8008d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d44:	1dba      	adds	r2, r7, #6
 8008d46:	8812      	ldrh	r2, [r2, #0]
 8008d48:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008d4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d4e:	3302      	adds	r3, #2
 8008d50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008d54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d58:	2218      	movs	r2, #24
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 fef5 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d62:	233f      	movs	r3, #63	; 0x3f
 8008d64:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 8008d68:	f44f 7389 	mov.w	r3, #274	; 0x112
 8008d6c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008d70:	230f      	movs	r3, #15
 8008d72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008d76:	f107 0310 	add.w	r3, r7, #16
 8008d7a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008d7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d82:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008d86:	f107 030f 	add.w	r3, r7, #15
 8008d8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008d94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d98:	2100      	movs	r1, #0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 fd9a 	bl	80098d4 <hci_send_req>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	da01      	bge.n	8008daa <aci_gatt_disc_all_primary_services+0x8c>
    return BLE_STATUS_TIMEOUT;
 8008da6:	23ff      	movs	r3, #255	; 0xff
 8008da8:	e009      	b.n	8008dbe <aci_gatt_disc_all_primary_services+0xa0>
  if (status) 
 8008daa:	f107 030f 	add.w	r3, r7, #15
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d003      	beq.n	8008dbc <aci_gatt_disc_all_primary_services+0x9e>
  {
    return status;
 8008db4:	f107 030f 	add.w	r3, r7, #15
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	e000      	b.n	8008dbe <aci_gatt_disc_all_primary_services+0xa0>
  }
  return BLE_STATUS_SUCCESS;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service(uint16_t Connection_Handle,
                                             uint16_t Start_Handle,
                                             uint16_t End_Handle)
{
 8008dc8:	b590      	push	{r4, r7, lr}
 8008dca:	b0cd      	sub	sp, #308	; 0x134
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	4604      	mov	r4, r0
 8008dd0:	4608      	mov	r0, r1
 8008dd2:	4611      	mov	r1, r2
 8008dd4:	1dbb      	adds	r3, r7, #6
 8008dd6:	4622      	mov	r2, r4
 8008dd8:	801a      	strh	r2, [r3, #0]
 8008dda:	1d3b      	adds	r3, r7, #4
 8008ddc:	4602      	mov	r2, r0
 8008dde:	801a      	strh	r2, [r3, #0]
 8008de0:	1cbb      	adds	r3, r7, #2
 8008de2:	460a      	mov	r2, r1
 8008de4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 8008de6:	f107 0310 	add.w	r3, r7, #16
 8008dea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008dee:	f107 030f 	add.w	r3, r7, #15
 8008df2:	2200      	movs	r2, #0
 8008df4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008df6:	2300      	movs	r3, #0
 8008df8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8008dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e00:	1dba      	adds	r2, r7, #6
 8008e02:	8812      	ldrh	r2, [r2, #0]
 8008e04:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008e06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e0a:	3302      	adds	r3, #2
 8008e0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = htob(Start_Handle, 2);
 8008e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e14:	1d3a      	adds	r2, r7, #4
 8008e16:	8812      	ldrh	r2, [r2, #0]
 8008e18:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008e1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e1e:	3302      	adds	r3, #2
 8008e20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = htob(End_Handle, 2);
 8008e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e28:	1cba      	adds	r2, r7, #2
 8008e2a:	8812      	ldrh	r2, [r2, #0]
 8008e2c:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8008e2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e32:	3302      	adds	r3, #2
 8008e34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008e38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e3c:	2218      	movs	r2, #24
 8008e3e:	2100      	movs	r1, #0
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 fe83 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e46:	233f      	movs	r3, #63	; 0x3f
 8008e48:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 8008e4c:	f240 1315 	movw	r3, #277	; 0x115
 8008e50:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008e54:	230f      	movs	r3, #15
 8008e56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008e5a:	f107 0310 	add.w	r3, r7, #16
 8008e5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008e62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008e6a:	f107 030f 	add.w	r3, r7, #15
 8008e6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008e72:	2301      	movs	r3, #1
 8008e74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008e78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f000 fd28 	bl	80098d4 <hci_send_req>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	da01      	bge.n	8008e8e <aci_gatt_disc_all_char_of_service+0xc6>
    return BLE_STATUS_TIMEOUT;
 8008e8a:	23ff      	movs	r3, #255	; 0xff
 8008e8c:	e009      	b.n	8008ea2 <aci_gatt_disc_all_char_of_service+0xda>
  if (status) 
 8008e8e:	f107 030f 	add.w	r3, r7, #15
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d003      	beq.n	8008ea0 <aci_gatt_disc_all_char_of_service+0xd8>
  {
    return status;
 8008e98:	f107 030f 	add.w	r3, r7, #15
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	e000      	b.n	8008ea2 <aci_gatt_disc_all_char_of_service+0xda>
  }
  return BLE_STATUS_SUCCESS;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd90      	pop	{r4, r7, pc}

08008eac <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc(uint16_t Connection_Handle,
                                       uint16_t Char_Handle,
                                       uint16_t End_Handle)
{
 8008eac:	b590      	push	{r4, r7, lr}
 8008eae:	b0cd      	sub	sp, #308	; 0x134
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	4608      	mov	r0, r1
 8008eb6:	4611      	mov	r1, r2
 8008eb8:	1dbb      	adds	r3, r7, #6
 8008eba:	4622      	mov	r2, r4
 8008ebc:	801a      	strh	r2, [r3, #0]
 8008ebe:	1d3b      	adds	r3, r7, #4
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	801a      	strh	r2, [r3, #0]
 8008ec4:	1cbb      	adds	r3, r7, #2
 8008ec6:	460a      	mov	r2, r1
 8008ec8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 8008eca:	f107 0310 	add.w	r3, r7, #16
 8008ece:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008ed2:	f107 030f 	add.w	r3, r7, #15
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008eda:	2300      	movs	r3, #0
 8008edc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8008ee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ee4:	1dba      	adds	r2, r7, #6
 8008ee6:	8812      	ldrh	r2, [r2, #0]
 8008ee8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008eea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008eee:	3302      	adds	r3, #2
 8008ef0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 8008ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ef8:	1d3a      	adds	r2, r7, #4
 8008efa:	8812      	ldrh	r2, [r2, #0]
 8008efc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008efe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f02:	3302      	adds	r3, #2
 8008f04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = htob(End_Handle, 2);
 8008f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f0c:	1cba      	adds	r2, r7, #2
 8008f0e:	8812      	ldrh	r2, [r2, #0]
 8008f10:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8008f12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f16:	3302      	adds	r3, #2
 8008f18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008f1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f20:	2218      	movs	r2, #24
 8008f22:	2100      	movs	r1, #0
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 fe11 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f2a:	233f      	movs	r3, #63	; 0x3f
 8008f2c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 8008f30:	f240 1317 	movw	r3, #279	; 0x117
 8008f34:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008f38:	230f      	movs	r3, #15
 8008f3a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008f3e:	f107 0310 	add.w	r3, r7, #16
 8008f42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008f46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008f4e:	f107 030f 	add.w	r3, r7, #15
 8008f52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008f56:	2301      	movs	r3, #1
 8008f58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008f5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f60:	2100      	movs	r1, #0
 8008f62:	4618      	mov	r0, r3
 8008f64:	f000 fcb6 	bl	80098d4 <hci_send_req>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	da01      	bge.n	8008f72 <aci_gatt_disc_all_char_desc+0xc6>
    return BLE_STATUS_TIMEOUT;
 8008f6e:	23ff      	movs	r3, #255	; 0xff
 8008f70:	e009      	b.n	8008f86 <aci_gatt_disc_all_char_desc+0xda>
  if (status) 
 8008f72:	f107 030f 	add.w	r3, r7, #15
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d003      	beq.n	8008f84 <aci_gatt_disc_all_char_desc+0xd8>
  {
    return status;
 8008f7c:	f107 030f 	add.w	r3, r7, #15
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	e000      	b.n	8008f86 <aci_gatt_disc_all_char_desc+0xda>
  }
  return BLE_STATUS_SUCCESS;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd90      	pop	{r4, r7, pc}

08008f90 <aci_gatt_write_char_value>:

tBleStatus aci_gatt_write_char_value(uint16_t Connection_Handle,
                                     uint16_t Attr_Handle,
                                     uint8_t Attribute_Val_Length,
                                     uint8_t Attribute_Val[])
{
 8008f90:	b590      	push	{r4, r7, lr}
 8008f92:	b0cf      	sub	sp, #316	; 0x13c
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	4604      	mov	r4, r0
 8008f98:	4608      	mov	r0, r1
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	1d3a      	adds	r2, r7, #4
 8008f9e:	6013      	str	r3, [r2, #0]
 8008fa0:	f107 030e 	add.w	r3, r7, #14
 8008fa4:	4622      	mov	r2, r4
 8008fa6:	801a      	strh	r2, [r3, #0]
 8008fa8:	f107 030c 	add.w	r3, r7, #12
 8008fac:	4602      	mov	r2, r0
 8008fae:	801a      	strh	r2, [r3, #0]
 8008fb0:	f107 030b 	add.w	r3, r7, #11
 8008fb4:	460a      	mov	r2, r1
 8008fb6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_value_cp0 *cp0 = (aci_gatt_write_char_value_cp0*)(cmd_buffer);
 8008fb8:	f107 0318 	add.w	r3, r7, #24
 8008fbc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8008fc0:	f107 0317 	add.w	r3, r7, #23
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8008fce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008fd2:	f107 020e 	add.w	r2, r7, #14
 8008fd6:	8812      	ldrh	r2, [r2, #0]
 8008fd8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008fda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008fde:	3302      	adds	r3, #2
 8008fe0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 8008fe4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008fe8:	f107 020c 	add.w	r2, r7, #12
 8008fec:	8812      	ldrh	r2, [r2, #0]
 8008fee:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008ff0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008ff4:	3302      	adds	r3, #2
 8008ff6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 8008ffa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ffe:	f107 020b 	add.w	r2, r7, #11
 8009002:	7812      	ldrb	r2, [r2, #0]
 8009004:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009006:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800900a:	3301      	adds	r3, #1
 800900c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
 8009010:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009014:	1d58      	adds	r0, r3, #5
 8009016:	f107 030b 	add.w	r3, r7, #11
 800901a:	781a      	ldrb	r2, [r3, #0]
 800901c:	1d3b      	adds	r3, r7, #4
 800901e:	6819      	ldr	r1, [r3, #0]
 8009020:	f000 fd84 	bl	8009b2c <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 8009024:	f107 030b 	add.w	r3, r7, #11
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800902e:	4413      	add	r3, r2
 8009030:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009034:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009038:	2218      	movs	r2, #24
 800903a:	2100      	movs	r1, #0
 800903c:	4618      	mov	r0, r3
 800903e:	f000 fd85 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009042:	233f      	movs	r3, #63	; 0x3f
 8009044:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x11c;
 8009048:	f44f 738e 	mov.w	r3, #284	; 0x11c
 800904c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8009050:	230f      	movs	r3, #15
 8009052:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8009056:	f107 0318 	add.w	r3, r7, #24
 800905a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800905e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009062:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8009066:	f107 0317 	add.w	r3, r7, #23
 800906a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800906e:	2301      	movs	r3, #1
 8009070:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8009074:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009078:	2100      	movs	r1, #0
 800907a:	4618      	mov	r0, r3
 800907c:	f000 fc2a 	bl	80098d4 <hci_send_req>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	da01      	bge.n	800908a <aci_gatt_write_char_value+0xfa>
    return BLE_STATUS_TIMEOUT;
 8009086:	23ff      	movs	r3, #255	; 0xff
 8009088:	e009      	b.n	800909e <aci_gatt_write_char_value+0x10e>
  if (status) 
 800908a:	f107 0317 	add.w	r3, r7, #23
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d003      	beq.n	800909c <aci_gatt_write_char_value+0x10c>
  {
    return status;
 8009094:	f107 0317 	add.w	r3, r7, #23
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	e000      	b.n	800909e <aci_gatt_write_char_value+0x10e>
  }
  return BLE_STATUS_SUCCESS;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd90      	pop	{r4, r7, pc}

080090a8 <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc(uint16_t Connection_Handle,
                                    uint16_t Attr_Handle,
                                    uint8_t Attribute_Val_Length,
                                    uint8_t Attribute_Val[])
{
 80090a8:	b590      	push	{r4, r7, lr}
 80090aa:	b0cf      	sub	sp, #316	; 0x13c
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	4604      	mov	r4, r0
 80090b0:	4608      	mov	r0, r1
 80090b2:	4611      	mov	r1, r2
 80090b4:	1d3a      	adds	r2, r7, #4
 80090b6:	6013      	str	r3, [r2, #0]
 80090b8:	f107 030e 	add.w	r3, r7, #14
 80090bc:	4622      	mov	r2, r4
 80090be:	801a      	strh	r2, [r3, #0]
 80090c0:	f107 030c 	add.w	r3, r7, #12
 80090c4:	4602      	mov	r2, r0
 80090c6:	801a      	strh	r2, [r3, #0]
 80090c8:	f107 030b 	add.w	r3, r7, #11
 80090cc:	460a      	mov	r2, r1
 80090ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 80090d0:	f107 0318 	add.w	r3, r7, #24
 80090d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 80090d8:	f107 0317 	add.w	r3, r7, #23
 80090dc:	2200      	movs	r2, #0
 80090de:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80090e0:	2300      	movs	r3, #0
 80090e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 80090e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090ea:	f107 020e 	add.w	r2, r7, #14
 80090ee:	8812      	ldrh	r2, [r2, #0]
 80090f0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80090f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090f6:	3302      	adds	r3, #2
 80090f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 80090fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009100:	f107 020c 	add.w	r2, r7, #12
 8009104:	8812      	ldrh	r2, [r2, #0]
 8009106:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009108:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800910c:	3302      	adds	r3, #2
 800910e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 8009112:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009116:	f107 020b 	add.w	r2, r7, #11
 800911a:	7812      	ldrb	r2, [r2, #0]
 800911c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800911e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009122:	3301      	adds	r3, #1
 8009124:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
 8009128:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800912c:	1d58      	adds	r0, r3, #5
 800912e:	f107 030b 	add.w	r3, r7, #11
 8009132:	781a      	ldrb	r2, [r3, #0]
 8009134:	1d3b      	adds	r3, r7, #4
 8009136:	6819      	ldr	r1, [r3, #0]
 8009138:	f000 fcf8 	bl	8009b2c <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 800913c:	f107 030b 	add.w	r3, r7, #11
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009146:	4413      	add	r3, r2
 8009148:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 800914c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009150:	2218      	movs	r2, #24
 8009152:	2100      	movs	r1, #0
 8009154:	4618      	mov	r0, r3
 8009156:	f000 fcf9 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x3f;
 800915a:	233f      	movs	r3, #63	; 0x3f
 800915c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 8009160:	f240 1321 	movw	r3, #289	; 0x121
 8009164:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8009168:	230f      	movs	r3, #15
 800916a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800916e:	f107 0318 	add.w	r3, r7, #24
 8009172:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009176:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800917a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800917e:	f107 0317 	add.w	r3, r7, #23
 8009182:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8009186:	2301      	movs	r3, #1
 8009188:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800918c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009190:	2100      	movs	r1, #0
 8009192:	4618      	mov	r0, r3
 8009194:	f000 fb9e 	bl	80098d4 <hci_send_req>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	da01      	bge.n	80091a2 <aci_gatt_write_char_desc+0xfa>
    return BLE_STATUS_TIMEOUT;
 800919e:	23ff      	movs	r3, #255	; 0xff
 80091a0:	e009      	b.n	80091b6 <aci_gatt_write_char_desc+0x10e>
  if (status) 
 80091a2:	f107 0317 	add.w	r3, r7, #23
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d003      	beq.n	80091b4 <aci_gatt_write_char_desc+0x10c>
  {
    return status;
 80091ac:	f107 0317 	add.w	r3, r7, #23
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	e000      	b.n	80091b6 <aci_gatt_write_char_desc+0x10e>
  }
  return BLE_STATUS_SUCCESS;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd90      	pop	{r4, r7, pc}

080091c0 <aci_gatt_write_without_resp>:

tBleStatus aci_gatt_write_without_resp(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint8_t Attribute_Val_Length,
                                       uint8_t Attribute_Val[])
{
 80091c0:	b590      	push	{r4, r7, lr}
 80091c2:	b0cf      	sub	sp, #316	; 0x13c
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	4604      	mov	r4, r0
 80091c8:	4608      	mov	r0, r1
 80091ca:	4611      	mov	r1, r2
 80091cc:	1d3a      	adds	r2, r7, #4
 80091ce:	6013      	str	r3, [r2, #0]
 80091d0:	f107 030e 	add.w	r3, r7, #14
 80091d4:	4622      	mov	r2, r4
 80091d6:	801a      	strh	r2, [r3, #0]
 80091d8:	f107 030c 	add.w	r3, r7, #12
 80091dc:	4602      	mov	r2, r0
 80091de:	801a      	strh	r2, [r3, #0]
 80091e0:	f107 030b 	add.w	r3, r7, #11
 80091e4:	460a      	mov	r2, r1
 80091e6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_without_resp_cp0 *cp0 = (aci_gatt_write_without_resp_cp0*)(cmd_buffer);
 80091e8:	f107 0318 	add.w	r3, r7, #24
 80091ec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 80091f0:	f107 0317 	add.w	r3, r7, #23
 80091f4:	2200      	movs	r2, #0
 80091f6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80091f8:	2300      	movs	r3, #0
 80091fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 80091fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009202:	f107 020e 	add.w	r2, r7, #14
 8009206:	8812      	ldrh	r2, [r2, #0]
 8009208:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800920a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800920e:	3302      	adds	r3, #2
 8009210:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 8009214:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009218:	f107 020c 	add.w	r2, r7, #12
 800921c:	8812      	ldrh	r2, [r2, #0]
 800921e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009220:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009224:	3302      	adds	r3, #2
 8009226:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 800922a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800922e:	f107 020b 	add.w	r2, r7, #11
 8009232:	7812      	ldrb	r2, [r2, #0]
 8009234:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009236:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800923a:	3301      	adds	r3, #1
 800923c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
 8009240:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009244:	1d58      	adds	r0, r3, #5
 8009246:	f107 030b 	add.w	r3, r7, #11
 800924a:	781a      	ldrb	r2, [r3, #0]
 800924c:	1d3b      	adds	r3, r7, #4
 800924e:	6819      	ldr	r1, [r3, #0]
 8009250:	f000 fc6c 	bl	8009b2c <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 8009254:	f107 030b 	add.w	r3, r7, #11
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800925e:	4413      	add	r3, r2
 8009260:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009264:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009268:	2218      	movs	r2, #24
 800926a:	2100      	movs	r1, #0
 800926c:	4618      	mov	r0, r3
 800926e:	f000 fc6d 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009272:	233f      	movs	r3, #63	; 0x3f
 8009274:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x123;
 8009278:	f240 1323 	movw	r3, #291	; 0x123
 800927c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009280:	f107 0318 	add.w	r3, r7, #24
 8009284:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009288:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800928c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8009290:	f107 0317 	add.w	r3, r7, #23
 8009294:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8009298:	2301      	movs	r3, #1
 800929a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800929e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80092a2:	2100      	movs	r1, #0
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 fb15 	bl	80098d4 <hci_send_req>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	da01      	bge.n	80092b4 <aci_gatt_write_without_resp+0xf4>
    return BLE_STATUS_TIMEOUT;
 80092b0:	23ff      	movs	r3, #255	; 0xff
 80092b2:	e009      	b.n	80092c8 <aci_gatt_write_without_resp+0x108>
  if (status) 
 80092b4:	f107 0317 	add.w	r3, r7, #23
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d003      	beq.n	80092c6 <aci_gatt_write_without_resp+0x106>
  {
    return status;
 80092be:	f107 0317 	add.w	r3, r7, #23
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	e000      	b.n	80092c8 <aci_gatt_write_without_resp+0x108>
  }
  return BLE_STATUS_SUCCESS;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd90      	pop	{r4, r7, pc}

080092d2 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b0cc      	sub	sp, #304	; 0x130
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	463b      	mov	r3, r7
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	1dfb      	adds	r3, r7, #7
 80092de:	4602      	mov	r2, r0
 80092e0:	701a      	strb	r2, [r3, #0]
 80092e2:	1dbb      	adds	r3, r7, #6
 80092e4:	460a      	mov	r2, r1
 80092e6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80092e8:	f107 0310 	add.w	r3, r7, #16
 80092ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80092f0:	f107 030f 	add.w	r3, r7, #15
 80092f4:	2200      	movs	r2, #0
 80092f6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = htob(Offset, 1);
 80092fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009302:	1dfa      	adds	r2, r7, #7
 8009304:	7812      	ldrb	r2, [r2, #0]
 8009306:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009308:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800930c:	3301      	adds	r3, #1
 800930e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = htob(Length, 1);
 8009312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009316:	1dba      	adds	r2, r7, #6
 8009318:	7812      	ldrb	r2, [r2, #0]
 800931a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800931c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009320:	3301      	adds	r3, #1
 8009322:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 8009326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800932a:	1c98      	adds	r0, r3, #2
 800932c:	1dbb      	adds	r3, r7, #6
 800932e:	781a      	ldrb	r2, [r3, #0]
 8009330:	463b      	mov	r3, r7
 8009332:	6819      	ldr	r1, [r3, #0]
 8009334:	f000 fbfa 	bl	8009b2c <Osal_MemCpy>
  index_input += Length;
 8009338:	1dbb      	adds	r3, r7, #6
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009340:	4413      	add	r3, r2
 8009342:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009346:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800934a:	2218      	movs	r2, #24
 800934c:	2100      	movs	r1, #0
 800934e:	4618      	mov	r0, r3
 8009350:	f000 fbfc 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009354:	233f      	movs	r3, #63	; 0x3f
 8009356:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800935a:	230c      	movs	r3, #12
 800935c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009360:	f107 0310 	add.w	r3, r7, #16
 8009364:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009368:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800936c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009370:	f107 030f 	add.w	r3, r7, #15
 8009374:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009378:	2301      	movs	r3, #1
 800937a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800937e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009382:	2100      	movs	r1, #0
 8009384:	4618      	mov	r0, r3
 8009386:	f000 faa5 	bl	80098d4 <hci_send_req>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	da01      	bge.n	8009394 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8009390:	23ff      	movs	r3, #255	; 0xff
 8009392:	e009      	b.n	80093a8 <aci_hal_write_config_data+0xd6>
  if (status) 
 8009394:	f107 030f 	add.w	r3, r7, #15
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d003      	beq.n	80093a6 <aci_hal_write_config_data+0xd4>
  {
    return status;
 800939e:	f107 030f 	add.w	r3, r7, #15
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	e000      	b.n	80093a8 <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b0cc      	sub	sp, #304	; 0x130
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	4602      	mov	r2, r0
 80093ba:	1dfb      	adds	r3, r7, #7
 80093bc:	701a      	strb	r2, [r3, #0]
 80093be:	1dbb      	adds	r3, r7, #6
 80093c0:	460a      	mov	r2, r1
 80093c2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80093c4:	f107 0310 	add.w	r3, r7, #16
 80093c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80093cc:	f107 030f 	add.w	r3, r7, #15
 80093d0:	2200      	movs	r2, #0
 80093d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80093d4:	2300      	movs	r3, #0
 80093d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = htob(En_High_Power, 1);
 80093da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093de:	1dfa      	adds	r2, r7, #7
 80093e0:	7812      	ldrb	r2, [r2, #0]
 80093e2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80093e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093e8:	3301      	adds	r3, #1
 80093ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = htob(PA_Level, 1);
 80093ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093f2:	1dba      	adds	r2, r7, #6
 80093f4:	7812      	ldrb	r2, [r2, #0]
 80093f6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80093f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093fc:	3301      	adds	r3, #1
 80093fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009402:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009406:	2218      	movs	r2, #24
 8009408:	2100      	movs	r1, #0
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fb9e 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009410:	233f      	movs	r3, #63	; 0x3f
 8009412:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009416:	230f      	movs	r3, #15
 8009418:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800941c:	f107 0310 	add.w	r3, r7, #16
 8009420:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009424:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009428:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800942c:	f107 030f 	add.w	r3, r7, #15
 8009430:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009434:	2301      	movs	r3, #1
 8009436:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800943a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800943e:	2100      	movs	r1, #0
 8009440:	4618      	mov	r0, r3
 8009442:	f000 fa47 	bl	80098d4 <hci_send_req>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	da01      	bge.n	8009450 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800944c:	23ff      	movs	r3, #255	; 0xff
 800944e:	e009      	b.n	8009464 <aci_hal_set_tx_power_level+0xb2>
  if (status) 
 8009450:	f107 030f 	add.w	r3, r7, #15
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d003      	beq.n	8009462 <aci_hal_set_tx_power_level+0xb0>
  {
    return status;
 800945a:	f107 030f 	add.w	r3, r7, #15
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	e000      	b.n	8009464 <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b0cc      	sub	sp, #304	; 0x130
 8009472:	af00      	add	r7, sp, #0
 8009474:	4602      	mov	r2, r0
 8009476:	1dbb      	adds	r3, r7, #6
 8009478:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800947a:	f107 0310 	add.w	r3, r7, #16
 800947e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009482:	f107 030f 	add.w	r3, r7, #15
 8009486:	2200      	movs	r2, #0
 8009488:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 8009490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009494:	1dba      	adds	r2, r7, #6
 8009496:	8812      	ldrh	r2, [r2, #0]
 8009498:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800949a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800949e:	3302      	adds	r3, #2
 80094a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 80094a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094a8:	2218      	movs	r2, #24
 80094aa:	2100      	movs	r1, #0
 80094ac:	4618      	mov	r0, r3
 80094ae:	f000 fb4d 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x3f;
 80094b2:	233f      	movs	r3, #63	; 0x3f
 80094b4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80094b8:	2318      	movs	r3, #24
 80094ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80094be:	f107 0310 	add.w	r3, r7, #16
 80094c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80094c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80094ce:	f107 030f 	add.w	r3, r7, #15
 80094d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80094d6:	2301      	movs	r3, #1
 80094d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80094dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094e0:	2100      	movs	r1, #0
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 f9f6 	bl	80098d4 <hci_send_req>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	da01      	bge.n	80094f2 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 80094ee:	23ff      	movs	r3, #255	; 0xff
 80094f0:	e009      	b.n	8009506 <aci_hal_set_radio_activity_mask+0x98>
  if (status) 
 80094f2:	f107 030f 	add.w	r3, r7, #15
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d003      	beq.n	8009504 <aci_hal_set_radio_activity_mask+0x96>
  {
    return status;
 80094fc:	f107 030f 	add.w	r3, r7, #15
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	e000      	b.n	8009506 <aci_hal_set_radio_activity_mask+0x98>
  }
  return BLE_STATUS_SUCCESS;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b088      	sub	sp, #32
 8009514:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800951a:	f107 0308 	add.w	r3, r7, #8
 800951e:	2218      	movs	r2, #24
 8009520:	2100      	movs	r1, #0
 8009522:	4618      	mov	r0, r3
 8009524:	f000 fb12 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x03;
 8009528:	2303      	movs	r3, #3
 800952a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800952c:	2303      	movs	r3, #3
 800952e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009530:	1dfb      	adds	r3, r7, #7
 8009532:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009534:	2301      	movs	r3, #1
 8009536:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8009538:	f107 0308 	add.w	r3, r7, #8
 800953c:	2100      	movs	r1, #0
 800953e:	4618      	mov	r0, r3
 8009540:	f000 f9c8 	bl	80098d4 <hci_send_req>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	da01      	bge.n	800954e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800954a:	23ff      	movs	r3, #255	; 0xff
 800954c:	e005      	b.n	800955a <hci_reset+0x4a>
  if (status) 
 800954e:	79fb      	ldrb	r3, [r7, #7]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <hci_reset+0x48>
  {
    return status;
 8009554:	79fb      	ldrb	r3, [r7, #7]
 8009556:	e000      	b.n	800955a <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3720      	adds	r7, #32
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <aci_l2cap_connection_parameter_update_resp>:
                                                      uint16_t Timeout_Multiplier,
                                                      uint16_t Minimum_CE_Length,
                                                      uint16_t Maximum_CE_Length,
                                                      uint8_t Identifier,
                                                      uint8_t Accept)
{
 8009562:	b5b0      	push	{r4, r5, r7, lr}
 8009564:	b0cc      	sub	sp, #304	; 0x130
 8009566:	af00      	add	r7, sp, #0
 8009568:	4605      	mov	r5, r0
 800956a:	460c      	mov	r4, r1
 800956c:	4610      	mov	r0, r2
 800956e:	4619      	mov	r1, r3
 8009570:	1dbb      	adds	r3, r7, #6
 8009572:	462a      	mov	r2, r5
 8009574:	801a      	strh	r2, [r3, #0]
 8009576:	1d3b      	adds	r3, r7, #4
 8009578:	4622      	mov	r2, r4
 800957a:	801a      	strh	r2, [r3, #0]
 800957c:	1cbb      	adds	r3, r7, #2
 800957e:	4602      	mov	r2, r0
 8009580:	801a      	strh	r2, [r3, #0]
 8009582:	463b      	mov	r3, r7
 8009584:	460a      	mov	r2, r1
 8009586:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_resp_cp0 *cp0 = (aci_l2cap_connection_parameter_update_resp_cp0*)(cmd_buffer);
 8009588:	f107 0310 	add.w	r3, r7, #16
 800958c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009590:	f107 030f 	add.w	r3, r7, #15
 8009594:	2200      	movs	r2, #0
 8009596:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800959e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095a2:	1dba      	adds	r2, r7, #6
 80095a4:	8812      	ldrh	r2, [r2, #0]
 80095a6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80095a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095ac:	3302      	adds	r3, #2
 80095ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 80095b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095b6:	1d3a      	adds	r2, r7, #4
 80095b8:	8812      	ldrh	r2, [r2, #0]
 80095ba:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80095bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095c0:	3302      	adds	r3, #2
 80095c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 80095c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095ca:	1cba      	adds	r2, r7, #2
 80095cc:	8812      	ldrh	r2, [r2, #0]
 80095ce:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80095d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095d4:	3302      	adds	r3, #2
 80095d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = htob(Slave_latency, 2);
 80095da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095de:	463a      	mov	r2, r7
 80095e0:	8812      	ldrh	r2, [r2, #0]
 80095e2:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 80095e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095e8:	3302      	adds	r3, #2
 80095ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = htob(Timeout_Multiplier, 2);
 80095ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095f2:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 80095f6:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 80095f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095fc:	3302      	adds	r3, #2
 80095fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 8009602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009606:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 800960a:	815a      	strh	r2, [r3, #10]
  index_input += 2;
 800960c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009610:	3302      	adds	r3, #2
 8009612:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 8009616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800961a:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 800961e:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8009620:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009624:	3302      	adds	r3, #2
 8009626:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identifier = htob(Identifier, 1);
 800962a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800962e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009632:	739a      	strb	r2, [r3, #14]
  index_input += 1;
 8009634:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009638:	3301      	adds	r3, #1
 800963a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Accept = htob(Accept, 1);
 800963e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009642:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009646:	73da      	strb	r2, [r3, #15]
  index_input += 1;
 8009648:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800964c:	3301      	adds	r3, #1
 800964e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009652:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009656:	2218      	movs	r2, #24
 8009658:	2100      	movs	r1, #0
 800965a:	4618      	mov	r0, r3
 800965c:	f000 fa76 	bl	8009b4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009660:	233f      	movs	r3, #63	; 0x3f
 8009662:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x182;
 8009666:	f44f 73c1 	mov.w	r3, #386	; 0x182
 800966a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800966e:	f107 0310 	add.w	r3, r7, #16
 8009672:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009676:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800967a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800967e:	f107 030f 	add.w	r3, r7, #15
 8009682:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009686:	2301      	movs	r3, #1
 8009688:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800968c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009690:	2100      	movs	r1, #0
 8009692:	4618      	mov	r0, r3
 8009694:	f000 f91e 	bl	80098d4 <hci_send_req>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	da01      	bge.n	80096a2 <aci_l2cap_connection_parameter_update_resp+0x140>
    return BLE_STATUS_TIMEOUT;
 800969e:	23ff      	movs	r3, #255	; 0xff
 80096a0:	e009      	b.n	80096b6 <aci_l2cap_connection_parameter_update_resp+0x154>
  if (status) 
 80096a2:	f107 030f 	add.w	r3, r7, #15
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d003      	beq.n	80096b4 <aci_l2cap_connection_parameter_update_resp+0x152>
  {
    return status;
 80096ac:	f107 030f 	add.w	r3, r7, #15
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	e000      	b.n	80096b6 <aci_l2cap_connection_parameter_update_resp+0x154>
  }
  return BLE_STATUS_SUCCESS;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80096bc:	46bd      	mov	sp, r7
 80096be:	bdb0      	pop	{r4, r5, r7, pc}

080096c0 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096c6:	f3ef 8310 	mrs	r3, PRIMASK
 80096ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80096cc:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 80096ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80096d0:	b672      	cpsid	i

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 80096d2:	1cbb      	adds	r3, r7, #2
 80096d4:	4619      	mov	r1, r3
 80096d6:	4812      	ldr	r0, [pc, #72]	; (8009720 <DbgTrace_TxCpltCallback+0x60>)
 80096d8:	f000 feb9 	bl	800a44e <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 80096dc:	1cbb      	adds	r3, r7, #2
 80096de:	4619      	mov	r1, r3
 80096e0:	480f      	ldr	r0, [pc, #60]	; (8009720 <DbgTrace_TxCpltCallback+0x60>)
 80096e2:	f000 ffa8 	bl	800a636 <CircularQueue_Sense>
 80096e6:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00b      	beq.n	8009706 <DbgTrace_TxCpltCallback+0x46>
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 80096f8:	887b      	ldrh	r3, [r7, #2]
 80096fa:	4a0a      	ldr	r2, [pc, #40]	; (8009724 <DbgTrace_TxCpltCallback+0x64>)
 80096fc:	4619      	mov	r1, r3
 80096fe:	6938      	ldr	r0, [r7, #16]
 8009700:	f7f7 f8cf 	bl	80008a2 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8009704:	e007      	b.n	8009716 <DbgTrace_TxCpltCallback+0x56>
    DbgTracePeripheralReady = SET;
 8009706:	4b08      	ldr	r3, [pc, #32]	; (8009728 <DbgTrace_TxCpltCallback+0x68>)
 8009708:	2201      	movs	r2, #1
 800970a:	701a      	strb	r2, [r3, #0]
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	607b      	str	r3, [r7, #4]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f383 8810 	msr	PRIMASK, r3
}
 8009716:	bf00      	nop
 8009718:	3718      	adds	r7, #24
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	20000268 	.word	0x20000268
 8009724:	080096c1 	.word	0x080096c1
 8009728:	2000002c 	.word	0x2000002c

0800972c <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8009732:	f7f7 f8b0 	bl	8000896 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8009736:	2302      	movs	r3, #2
 8009738:	9300      	str	r3, [sp, #0]
 800973a:	2300      	movs	r3, #0
 800973c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009740:	4903      	ldr	r1, [pc, #12]	; (8009750 <DbgTraceInit+0x24>)
 8009742:	4804      	ldr	r0, [pc, #16]	; (8009754 <DbgTraceInit+0x28>)
 8009744:	f000 fc2a 	bl	8009f9c <CircularQueue_Init>
#endif 
#endif
  return;
 8009748:	bf00      	nop
}
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	20000288 	.word	0x20000288
 8009754:	20000268 	.word	0x20000268

08009758 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	68b9      	ldr	r1, [r7, #8]
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f000 f805 	bl	8009778 <DbgTraceWrite>
 800976e:	4603      	mov	r3, r0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b08a      	sub	sp, #40	; 0x28
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8009784:	2300      	movs	r3, #0
 8009786:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009788:	f3ef 8310 	mrs	r3, PRIMASK
 800978c:	61bb      	str	r3, [r7, #24]
  return(result);
 800978e:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8009790:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009798:	d102      	bne.n	80097a0 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800979a:	2300      	movs	r3, #0
 800979c:	627b      	str	r3, [r7, #36]	; 0x24
 800979e:	e034      	b.n	800980a <DbgTraceWrite+0x92>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d006      	beq.n	80097b4 <DbgTraceWrite+0x3c>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d003      	beq.n	80097b4 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 80097ac:	f04f 33ff 	mov.w	r3, #4294967295
 80097b0:	627b      	str	r3, [r7, #36]	; 0x24
 80097b2:	e02a      	b.n	800980a <DbgTraceWrite+0x92>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d027      	beq.n	800980a <DbgTraceWrite+0x92>
  {
    chars_written = bufSize;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80097be:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	2301      	movs	r3, #1
 80097c6:	68b9      	ldr	r1, [r7, #8]
 80097c8:	4812      	ldr	r0, [pc, #72]	; (8009814 <DbgTraceWrite+0x9c>)
 80097ca:	f000 fc19 	bl	800a000 <CircularQueue_Add>
 80097ce:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d014      	beq.n	8009800 <DbgTraceWrite+0x88>
 80097d6:	4b10      	ldr	r3, [pc, #64]	; (8009818 <DbgTraceWrite+0xa0>)
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00f      	beq.n	8009800 <DbgTraceWrite+0x88>
    {
      DbgTracePeripheralReady = RESET;
 80097e0:	4b0d      	ldr	r3, [pc, #52]	; (8009818 <DbgTraceWrite+0xa0>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	701a      	strb	r2, [r3, #0]
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	f383 8810 	msr	PRIMASK, r3
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	4a09      	ldr	r2, [pc, #36]	; (800981c <DbgTraceWrite+0xa4>)
 80097f6:	4619      	mov	r1, r3
 80097f8:	69f8      	ldr	r0, [r7, #28]
 80097fa:	f7f7 f852 	bl	80008a2 <DbgOutputTraces>
 80097fe:	e004      	b.n	800980a <DbgTraceWrite+0x92>
 8009800:	6a3b      	ldr	r3, [r7, #32]
 8009802:	613b      	str	r3, [r7, #16]
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	f383 8810 	msr	PRIMASK, r3
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800980c:	4618      	mov	r0, r3
 800980e:	3728      	adds	r7, #40	; 0x28
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	20000268 	.word	0x20000268
 8009818:	2000002c 	.word	0x2000002c
 800981c:	080096c1 	.word	0x080096c1

08009820 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	4a08      	ldr	r2, [pc, #32]	; (8009850 <hci_init+0x30>)
 8009830:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8009832:	4a08      	ldr	r2, [pc, #32]	; (8009854 <hci_init+0x34>)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8009838:	4806      	ldr	r0, [pc, #24]	; (8009854 <hci_init+0x34>)
 800983a:	f000 f963 	bl	8009b04 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4618      	mov	r0, r3
 8009844:	f000 f8c4 	bl	80099d0 <TlInit>

  return;
 8009848:	bf00      	nop
}
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	200012b0 	.word	0x200012b0
 8009854:	20001288 	.word	0x20001288

08009858 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  while((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800985e:	e024      	b.n	80098aa <hci_user_evt_proc+0x52>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009860:	f107 030c 	add.w	r3, r7, #12
 8009864:	4619      	mov	r1, r3
 8009866:	4818      	ldr	r0, [pc, #96]	; (80098c8 <hci_user_evt_proc+0x70>)
 8009868:	f000 fb7b 	bl	8009f62 <LST_remove_head>

    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800986c:	4b17      	ldr	r3, [pc, #92]	; (80098cc <hci_user_evt_proc+0x74>)
 800986e:	2201      	movs	r2, #1
 8009870:	701a      	strb	r2, [r3, #0]

    if (hciContext.UserEvtRx != NULL)
 8009872:	4b17      	ldr	r3, [pc, #92]	; (80098d0 <hci_user_evt_proc+0x78>)
 8009874:	69db      	ldr	r3, [r3, #28]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d009      	beq.n	800988e <hci_user_evt_proc+0x36>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	60bb      	str	r3, [r7, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800987e:	4b14      	ldr	r3, [pc, #80]	; (80098d0 <hci_user_evt_proc+0x78>)
 8009880:	69db      	ldr	r3, [r3, #28]
 8009882:	1d3a      	adds	r2, r7, #4
 8009884:	4610      	mov	r0, r2
 8009886:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009888:	793a      	ldrb	r2, [r7, #4]
 800988a:	4b10      	ldr	r3, [pc, #64]	; (80098cc <hci_user_evt_proc+0x74>)
 800988c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800988e:	4b0f      	ldr	r3, [pc, #60]	; (80098cc <hci_user_evt_proc+0x74>)
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d004      	beq.n	80098a0 <hci_user_evt_proc+0x48>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	4618      	mov	r0, r3
 800989a:	f001 f9df 	bl	800ac5c <TL_MM_EvtDone>
 800989e:	e004      	b.n	80098aa <hci_user_evt_proc+0x52>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	4619      	mov	r1, r3
 80098a4:	4808      	ldr	r0, [pc, #32]	; (80098c8 <hci_user_evt_proc+0x70>)
 80098a6:	f000 faf5 	bl	8009e94 <LST_insert_head>
  while((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80098aa:	4807      	ldr	r0, [pc, #28]	; (80098c8 <hci_user_evt_proc+0x70>)
 80098ac:	f000 fad2 	bl	8009e54 <LST_is_empty>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d104      	bne.n	80098c0 <hci_user_evt_proc+0x68>
 80098b6:	4b05      	ldr	r3, [pc, #20]	; (80098cc <hci_user_evt_proc+0x74>)
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d1d0      	bne.n	8009860 <hci_user_evt_proc+0x8>
    }
  }

  return;
 80098be:	bf00      	nop
 80098c0:	bf00      	nop
}
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	200001e8 	.word	0x200001e8
 80098cc:	200001f4 	.word	0x200001f4
 80098d0:	20001288 	.word	0x20001288

080098d4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b088      	sub	sp, #32
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80098e0:	2000      	movs	r0, #0
 80098e2:	f000 f8cb 	bl	8009a7c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80098e6:	2300      	movs	r3, #0
 80098e8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	885b      	ldrh	r3, [r3, #2]
 80098ee:	b21b      	sxth	r3, r3
 80098f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098f4:	b21a      	sxth	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	881b      	ldrh	r3, [r3, #0]
 80098fa:	029b      	lsls	r3, r3, #10
 80098fc:	b21b      	sxth	r3, r3
 80098fe:	4313      	orrs	r3, r2
 8009900:	b21b      	sxth	r3, r3
 8009902:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	b2d9      	uxtb	r1, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	689a      	ldr	r2, [r3, #8]
 800990e:	8bbb      	ldrh	r3, [r7, #28]
 8009910:	4618      	mov	r0, r3
 8009912:	f000 f88d 	bl	8009a30 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8009916:	e04e      	b.n	80099b6 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8009918:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800991c:	f7f9 f89f 	bl	8002a5e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009920:	e043      	b.n	80099aa <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009922:	f107 030c 	add.w	r3, r7, #12
 8009926:	4619      	mov	r1, r3
 8009928:	4828      	ldr	r0, [pc, #160]	; (80099cc <hci_send_req+0xf8>)
 800992a:	f000 fb1a 	bl	8009f62 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	7a5b      	ldrb	r3, [r3, #9]
 8009932:	2b0f      	cmp	r3, #15
 8009934:	d114      	bne.n	8009960 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	330b      	adds	r3, #11
 800993a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	885b      	ldrh	r3, [r3, #2]
 8009940:	b29b      	uxth	r3, r3
 8009942:	8bba      	ldrh	r2, [r7, #28]
 8009944:	429a      	cmp	r2, r3
 8009946:	d104      	bne.n	8009952 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	7812      	ldrb	r2, [r2, #0]
 8009950:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	785b      	ldrb	r3, [r3, #1]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d027      	beq.n	80099aa <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800995a:	2301      	movs	r3, #1
 800995c:	77fb      	strb	r3, [r7, #31]
 800995e:	e024      	b.n	80099aa <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	330b      	adds	r3, #11
 8009964:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800996c:	b29b      	uxth	r3, r3
 800996e:	8bba      	ldrh	r2, [r7, #28]
 8009970:	429a      	cmp	r2, r3
 8009972:	d114      	bne.n	800999e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	7a9b      	ldrb	r3, [r3, #10]
 8009978:	3b03      	subs	r3, #3
 800997a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	695a      	ldr	r2, [r3, #20]
 8009980:	7dfb      	ldrb	r3, [r7, #23]
 8009982:	429a      	cmp	r2, r3
 8009984:	bfa8      	it	ge
 8009986:	461a      	movge	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6918      	ldr	r0, [r3, #16]
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	1cd9      	adds	r1, r3, #3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	695b      	ldr	r3, [r3, #20]
 8009998:	461a      	mov	r2, r3
 800999a:	f001 fc2f 	bl	800b1fc <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d001      	beq.n	80099aa <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80099a6:	2301      	movs	r3, #1
 80099a8:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80099aa:	4808      	ldr	r0, [pc, #32]	; (80099cc <hci_send_req+0xf8>)
 80099ac:	f000 fa52 	bl	8009e54 <LST_is_empty>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d0b5      	beq.n	8009922 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80099b6:	7ffb      	ldrb	r3, [r7, #31]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d0ad      	beq.n	8009918 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80099bc:	2001      	movs	r0, #1
 80099be:	f000 f85d 	bl	8009a7c <NotifyCmdStatus>

  return 0;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3720      	adds	r7, #32
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	200012a8 	.word	0x200012a8

080099d0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80099d8:	480f      	ldr	r0, [pc, #60]	; (8009a18 <TlInit+0x48>)
 80099da:	f000 fa2b 	bl	8009e34 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80099de:	4a0f      	ldr	r2, [pc, #60]	; (8009a1c <TlInit+0x4c>)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80099e4:	480e      	ldr	r0, [pc, #56]	; (8009a20 <TlInit+0x50>)
 80099e6:	f000 fa25 	bl	8009e34 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80099ea:	4b0e      	ldr	r3, [pc, #56]	; (8009a24 <TlInit+0x54>)
 80099ec:	2201      	movs	r2, #1
 80099ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80099f0:	4b0d      	ldr	r3, [pc, #52]	; (8009a28 <TlInit+0x58>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d00a      	beq.n	8009a0e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80099fc:	4b0b      	ldr	r3, [pc, #44]	; (8009a2c <TlInit+0x5c>)
 80099fe:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009a00:	4b09      	ldr	r3, [pc, #36]	; (8009a28 <TlInit+0x58>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f107 0208 	add.w	r2, r7, #8
 8009a08:	4610      	mov	r0, r2
 8009a0a:	4798      	blx	r3
  }

  return;
 8009a0c:	bf00      	nop
 8009a0e:	bf00      	nop
}
 8009a10:	3718      	adds	r7, #24
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	200012a8 	.word	0x200012a8
 8009a1c:	200001f0 	.word	0x200001f0
 8009a20:	200001e8 	.word	0x200001e8
 8009a24:	200001f4 	.word	0x200001f4
 8009a28:	20001288 	.word	0x20001288
 8009a2c:	08009abd 	.word	0x08009abd

08009a30 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	4603      	mov	r3, r0
 8009a38:	603a      	str	r2, [r7, #0]
 8009a3a:	80fb      	strh	r3, [r7, #6]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009a40:	4b0c      	ldr	r3, [pc, #48]	; (8009a74 <SendCmd+0x44>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	88fa      	ldrh	r2, [r7, #6]
 8009a46:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009a4a:	4b0a      	ldr	r3, [pc, #40]	; (8009a74 <SendCmd+0x44>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	797a      	ldrb	r2, [r7, #5]
 8009a50:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009a52:	4b08      	ldr	r3, [pc, #32]	; (8009a74 <SendCmd+0x44>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	330c      	adds	r3, #12
 8009a58:	797a      	ldrb	r2, [r7, #5]
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f001 fbcd 	bl	800b1fc <memcpy>

  hciContext.io.Send(0,0);
 8009a62:	4b05      	ldr	r3, [pc, #20]	; (8009a78 <SendCmd+0x48>)
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	2100      	movs	r1, #0
 8009a68:	2000      	movs	r0, #0
 8009a6a:	4798      	blx	r3

  return;
 8009a6c:	bf00      	nop
}
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	200001f0 	.word	0x200001f0
 8009a78:	20001288 	.word	0x20001288

08009a7c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	4603      	mov	r3, r0
 8009a84:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009a86:	79fb      	ldrb	r3, [r7, #7]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d108      	bne.n	8009a9e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009a8c:	4b0a      	ldr	r3, [pc, #40]	; (8009ab8 <NotifyCmdStatus+0x3c>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00d      	beq.n	8009ab0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009a94:	4b08      	ldr	r3, [pc, #32]	; (8009ab8 <NotifyCmdStatus+0x3c>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2000      	movs	r0, #0
 8009a9a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009a9c:	e008      	b.n	8009ab0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009a9e:	4b06      	ldr	r3, [pc, #24]	; (8009ab8 <NotifyCmdStatus+0x3c>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d004      	beq.n	8009ab0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009aa6:	4b04      	ldr	r3, [pc, #16]	; (8009ab8 <NotifyCmdStatus+0x3c>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2001      	movs	r0, #1
 8009aac:	4798      	blx	r3
  return;
 8009aae:	bf00      	nop
 8009ab0:	bf00      	nop
}
 8009ab2:	3708      	adds	r7, #8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	200012b0 	.word	0x200012b0

08009abc <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	7a5b      	ldrb	r3, [r3, #9]
 8009ac8:	2b0f      	cmp	r3, #15
 8009aca:	d003      	beq.n	8009ad4 <TlEvtReceived+0x18>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	7a5b      	ldrb	r3, [r3, #9]
 8009ad0:	2b0e      	cmp	r3, #14
 8009ad2:	d107      	bne.n	8009ae4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009ad4:	6879      	ldr	r1, [r7, #4]
 8009ad6:	4809      	ldr	r0, [pc, #36]	; (8009afc <TlEvtReceived+0x40>)
 8009ad8:	f000 fa00 	bl	8009edc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009adc:	2000      	movs	r0, #0
 8009ade:	f7f8 ffb3 	bl	8002a48 <hci_cmd_resp_release>
 8009ae2:	e006      	b.n	8009af2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009ae4:	6879      	ldr	r1, [r7, #4]
 8009ae6:	4806      	ldr	r0, [pc, #24]	; (8009b00 <TlEvtReceived+0x44>)
 8009ae8:	f000 f9f8 	bl	8009edc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009aec:	4804      	ldr	r0, [pc, #16]	; (8009b00 <TlEvtReceived+0x44>)
 8009aee:	f7f8 ff9f 	bl	8002a30 <hci_notify_asynch_evt>
  }

  return;
 8009af2:	bf00      	nop
}
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	200012a8 	.word	0x200012a8
 8009b00:	200001e8 	.word	0x200001e8

08009b04 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a05      	ldr	r2, [pc, #20]	; (8009b24 <hci_register_io_bus+0x20>)
 8009b10:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a04      	ldr	r2, [pc, #16]	; (8009b28 <hci_register_io_bus+0x24>)
 8009b16:	611a      	str	r2, [r3, #16]

  return;
 8009b18:	bf00      	nop
}
 8009b1a:	370c      	adds	r7, #12
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr
 8009b24:	0800aa35 	.word	0x0800aa35
 8009b28:	0800aa9d 	.word	0x0800aa9d

08009b2c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	68b9      	ldr	r1, [r7, #8]
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f001 fb5d 	bl	800b1fc <memcpy>
 8009b42:	4603      	mov	r3, r0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	68b9      	ldr	r1, [r7, #8]
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f001 fb58 	bl	800b212 <memset>
 8009b62:	4603      	mov	r3, r0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	4603      	mov	r3, r0
 8009b74:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009b76:	4b0f      	ldr	r3, [pc, #60]	; (8009bb4 <OTP_Read+0x48>)
 8009b78:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009b7a:	e002      	b.n	8009b82 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	3b08      	subs	r3, #8
 8009b80:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3307      	adds	r3, #7
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	79fa      	ldrb	r2, [r7, #7]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d003      	beq.n	8009b96 <OTP_Read+0x2a>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	4a09      	ldr	r2, [pc, #36]	; (8009bb8 <OTP_Read+0x4c>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d1f2      	bne.n	8009b7c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3307      	adds	r3, #7
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	79fa      	ldrb	r2, [r7, #7]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d001      	beq.n	8009ba6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3714      	adds	r7, #20
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr
 8009bb4:	1fff73f8 	.word	0x1fff73f8
 8009bb8:	1fff7000 	.word	0x1fff7000

08009bbc <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b088      	sub	sp, #32
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009bc4:	f107 030c 	add.w	r3, r7, #12
 8009bc8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	2121      	movs	r1, #33	; 0x21
 8009bd4:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009bd8:	f000 f862 	bl	8009ca0 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	330b      	adds	r3, #11
 8009be0:	78db      	ldrb	r3, [r3, #3]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3720      	adds	r7, #32
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
	...

08009bec <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	4a08      	ldr	r2, [pc, #32]	; (8009c1c <shci_init+0x30>)
 8009bfc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009bfe:	4a08      	ldr	r2, [pc, #32]	; (8009c20 <shci_init+0x34>)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009c04:	4806      	ldr	r0, [pc, #24]	; (8009c20 <shci_init+0x34>)
 8009c06:	f000 f901 	bl	8009e0c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f000 f884 	bl	8009d1c <TlInit>

  return;
 8009c14:	bf00      	nop
}
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	200012d4 	.word	0x200012d4
 8009c20:	200012b4 	.word	0x200012b4

08009c24 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievtbuffer;
  tSHCI_UserEvtRxParam UserEvtRxParam;

  while((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009c2a:	e024      	b.n	8009c76 <shci_user_evt_proc+0x52>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009c2c:	f107 030c 	add.w	r3, r7, #12
 8009c30:	4619      	mov	r1, r3
 8009c32:	4818      	ldr	r0, [pc, #96]	; (8009c94 <shci_user_evt_proc+0x70>)
 8009c34:	f000 f995 	bl	8009f62 <LST_remove_head>

    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009c38:	4b17      	ldr	r3, [pc, #92]	; (8009c98 <shci_user_evt_proc+0x74>)
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	701a      	strb	r2, [r3, #0]

    if (shciContext.UserEvtRx != NULL)
 8009c3e:	4b17      	ldr	r3, [pc, #92]	; (8009c9c <shci_user_evt_proc+0x78>)
 8009c40:	69db      	ldr	r3, [r3, #28]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d009      	beq.n	8009c5a <shci_user_evt_proc+0x36>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	60bb      	str	r3, [r7, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009c4a:	4b14      	ldr	r3, [pc, #80]	; (8009c9c <shci_user_evt_proc+0x78>)
 8009c4c:	69db      	ldr	r3, [r3, #28]
 8009c4e:	1d3a      	adds	r2, r7, #4
 8009c50:	4610      	mov	r0, r2
 8009c52:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009c54:	793a      	ldrb	r2, [r7, #4]
 8009c56:	4b10      	ldr	r3, [pc, #64]	; (8009c98 <shci_user_evt_proc+0x74>)
 8009c58:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009c5a:	4b0f      	ldr	r3, [pc, #60]	; (8009c98 <shci_user_evt_proc+0x74>)
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d004      	beq.n	8009c6c <shci_user_evt_proc+0x48>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 fff9 	bl	800ac5c <TL_MM_EvtDone>
 8009c6a:	e004      	b.n	8009c76 <shci_user_evt_proc+0x52>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4619      	mov	r1, r3
 8009c70:	4808      	ldr	r0, [pc, #32]	; (8009c94 <shci_user_evt_proc+0x70>)
 8009c72:	f000 f90f 	bl	8009e94 <LST_insert_head>
  while((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009c76:	4807      	ldr	r0, [pc, #28]	; (8009c94 <shci_user_evt_proc+0x70>)
 8009c78:	f000 f8ec 	bl	8009e54 <LST_is_empty>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d104      	bne.n	8009c8c <shci_user_evt_proc+0x68>
 8009c82:	4b05      	ldr	r3, [pc, #20]	; (8009c98 <shci_user_evt_proc+0x74>)
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1d0      	bne.n	8009c2c <shci_user_evt_proc+0x8>
    }
  }

  return;
 8009c8a:	bf00      	nop
 8009c8c:	bf00      	nop
}
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	20000218 	.word	0x20000218
 8009c98:	20000228 	.word	0x20000228
 8009c9c:	200012b4 	.word	0x200012b4

08009ca0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60ba      	str	r2, [r7, #8]
 8009ca8:	607b      	str	r3, [r7, #4]
 8009caa:	4603      	mov	r3, r0
 8009cac:	81fb      	strh	r3, [r7, #14]
 8009cae:	460b      	mov	r3, r1
 8009cb0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	f000 f864 	bl	8009d80 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009cb8:	4b16      	ldr	r3, [pc, #88]	; (8009d14 <shci_send+0x74>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	89fa      	ldrh	r2, [r7, #14]
 8009cbe:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009cc2:	4b14      	ldr	r3, [pc, #80]	; (8009d14 <shci_send+0x74>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	7b7a      	ldrb	r2, [r7, #13]
 8009cc8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009cca:	4b12      	ldr	r3, [pc, #72]	; (8009d14 <shci_send+0x74>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	330c      	adds	r3, #12
 8009cd0:	7b7a      	ldrb	r2, [r7, #13]
 8009cd2:	68b9      	ldr	r1, [r7, #8]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f001 fa91 	bl	800b1fc <memcpy>

  shciContext.io.Send(0,0);
 8009cda:	4b0f      	ldr	r3, [pc, #60]	; (8009d18 <shci_send+0x78>)
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	2100      	movs	r1, #0
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009ce4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009ce8:	f7f6 fdca 	bl	8000880 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f103 0008 	add.w	r0, r3, #8
 8009cf2:	4b08      	ldr	r3, [pc, #32]	; (8009d14 <shci_send+0x74>)
 8009cf4:	6819      	ldr	r1, [r3, #0]
 8009cf6:	4b07      	ldr	r3, [pc, #28]	; (8009d14 <shci_send+0x74>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	789b      	ldrb	r3, [r3, #2]
 8009cfc:	3303      	adds	r3, #3
 8009cfe:	461a      	mov	r2, r3
 8009d00:	f001 fa7c 	bl	800b1fc <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009d04:	2001      	movs	r0, #1
 8009d06:	f000 f83b 	bl	8009d80 <Cmd_SetStatus>

  return;
 8009d0a:	bf00      	nop
}
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	20000224 	.word	0x20000224
 8009d18:	200012b4 	.word	0x200012b4

08009d1c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009d24:	4a10      	ldr	r2, [pc, #64]	; (8009d68 <TlInit+0x4c>)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009d2a:	4810      	ldr	r0, [pc, #64]	; (8009d6c <TlInit+0x50>)
 8009d2c:	f000 f882 	bl	8009e34 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009d30:	2001      	movs	r0, #1
 8009d32:	f000 f825 	bl	8009d80 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009d36:	4b0e      	ldr	r3, [pc, #56]	; (8009d70 <TlInit+0x54>)
 8009d38:	2201      	movs	r2, #1
 8009d3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009d3c:	4b0d      	ldr	r3, [pc, #52]	; (8009d74 <TlInit+0x58>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00c      	beq.n	8009d5e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009d48:	4b0b      	ldr	r3, [pc, #44]	; (8009d78 <TlInit+0x5c>)
 8009d4a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009d4c:	4b0b      	ldr	r3, [pc, #44]	; (8009d7c <TlInit+0x60>)
 8009d4e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009d50:	4b08      	ldr	r3, [pc, #32]	; (8009d74 <TlInit+0x58>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f107 020c 	add.w	r2, r7, #12
 8009d58:	4610      	mov	r0, r2
 8009d5a:	4798      	blx	r3
  }

  return;
 8009d5c:	bf00      	nop
 8009d5e:	bf00      	nop
}
 8009d60:	3718      	adds	r7, #24
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	20000224 	.word	0x20000224
 8009d6c:	20000218 	.word	0x20000218
 8009d70:	20000228 	.word	0x20000228
 8009d74:	200012b4 	.word	0x200012b4
 8009d78:	08009dd1 	.word	0x08009dd1
 8009d7c:	08009de9 	.word	0x08009de9

08009d80 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	4603      	mov	r3, r0
 8009d88:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009d8a:	79fb      	ldrb	r3, [r7, #7]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10b      	bne.n	8009da8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009d90:	4b0d      	ldr	r3, [pc, #52]	; (8009dc8 <Cmd_SetStatus+0x48>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d003      	beq.n	8009da0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009d98:	4b0b      	ldr	r3, [pc, #44]	; (8009dc8 <Cmd_SetStatus+0x48>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009da0:	4b0a      	ldr	r3, [pc, #40]	; (8009dcc <Cmd_SetStatus+0x4c>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009da6:	e00b      	b.n	8009dc0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009da8:	4b08      	ldr	r3, [pc, #32]	; (8009dcc <Cmd_SetStatus+0x4c>)
 8009daa:	2201      	movs	r2, #1
 8009dac:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009dae:	4b06      	ldr	r3, [pc, #24]	; (8009dc8 <Cmd_SetStatus+0x48>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d004      	beq.n	8009dc0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009db6:	4b04      	ldr	r3, [pc, #16]	; (8009dc8 <Cmd_SetStatus+0x48>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2001      	movs	r0, #1
 8009dbc:	4798      	blx	r3
  return;
 8009dbe:	bf00      	nop
 8009dc0:	bf00      	nop
}
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	200012d4 	.word	0x200012d4
 8009dcc:	20000220 	.word	0x20000220

08009dd0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009dd8:	2000      	movs	r0, #0
 8009dda:	f7f6 fd46 	bl	800086a <shci_cmd_resp_release>

  return;
 8009dde:	bf00      	nop
}
 8009de0:	3708      	adds	r7, #8
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
	...

08009de8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009df0:	6879      	ldr	r1, [r7, #4]
 8009df2:	4805      	ldr	r0, [pc, #20]	; (8009e08 <TlUserEvtReceived+0x20>)
 8009df4:	f000 f872 	bl	8009edc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009df8:	4803      	ldr	r0, [pc, #12]	; (8009e08 <TlUserEvtReceived+0x20>)
 8009dfa:	f7f6 fd2a 	bl	8000852 <shci_notify_asynch_evt>

  return;
 8009dfe:	bf00      	nop
}
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	20000218 	.word	0x20000218

08009e0c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a05      	ldr	r2, [pc, #20]	; (8009e2c <shci_register_io_bus+0x20>)
 8009e18:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a04      	ldr	r2, [pc, #16]	; (8009e30 <shci_register_io_bus+0x24>)
 8009e1e:	611a      	str	r2, [r3, #16]

  return;
 8009e20:	bf00      	nop
}
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	0800ab11 	.word	0x0800ab11
 8009e30:	0800ab65 	.word	0x0800ab65

08009e34 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	605a      	str	r2, [r3, #4]
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b087      	sub	sp, #28
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8009e60:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e62:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009e64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e66:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d102      	bne.n	8009e78 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 8009e72:	2301      	movs	r3, #1
 8009e74:	75fb      	strb	r3, [r7, #23]
 8009e76:	e001      	b.n	8009e7c <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	75fb      	strb	r3, [r7, #23]
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8009e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	371c      	adds	r7, #28
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b087      	sub	sp, #28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8009ea2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009ea6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ea8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	683a      	ldr	r2, [r7, #0]
 8009ebc:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	605a      	str	r2, [r3, #4]
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009ed0:	bf00      	nop
 8009ed2:	371c      	adds	r7, #28
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b087      	sub	sp, #28
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8009eea:	60fb      	str	r3, [r7, #12]
  return(result);
 8009eec:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009eee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ef0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	683a      	ldr	r2, [r7, #0]
 8009f0c:	601a      	str	r2, [r3, #0]
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009f18:	bf00      	nop
 8009f1a:	371c      	adds	r7, #28
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b087      	sub	sp, #28
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8009f30:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f32:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009f34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f36:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	6812      	ldr	r2, [r2, #0]
 8009f40:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	6852      	ldr	r2, [r2, #4]
 8009f4a:	605a      	str	r2, [r3, #4]
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009f56:	bf00      	nop
 8009f58:	371c      	adds	r7, #28
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr

08009f62 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b086      	sub	sp, #24
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8009f70:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f72:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009f74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f76:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7ff ffcd 	bl	8009f24 <LST_remove_node>
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009f94:	bf00      	nop
 8009f96:	3718      	adds	r7, #24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
 8009fa8:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	68ba      	ldr	r2, [r7, #8]
 8009fae:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	887a      	ldrh	r2, [r7, #2]
 8009fd2:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	7e3a      	ldrb	r2, [r7, #24]
 8009fd8:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8009fda:	7e3b      	ldrb	r3, [r7, #24]
 8009fdc:	f003 0302 	and.w	r3, r3, #2
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d006      	beq.n	8009ff2 <CircularQueue_Init+0x56>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	891b      	ldrh	r3, [r3, #8]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d002      	beq.n	8009ff2 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8009fec:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff0:	e000      	b.n	8009ff4 <CircularQueue_Init+0x58>
  }
  return 0;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b08e      	sub	sp, #56	; 0x38
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	603b      	str	r3, [r7, #0]
 800a00c:	4613      	mov	r3, r2
 800a00e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800a010:	2300      	movs	r3, #0
 800a012:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800a014:	2300      	movs	r3, #0
 800a016:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800a018:	2300      	movs	r3, #0
 800a01a:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800a01c:	2300      	movs	r3, #0
 800a01e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a020:	2300      	movs	r3, #0
 800a022:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800a024:	2300      	movs	r3, #0
 800a026:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800a028:	2300      	movs	r3, #0
 800a02a:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	891b      	ldrh	r3, [r3, #8]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d101      	bne.n	800a038 <CircularQueue_Add+0x38>
 800a034:	2302      	movs	r3, #2
 800a036:	e000      	b.n	800a03a <CircularQueue_Add+0x3a>
 800a038:	2300      	movs	r3, #0
 800a03a:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	695b      	ldr	r3, [r3, #20]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d02a      	beq.n	800a09a <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	891b      	ldrh	r3, [r3, #8]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d123      	bne.n	800a094 <CircularQueue_Add+0x94>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	4413      	add	r3, r2
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	b29a      	uxth	r2, r3
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6819      	ldr	r1, [r3, #0]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	1c58      	adds	r0, r3, #1
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	4298      	cmp	r0, r3
 800a06a:	d306      	bcc.n	800a07a <CircularQueue_Add+0x7a>
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6918      	ldr	r0, [r3, #16]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	1ac3      	subs	r3, r0, r3
 800a076:	3301      	adds	r3, #1
 800a078:	e002      	b.n	800a080 <CircularQueue_Add+0x80>
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	3301      	adds	r3, #1
 800a080:	440b      	add	r3, r1
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	b29b      	uxth	r3, r3
 800a086:	021b      	lsls	r3, r3, #8
 800a088:	b29b      	uxth	r3, r3
 800a08a:	4413      	add	r3, r2
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	3302      	adds	r3, #2
 800a090:	b29b      	uxth	r3, r3
 800a092:	e001      	b.n	800a098 <CircularQueue_Add+0x98>
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	891b      	ldrh	r3, [r3, #8]
 800a098:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	891b      	ldrh	r3, [r3, #8]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d002      	beq.n	800a0a8 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	891b      	ldrh	r3, [r3, #8]
 800a0a6:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	691a      	ldr	r2, [r3, #16]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d307      	bcc.n	800a0c4 <CircularQueue_Add+0xc4>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	685a      	ldr	r2, [r3, #4]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6919      	ldr	r1, [r3, #16]
 800a0bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a0be:	440b      	add	r3, r1
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	e000      	b.n	800a0c6 <CircularQueue_Add+0xc6>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800a0c8:	88fa      	ldrh	r2, [r7, #6]
 800a0ca:	7ffb      	ldrb	r3, [r7, #31]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	fb03 f302 	mul.w	r3, r3, r2
 800a0d6:	69ba      	ldr	r2, [r7, #24]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d80b      	bhi.n	800a0f4 <CircularQueue_Add+0xf4>
 800a0dc:	88fa      	ldrh	r2, [r7, #6]
 800a0de:	7ffb      	ldrb	r3, [r7, #31]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0ea:	fb02 f201 	mul.w	r2, r2, r1
 800a0ee:	1a9b      	subs	r3, r3, r2
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	e000      	b.n	800a0f6 <CircularQueue_Add+0xf6>
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800a0f8:	7dfa      	ldrb	r2, [r7, #23]
 800a0fa:	7ffb      	ldrb	r3, [r7, #31]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	bf8c      	ite	hi
 800a100:	2301      	movhi	r3, #1
 800a102:	2300      	movls	r3, #0
 800a104:	b2db      	uxtb	r3, r3
 800a106:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800a108:	7fbb      	ldrb	r3, [r7, #30]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d008      	beq.n	800a120 <CircularQueue_Add+0x120>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	7f1b      	ldrb	r3, [r3, #28]
 800a112:	f003 0301 	and.w	r3, r3, #1
 800a116:	2b00      	cmp	r3, #0
 800a118:	d002      	beq.n	800a120 <CircularQueue_Add+0x120>
 800a11a:	7dfb      	ldrb	r3, [r7, #23]
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	e000      	b.n	800a122 <CircularQueue_Add+0x122>
 800a120:	8bbb      	ldrh	r3, [r7, #28]
 800a122:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800a124:	7fbb      	ldrb	r3, [r7, #30]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d008      	beq.n	800a13c <CircularQueue_Add+0x13c>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	7f1b      	ldrb	r3, [r3, #28]
 800a12e:	f003 0302 	and.w	r3, r3, #2
 800a132:	2b00      	cmp	r3, #0
 800a134:	d002      	beq.n	800a13c <CircularQueue_Add+0x13c>
 800a136:	7ffb      	ldrb	r3, [r7, #31]
 800a138:	b29b      	uxth	r3, r3
 800a13a:	e000      	b.n	800a13e <CircularQueue_Add+0x13e>
 800a13c:	8bbb      	ldrh	r3, [r7, #28]
 800a13e:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800a140:	88fb      	ldrh	r3, [r7, #6]
 800a142:	2b00      	cmp	r3, #0
 800a144:	f000 817e 	beq.w	800a444 <CircularQueue_Add+0x444>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	695a      	ldr	r2, [r3, #20]
 800a14c:	88f9      	ldrh	r1, [r7, #6]
 800a14e:	7ffb      	ldrb	r3, [r7, #31]
 800a150:	440b      	add	r3, r1
 800a152:	4619      	mov	r1, r3
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	fb03 f301 	mul.w	r3, r3, r1
 800a15a:	441a      	add	r2, r3
 800a15c:	8bbb      	ldrh	r3, [r7, #28]
 800a15e:	441a      	add	r2, r3
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	429a      	cmp	r2, r3
 800a166:	f200 816d 	bhi.w	800a444 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800a16a:	2300      	movs	r3, #0
 800a16c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a16e:	e14a      	b.n	800a406 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	691a      	ldr	r2, [r3, #16]
 800a174:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a176:	441a      	add	r2, r3
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d307      	bcc.n	800a190 <CircularQueue_Add+0x190>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	691a      	ldr	r2, [r3, #16]
 800a184:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a186:	441a      	add	r2, r3
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	e003      	b.n	800a198 <CircularQueue_Add+0x198>
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	691a      	ldr	r2, [r3, #16]
 800a194:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a196:	4413      	add	r3, r2
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	891b      	ldrh	r3, [r3, #8]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d130      	bne.n	800a20c <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b0:	1c59      	adds	r1, r3, #1
 800a1b2:	6339      	str	r1, [r7, #48]	; 0x30
 800a1b4:	4413      	add	r3, r2
 800a1b6:	88fa      	ldrh	r2, [r7, #6]
 800a1b8:	b2d2      	uxtb	r2, r2
 800a1ba:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d304      	bcc.n	800a1d0 <CircularQueue_Add+0x1d0>
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	e000      	b.n	800a1d2 <CircularQueue_Add+0x1d2>
 800a1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d2:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800a1d4:	88fb      	ldrh	r3, [r7, #6]
 800a1d6:	0a1b      	lsrs	r3, r3, #8
 800a1d8:	b298      	uxth	r0, r3
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e0:	1c59      	adds	r1, r3, #1
 800a1e2:	6339      	str	r1, [r7, #48]	; 0x30
 800a1e4:	4413      	add	r3, r2
 800a1e6:	b2c2      	uxtb	r2, r0
 800a1e8:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d304      	bcc.n	800a1fe <CircularQueue_Add+0x1fe>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1fa:	1ad3      	subs	r3, r2, r3
 800a1fc:	e000      	b.n	800a200 <CircularQueue_Add+0x200>
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a200:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	695b      	ldr	r3, [r3, #20]
 800a206:	1c9a      	adds	r2, r3, #2
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800a20c:	88fa      	ldrh	r2, [r7, #6]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6859      	ldr	r1, [r3, #4]
 800a212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a214:	1acb      	subs	r3, r1, r3
 800a216:	4293      	cmp	r3, r2
 800a218:	bf28      	it	cs
 800a21a:	4613      	movcs	r3, r2
 800a21c:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800a21e:	88fb      	ldrh	r3, [r7, #6]
 800a220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a222:	429a      	cmp	r2, r3
 800a224:	d007      	beq.n	800a236 <CircularQueue_Add+0x236>
 800a226:	88fb      	ldrh	r3, [r7, #6]
 800a228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d225      	bcs.n	800a27a <CircularQueue_Add+0x27a>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	7f1b      	ldrb	r3, [r3, #28]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d121      	bne.n	800a27a <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23c:	18d0      	adds	r0, r2, r3
 800a23e:	88fb      	ldrh	r3, [r7, #6]
 800a240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a242:	fb02 f303 	mul.w	r3, r2, r3
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	4413      	add	r3, r2
 800a24a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a24c:	4619      	mov	r1, r3
 800a24e:	f000 ffd5 	bl	800b1fc <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	695a      	ldr	r2, [r3, #20]
 800a256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a258:	441a      	add	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800a25e:	2300      	movs	r3, #0
 800a260:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800a262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a264:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800a266:	88fa      	ldrh	r2, [r7, #6]
 800a268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26a:	1ad3      	subs	r3, r2, r3
 800a26c:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800a26e:	7ffb      	ldrb	r3, [r7, #31]
 800a270:	b29a      	uxth	r2, r3
 800a272:	88fb      	ldrh	r3, [r7, #6]
 800a274:	4413      	add	r3, r2
 800a276:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a278:	e0a4      	b.n	800a3c4 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800a27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f000 80a1 	beq.w	800a3c4 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	7f1b      	ldrb	r3, [r3, #28]
 800a286:	f003 0301 	and.w	r3, r3, #1
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d03a      	beq.n	800a304 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	891b      	ldrh	r3, [r3, #8]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10d      	bne.n	800a2b2 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29c:	3b02      	subs	r3, #2
 800a29e:	4413      	add	r3, r2
 800a2a0:	22ff      	movs	r2, #255	; 0xff
 800a2a2:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	4413      	add	r3, r2
 800a2ae:	22ff      	movs	r2, #255	; 0xff
 800a2b0:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	695a      	ldr	r2, [r3, #20]
 800a2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b8:	441a      	add	r2, r3
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800a2c2:	88fb      	ldrh	r3, [r7, #6]
 800a2c4:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	891b      	ldrh	r3, [r3, #8]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d16f      	bne.n	800a3b2 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d8:	1c59      	adds	r1, r3, #1
 800a2da:	6339      	str	r1, [r7, #48]	; 0x30
 800a2dc:	4413      	add	r3, r2
 800a2de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2e0:	b2d2      	uxtb	r2, r2
 800a2e2:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e6:	0a18      	lsrs	r0, r3, #8
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ee:	1c59      	adds	r1, r3, #1
 800a2f0:	6339      	str	r1, [r7, #48]	; 0x30
 800a2f2:	4413      	add	r3, r2
 800a2f4:	b2c2      	uxtb	r2, r0
 800a2f6:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	695b      	ldr	r3, [r3, #20]
 800a2fc:	1c9a      	adds	r2, r3, #2
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	615a      	str	r2, [r3, #20]
 800a302:	e056      	b.n	800a3b2 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	7f1b      	ldrb	r3, [r3, #28]
 800a308:	f003 0302 	and.w	r3, r3, #2
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d050      	beq.n	800a3b2 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	891b      	ldrh	r3, [r3, #8]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d14a      	bne.n	800a3ae <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31e:	3b02      	subs	r3, #2
 800a320:	4413      	add	r3, r2
 800a322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a324:	b2d2      	uxtb	r2, r2
 800a326:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32a:	0a19      	lsrs	r1, r3, #8
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a332:	3b01      	subs	r3, #1
 800a334:	4413      	add	r3, r2
 800a336:	b2ca      	uxtb	r2, r1
 800a338:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a340:	18d0      	adds	r0, r2, r3
 800a342:	88fb      	ldrh	r3, [r7, #6]
 800a344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a346:	fb02 f303 	mul.w	r3, r2, r3
 800a34a:	68ba      	ldr	r2, [r7, #8]
 800a34c:	4413      	add	r3, r2
 800a34e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a350:	4619      	mov	r1, r3
 800a352:	f000 ff53 	bl	800b1fc <memcpy>
             q->byteCount += NbBytesToCopy; 
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	695a      	ldr	r2, [r3, #20]
 800a35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35c:	441a      	add	r2, r3
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800a362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a364:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800a366:	88fa      	ldrh	r2, [r7, #6]
 800a368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	699b      	ldr	r3, [r3, #24]
 800a372:	1c5a      	adds	r2, r3, #1
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800a378:	2300      	movs	r3, #0
 800a37a:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a382:	1c59      	adds	r1, r3, #1
 800a384:	6339      	str	r1, [r7, #48]	; 0x30
 800a386:	4413      	add	r3, r2
 800a388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a38a:	b2d2      	uxtb	r2, r2
 800a38c:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a390:	0a18      	lsrs	r0, r3, #8
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a398:	1c59      	adds	r1, r3, #1
 800a39a:	6339      	str	r1, [r7, #48]	; 0x30
 800a39c:	4413      	add	r3, r2
 800a39e:	b2c2      	uxtb	r2, r0
 800a3a0:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	1c9a      	adds	r2, r3, #2
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	615a      	str	r2, [r3, #20]
 800a3ac:	e001      	b.n	800a3b2 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	e049      	b.n	800a446 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800a3b2:	7ffb      	ldrb	r3, [r7, #31]
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	4413      	add	r3, r2
 800a3bc:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800a3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d015      	beq.n	800a3f6 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d0:	18d0      	adds	r0, r2, r3
 800a3d2:	88fb      	ldrh	r3, [r7, #6]
 800a3d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3d6:	fb02 f203 	mul.w	r2, r2, r3
 800a3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3dc:	4413      	add	r3, r2
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	f000 ff09 	bl	800b1fc <memcpy>
        q->byteCount += NbBytesToCopy;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	695a      	ldr	r2, [r3, #20]
 800a3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f0:	441a      	add	r2, r3
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	1c5a      	adds	r2, r3, #1
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800a400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a402:	3301      	adds	r3, #1
 800a404:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	f4ff aeb0 	bcc.w	800a170 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6919      	ldr	r1, [r3, #16]
 800a418:	7ffb      	ldrb	r3, [r7, #31]
 800a41a:	4419      	add	r1, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	4299      	cmp	r1, r3
 800a422:	d307      	bcc.n	800a434 <CircularQueue_Add+0x434>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6919      	ldr	r1, [r3, #16]
 800a428:	7ffb      	ldrb	r3, [r7, #31]
 800a42a:	4419      	add	r1, r3
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	1acb      	subs	r3, r1, r3
 800a432:	e003      	b.n	800a43c <CircularQueue_Add+0x43c>
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6919      	ldr	r1, [r3, #16]
 800a438:	7ffb      	ldrb	r3, [r7, #31]
 800a43a:	440b      	add	r3, r1
 800a43c:	4413      	add	r3, r2
 800a43e:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800a440:	6a3b      	ldr	r3, [r7, #32]
 800a442:	e000      	b.n	800a446 <CircularQueue_Add+0x446>
    return NULL;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3738      	adds	r7, #56	; 0x38
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800a44e:	b480      	push	{r7}
 800a450:	b085      	sub	sp, #20
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a458:	2300      	movs	r3, #0
 800a45a:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 800a45c:	2300      	movs	r3, #0
 800a45e:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	891b      	ldrh	r3, [r3, #8]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d101      	bne.n	800a46c <CircularQueue_Remove+0x1e>
 800a468:	2302      	movs	r3, #2
 800a46a:	e000      	b.n	800a46e <CircularQueue_Remove+0x20>
 800a46c:	2300      	movs	r3, #0
 800a46e:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	2200      	movs	r2, #0
 800a474:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f000 80d4 	beq.w	800a628 <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	891b      	ldrh	r3, [r3, #8]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d121      	bne.n	800a4cc <CircularQueue_Remove+0x7e>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	4413      	add	r3, r2
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	b29a      	uxth	r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6819      	ldr	r1, [r3, #0]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	1c58      	adds	r0, r3, #1
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	4298      	cmp	r0, r3
 800a4a6:	d306      	bcc.n	800a4b6 <CircularQueue_Remove+0x68>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	68d8      	ldr	r0, [r3, #12]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	1ac3      	subs	r3, r0, r3
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	e002      	b.n	800a4bc <CircularQueue_Remove+0x6e>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	440b      	add	r3, r1
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	021b      	lsls	r3, r3, #8
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	4413      	add	r3, r2
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	e001      	b.n	800a4d0 <CircularQueue_Remove+0x82>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	891b      	ldrh	r3, [r3, #8]
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	7f1b      	ldrb	r3, [r3, #28]
 800a4d8:	f003 0301 	and.w	r3, r3, #1
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d059      	beq.n	800a594 <CircularQueue_Remove+0x146>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	7f1b      	ldrb	r3, [r3, #28]
 800a4e4:	f003 0302 	and.w	r3, r3, #2
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d153      	bne.n	800a594 <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	881b      	ldrh	r3, [r3, #0]
 800a4f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d103      	bne.n	800a500 <CircularQueue_Remove+0xb2>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	891b      	ldrh	r3, [r3, #8]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d012      	beq.n	800a526 <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	68da      	ldr	r2, [r3, #12]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800a508:	429a      	cmp	r2, r3
 800a50a:	d943      	bls.n	800a594 <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	891b      	ldrh	r3, [r3, #8]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d03f      	beq.n	800a594 <CircularQueue_Remove+0x146>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	685a      	ldr	r2, [r3, #4]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	8912      	ldrh	r2, [r2, #8]
 800a522:	4293      	cmp	r3, r2
 800a524:	d236      	bcs.n	800a594 <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	695a      	ldr	r2, [r3, #20]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	68d9      	ldr	r1, [r3, #12]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	1acb      	subs	r3, r1, r3
 800a534:	441a      	add	r2, r3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	891b      	ldrh	r3, [r3, #8]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d121      	bne.n	800a58c <CircularQueue_Remove+0x13e>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	4413      	add	r3, r2
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	b29a      	uxth	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6819      	ldr	r1, [r3, #0]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	1c58      	adds	r0, r3, #1
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	4298      	cmp	r0, r3
 800a566:	d306      	bcc.n	800a576 <CircularQueue_Remove+0x128>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	68d8      	ldr	r0, [r3, #12]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	1ac3      	subs	r3, r0, r3
 800a572:	3301      	adds	r3, #1
 800a574:	e002      	b.n	800a57c <CircularQueue_Remove+0x12e>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	3301      	adds	r3, #1
 800a57c:	440b      	add	r3, r1
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	b29b      	uxth	r3, r3
 800a582:	021b      	lsls	r3, r3, #8
 800a584:	b29b      	uxth	r3, r3
 800a586:	4413      	add	r3, r2
 800a588:	b29b      	uxth	r3, r3
 800a58a:	e001      	b.n	800a590 <CircularQueue_Remove+0x142>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	891b      	ldrh	r3, [r3, #8]
 800a590:	683a      	ldr	r2, [r7, #0]
 800a592:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	68d9      	ldr	r1, [r3, #12]
 800a59c:	7afb      	ldrb	r3, [r7, #11]
 800a59e:	4419      	add	r1, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	4299      	cmp	r1, r3
 800a5a6:	d307      	bcc.n	800a5b8 <CircularQueue_Remove+0x16a>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	68d9      	ldr	r1, [r3, #12]
 800a5ac:	7afb      	ldrb	r3, [r7, #11]
 800a5ae:	4419      	add	r1, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	1acb      	subs	r3, r1, r3
 800a5b6:	e003      	b.n	800a5c0 <CircularQueue_Remove+0x172>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	68d9      	ldr	r1, [r3, #12]
 800a5bc:	7afb      	ldrb	r3, [r7, #11]
 800a5be:	440b      	add	r3, r1
 800a5c0:	4413      	add	r3, r2
 800a5c2:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	695b      	ldr	r3, [r3, #20]
 800a5c8:	683a      	ldr	r2, [r7, #0]
 800a5ca:	8812      	ldrh	r2, [r2, #0]
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	7afa      	ldrb	r2, [r7, #11]
 800a5d0:	440a      	add	r2, r1
 800a5d2:	1a9a      	subs	r2, r3, r2
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	695b      	ldr	r3, [r3, #20]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d01e      	beq.n	800a61e <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	683a      	ldr	r2, [r7, #0]
 800a5e6:	8812      	ldrh	r2, [r2, #0]
 800a5e8:	441a      	add	r2, r3
 800a5ea:	7afb      	ldrb	r3, [r7, #11]
 800a5ec:	441a      	add	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d30a      	bcc.n	800a60c <CircularQueue_Remove+0x1be>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	8812      	ldrh	r2, [r2, #0]
 800a5fe:	441a      	add	r2, r3
 800a600:	7afb      	ldrb	r3, [r7, #11]
 800a602:	441a      	add	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	e006      	b.n	800a61a <CircularQueue_Remove+0x1cc>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	683a      	ldr	r2, [r7, #0]
 800a612:	8812      	ldrh	r2, [r2, #0]
 800a614:	441a      	add	r2, r3
 800a616:	7afb      	ldrb	r3, [r7, #11]
 800a618:	4413      	add	r3, r2
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	1e5a      	subs	r2, r3, #1
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 800a628:	68fb      	ldr	r3, [r7, #12]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3714      	adds	r7, #20
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr

0800a636 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800a636:	b480      	push	{r7}
 800a638:	b087      	sub	sp, #28
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a640:	2300      	movs	r3, #0
 800a642:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 800a644:	2300      	movs	r3, #0
 800a646:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	891b      	ldrh	r3, [r3, #8]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d101      	bne.n	800a654 <CircularQueue_Sense+0x1e>
 800a650:	2302      	movs	r3, #2
 800a652:	e000      	b.n	800a656 <CircularQueue_Sense+0x20>
 800a654:	2300      	movs	r3, #0
 800a656:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	2200      	movs	r2, #0
 800a65c:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 800a65e:	2300      	movs	r3, #0
 800a660:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	695b      	ldr	r3, [r3, #20]
 800a666:	2b00      	cmp	r3, #0
 800a668:	f000 8093 	beq.w	800a792 <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	891b      	ldrh	r3, [r3, #8]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d121      	bne.n	800a6be <CircularQueue_Sense+0x88>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	4413      	add	r3, r2
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	b29a      	uxth	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6819      	ldr	r1, [r3, #0]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	1c58      	adds	r0, r3, #1
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	4298      	cmp	r0, r3
 800a698:	d306      	bcc.n	800a6a8 <CircularQueue_Sense+0x72>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	68d8      	ldr	r0, [r3, #12]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	1ac3      	subs	r3, r0, r3
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	e002      	b.n	800a6ae <CircularQueue_Sense+0x78>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	440b      	add	r3, r1
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	021b      	lsls	r3, r3, #8
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	4413      	add	r3, r2
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	e001      	b.n	800a6c2 <CircularQueue_Sense+0x8c>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	891b      	ldrh	r3, [r3, #8]
 800a6c2:	683a      	ldr	r2, [r7, #0]
 800a6c4:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	7f1b      	ldrb	r3, [r3, #28]
 800a6ca:	f003 0301 	and.w	r3, r3, #1
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d04a      	beq.n	800a768 <CircularQueue_Sense+0x132>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	7f1b      	ldrb	r3, [r3, #28]
 800a6d6:	f003 0302 	and.w	r3, r3, #2
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d144      	bne.n	800a768 <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	881b      	ldrh	r3, [r3, #0]
 800a6e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d103      	bne.n	800a6f2 <CircularQueue_Sense+0xbc>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	891b      	ldrh	r3, [r3, #8]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d012      	beq.n	800a718 <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	68da      	ldr	r2, [r3, #12]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d934      	bls.n	800a768 <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	891b      	ldrh	r3, [r3, #8]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d030      	beq.n	800a768 <CircularQueue_Sense+0x132>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685a      	ldr	r2, [r3, #4]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	1ad3      	subs	r3, r2, r3
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	8912      	ldrh	r2, [r2, #8]
 800a714:	4293      	cmp	r3, r2
 800a716:	d227      	bcs.n	800a768 <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800a718:	2300      	movs	r3, #0
 800a71a:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	891b      	ldrh	r3, [r3, #8]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d11d      	bne.n	800a760 <CircularQueue_Sense+0x12a>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	4413      	add	r3, r2
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	b29a      	uxth	r2, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6819      	ldr	r1, [r3, #0]
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	1c58      	adds	r0, r3, #1
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	4298      	cmp	r0, r3
 800a73e:	d305      	bcc.n	800a74c <CircularQueue_Sense+0x116>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	6938      	ldr	r0, [r7, #16]
 800a746:	1ac3      	subs	r3, r0, r3
 800a748:	3301      	adds	r3, #1
 800a74a:	e001      	b.n	800a750 <CircularQueue_Sense+0x11a>
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	3301      	adds	r3, #1
 800a750:	440b      	add	r3, r1
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	b29b      	uxth	r3, r3
 800a756:	021b      	lsls	r3, r3, #8
 800a758:	b29b      	uxth	r3, r3
 800a75a:	4413      	add	r3, r2
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	e001      	b.n	800a764 <CircularQueue_Sense+0x12e>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	891b      	ldrh	r3, [r3, #8]
 800a764:	683a      	ldr	r2, [r7, #0]
 800a766:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	7bf9      	ldrb	r1, [r7, #15]
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	4419      	add	r1, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	4299      	cmp	r1, r3
 800a778:	d306      	bcc.n	800a788 <CircularQueue_Sense+0x152>
 800a77a:	7bf9      	ldrb	r1, [r7, #15]
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	4419      	add	r1, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	1acb      	subs	r3, r1, r3
 800a786:	e002      	b.n	800a78e <CircularQueue_Sense+0x158>
 800a788:	7bf9      	ldrb	r1, [r7, #15]
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	440b      	add	r3, r1
 800a78e:	4413      	add	r3, r2
 800a790:	617b      	str	r3, [r7, #20]
  }
  return x;
 800a792:	697b      	ldr	r3, [r7, #20]
}
 800a794:	4618      	mov	r0, r3
 800a796:	371c      	adds	r7, #28
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <BLS_Init>:
 */

/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
__weak void BLS_Init( void )
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	af00      	add	r7, sp, #0
  return;
 800a7a4:	bf00      	nop
}
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr

0800a7ae <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800a7ae:	b480      	push	{r7}
 800a7b0:	af00      	add	r7, sp, #0
  return;
 800a7b2:	bf00      	nop
}
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <DIS_Init>:
__weak void DIS_Init( void )
{
 800a7bc:	b480      	push	{r7}
 800a7be:	af00      	add	r7, sp, #0
  return;
 800a7c0:	bf00      	nop
}
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr

0800a7ca <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800a7ca:	b480      	push	{r7}
 800a7cc:	af00      	add	r7, sp, #0
  return;
 800a7ce:	bf00      	nop
}
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800a7d8:	b480      	push	{r7}
 800a7da:	af00      	add	r7, sp, #0
  return;
 800a7dc:	bf00      	nop
}
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr

0800a7e6 <HRS_Init>:
__weak void HRS_Init( void )
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	af00      	add	r7, sp, #0
  return;
 800a7ea:	bf00      	nop
}
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <HTS_Init>:
__weak void HTS_Init( void )
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	af00      	add	r7, sp, #0
  return;
 800a7f8:	bf00      	nop
}
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr

0800a802 <IAS_Init>:
__weak void IAS_Init( void )
{
 800a802:	b480      	push	{r7}
 800a804:	af00      	add	r7, sp, #0
  return;
 800a806:	bf00      	nop
}
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <LLS_Init>:
__weak void LLS_Init( void )
{
 800a810:	b480      	push	{r7}
 800a812:	af00      	add	r7, sp, #0
  return;
 800a814:	bf00      	nop
}
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr

0800a81e <TPS_Init>:
__weak void TPS_Init( void )
{
 800a81e:	b480      	push	{r7}
 800a820:	af00      	add	r7, sp, #0
  return;
 800a822:	bf00      	nop
}
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <P2PS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
 800a82c:	b480      	push	{r7}
 800a82e:	af00      	add	r7, sp, #0
  return;
 800a830:	bf00      	nop
}
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
 800a83a:	b480      	push	{r7}
 800a83c:	af00      	add	r7, sp, #0
  return;
 800a83e:	bf00      	nop
}
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <MESH_Init>:
__weak void MESH_Init( void )
{
 800a848:	b480      	push	{r7}
 800a84a:	af00      	add	r7, sp, #0
  return;
 800a84c:	bf00      	nop
}
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800a856:	b480      	push	{r7}
 800a858:	af00      	add	r7, sp, #0
  return;
 800a85a:	bf00      	nop
}
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a864:	b580      	push	{r7, lr}
 800a866:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a868:	4b11      	ldr	r3, [pc, #68]	; (800a8b0 <SVCCTL_Init+0x4c>)
 800a86a:	2200      	movs	r2, #0
 800a86c:	751a      	strb	r2, [r3, #20]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a86e:	4b11      	ldr	r3, [pc, #68]	; (800a8b4 <SVCCTL_Init+0x50>)
 800a870:	2200      	movs	r2, #0
 800a872:	711a      	strb	r2, [r3, #4]

  /**
   * Add and Initialize requested services
   */

  BLS_Init();
 800a874:	f7ff ff94 	bl	800a7a0 <BLS_Init>

  CRS_STM_Init();
 800a878:	f7ff ff99 	bl	800a7ae <CRS_STM_Init>

  DIS_Init();
 800a87c:	f7ff ff9e 	bl	800a7bc <DIS_Init>

  EDS_STM_Init();
 800a880:	f7ff ffa3 	bl	800a7ca <EDS_STM_Init>

  HIDS_Init();
 800a884:	f7ff ffa8 	bl	800a7d8 <HIDS_Init>

  HRS_Init();
 800a888:	f7ff ffad 	bl	800a7e6 <HRS_Init>

  HTS_Init();
 800a88c:	f7ff ffb2 	bl	800a7f4 <HTS_Init>

  IAS_Init();
 800a890:	f7ff ffb7 	bl	800a802 <IAS_Init>

  LLS_Init();
 800a894:	f7ff ffbc 	bl	800a810 <LLS_Init>

  TPS_Init();
 800a898:	f7ff ffc1 	bl	800a81e <TPS_Init>

  P2PS_STM_Init();
 800a89c:	f7ff ffc6 	bl	800a82c <P2PS_STM_Init>

  OTAS_STM_Init();
 800a8a0:	f7ff ffcb 	bl	800a83a <OTAS_STM_Init>

  SVCCTL_InitCustomSvc();
 800a8a4:	f7ff ffd7 	bl	800a856 <SVCCTL_InitCustomSvc>
  
  MESH_Init();
 800a8a8:	f7ff ffce 	bl	800a848 <MESH_Init>

  return;
 800a8ac:	bf00      	nop
}
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	200001f8 	.word	0x200001f8
 800a8b4:	20000210 	.word	0x20000210

0800a8b8 <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 800a8c0:	4b09      	ldr	r3, [pc, #36]	; (800a8e8 <SVCCTL_RegisterCltHandler+0x30>)
 800a8c2:	791b      	ldrb	r3, [r3, #4]
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	4a08      	ldr	r2, [pc, #32]	; (800a8e8 <SVCCTL_RegisterCltHandler+0x30>)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 800a8ce:	4b06      	ldr	r3, [pc, #24]	; (800a8e8 <SVCCTL_RegisterCltHandler+0x30>)
 800a8d0:	791b      	ldrb	r3, [r3, #4]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	b2da      	uxtb	r2, r3
 800a8d6:	4b04      	ldr	r3, [pc, #16]	; (800a8e8 <SVCCTL_RegisterCltHandler+0x30>)
 800a8d8:	711a      	strb	r2, [r3, #4]

  return;
 800a8da:	bf00      	nop
}
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	20000210 	.word	0x20000210

0800a8ec <SVCCTL_UserEvtRx>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b086      	sub	sp, #24
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	2bff      	cmp	r3, #255	; 0xff
 800a904:	d000      	beq.n	800a908 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800a906:	e03f      	b.n	800a988 <SVCCTL_UserEvtRx+0x9c>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	3302      	adds	r3, #2
 800a90c:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	881b      	ldrh	r3, [r3, #0]
 800a912:	b29b      	uxth	r3, r3
 800a914:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a918:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a91c:	d000      	beq.n	800a920 <SVCCTL_UserEvtRx+0x34>
          break;
 800a91e:	e032      	b.n	800a986 <SVCCTL_UserEvtRx+0x9a>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a920:	2300      	movs	r3, #0
 800a922:	757b      	strb	r3, [r7, #21]
 800a924:	e00d      	b.n	800a942 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a926:	7d7b      	ldrb	r3, [r7, #21]
 800a928:	4a25      	ldr	r2, [pc, #148]	; (800a9c0 <SVCCTL_UserEvtRx+0xd4>)
 800a92a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	4798      	blx	r3
 800a932:	4603      	mov	r3, r0
 800a934:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a936:	7dfb      	ldrb	r3, [r7, #23]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d108      	bne.n	800a94e <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a93c:	7d7b      	ldrb	r3, [r7, #21]
 800a93e:	3301      	adds	r3, #1
 800a940:	757b      	strb	r3, [r7, #21]
 800a942:	4b1f      	ldr	r3, [pc, #124]	; (800a9c0 <SVCCTL_UserEvtRx+0xd4>)
 800a944:	7d1b      	ldrb	r3, [r3, #20]
 800a946:	7d7a      	ldrb	r2, [r7, #21]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d3ec      	bcc.n	800a926 <SVCCTL_UserEvtRx+0x3a>
 800a94c:	e000      	b.n	800a950 <SVCCTL_UserEvtRx+0x64>
              break;
 800a94e:	bf00      	nop
          event_notification_status = SVCCTL_EvtNotAck;
 800a950:	2300      	movs	r3, #0
 800a952:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800a954:	2300      	movs	r3, #0
 800a956:	757b      	strb	r3, [r7, #21]
 800a958:	e00d      	b.n	800a976 <SVCCTL_UserEvtRx+0x8a>
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800a95a:	7d7b      	ldrb	r3, [r7, #21]
 800a95c:	4a19      	ldr	r2, [pc, #100]	; (800a9c4 <SVCCTL_UserEvtRx+0xd8>)
 800a95e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	4798      	blx	r3
 800a966:	4603      	mov	r3, r0
 800a968:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a96a:	7dfb      	ldrb	r3, [r7, #23]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d108      	bne.n	800a982 <SVCCTL_UserEvtRx+0x96>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800a970:	7d7b      	ldrb	r3, [r7, #21]
 800a972:	3301      	adds	r3, #1
 800a974:	757b      	strb	r3, [r7, #21]
 800a976:	4b13      	ldr	r3, [pc, #76]	; (800a9c4 <SVCCTL_UserEvtRx+0xd8>)
 800a978:	791b      	ldrb	r3, [r3, #4]
 800a97a:	7d7a      	ldrb	r2, [r7, #21]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d3ec      	bcc.n	800a95a <SVCCTL_UserEvtRx+0x6e>
          break;
 800a980:	e000      	b.n	800a984 <SVCCTL_UserEvtRx+0x98>
              break;
 800a982:	bf00      	nop
          break;
 800a984:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800a986:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800a988:	7dfb      	ldrb	r3, [r7, #23]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d009      	beq.n	800a9a2 <SVCCTL_UserEvtRx+0xb6>
 800a98e:	2b02      	cmp	r3, #2
 800a990:	d00a      	beq.n	800a9a8 <SVCCTL_UserEvtRx+0xbc>
 800a992:	2b00      	cmp	r3, #0
 800a994:	d10b      	bne.n	800a9ae <SVCCTL_UserEvtRx+0xc2>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f7f7 fcb8 	bl	800230c <SVCCTL_App_Notification>
 800a99c:	4603      	mov	r3, r0
 800a99e:	75bb      	strb	r3, [r7, #22]
      break;
 800a9a0:	e008      	b.n	800a9b4 <SVCCTL_UserEvtRx+0xc8>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	75bb      	strb	r3, [r7, #22]
      break;
 800a9a6:	e005      	b.n	800a9b4 <SVCCTL_UserEvtRx+0xc8>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	75bb      	strb	r3, [r7, #22]
      break;
 800a9ac:	e002      	b.n	800a9b4 <SVCCTL_UserEvtRx+0xc8>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	75bb      	strb	r3, [r7, #22]
      break;
 800a9b2:	bf00      	nop
  }

  return (return_status);
 800a9b4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3718      	adds	r7, #24
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	200001f8 	.word	0x200001f8
 800a9c4:	20000210 	.word	0x20000210

0800a9c8 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a9cc:	f7f8 fee0 	bl	8003790 <HW_IPCC_Enable>

  return;
 800a9d0:	bf00      	nop
}
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <TL_Init>:


void TL_Init( void )
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a9d8:	4b0d      	ldr	r3, [pc, #52]	; (800aa10 <TL_Init+0x3c>)
 800a9da:	4a0e      	ldr	r2, [pc, #56]	; (800aa14 <TL_Init+0x40>)
 800a9dc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a9de:	4b0c      	ldr	r3, [pc, #48]	; (800aa10 <TL_Init+0x3c>)
 800a9e0:	4a0d      	ldr	r2, [pc, #52]	; (800aa18 <TL_Init+0x44>)
 800a9e2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a9e4:	4b0a      	ldr	r3, [pc, #40]	; (800aa10 <TL_Init+0x3c>)
 800a9e6:	4a0d      	ldr	r2, [pc, #52]	; (800aa1c <TL_Init+0x48>)
 800a9e8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a9ea:	4b09      	ldr	r3, [pc, #36]	; (800aa10 <TL_Init+0x3c>)
 800a9ec:	4a0c      	ldr	r2, [pc, #48]	; (800aa20 <TL_Init+0x4c>)
 800a9ee:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a9f0:	4b07      	ldr	r3, [pc, #28]	; (800aa10 <TL_Init+0x3c>)
 800a9f2:	4a0c      	ldr	r2, [pc, #48]	; (800aa24 <TL_Init+0x50>)
 800a9f4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a9f6:	4b06      	ldr	r3, [pc, #24]	; (800aa10 <TL_Init+0x3c>)
 800a9f8:	4a0b      	ldr	r2, [pc, #44]	; (800aa28 <TL_Init+0x54>)
 800a9fa:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a9fc:	4b04      	ldr	r3, [pc, #16]	; (800aa10 <TL_Init+0x3c>)
 800a9fe:	4a0b      	ldr	r2, [pc, #44]	; (800aa2c <TL_Init+0x58>)
 800aa00:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800aa02:	4b03      	ldr	r3, [pc, #12]	; (800aa10 <TL_Init+0x3c>)
 800aa04:	4a0a      	ldr	r2, [pc, #40]	; (800aa30 <TL_Init+0x5c>)
 800aa06:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800aa08:	f7f8 feca 	bl	80037a0 <HW_IPCC_Init>

  return;
 800aa0c:	bf00      	nop
}
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	20030000 	.word	0x20030000
 800aa14:	2003012c 	.word	0x2003012c
 800aa18:	2003014c 	.word	0x2003014c
 800aa1c:	2003015c 	.word	0x2003015c
 800aa20:	20030168 	.word	0x20030168
 800aa24:	20030170 	.word	0x20030170
 800aa28:	2003018c 	.word	0x2003018c
 800aa2c:	20030190 	.word	0x20030190
 800aa30:	2003019c 	.word	0x2003019c

0800aa34 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800aa40:	4811      	ldr	r0, [pc, #68]	; (800aa88 <TL_BLE_Init+0x54>)
 800aa42:	f7ff f9f7 	bl	8009e34 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800aa46:	4b11      	ldr	r3, [pc, #68]	; (800aa8c <TL_BLE_Init+0x58>)
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	689a      	ldr	r2, [r3, #8]
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	68da      	ldr	r2, [r3, #12]
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	4a0c      	ldr	r2, [pc, #48]	; (800aa90 <TL_BLE_Init+0x5c>)
 800aa60:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	4a08      	ldr	r2, [pc, #32]	; (800aa88 <TL_BLE_Init+0x54>)
 800aa66:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800aa68:	f7f8 feb0 	bl	80037cc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a08      	ldr	r2, [pc, #32]	; (800aa94 <TL_BLE_Init+0x60>)
 800aa72:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	4a07      	ldr	r2, [pc, #28]	; (800aa98 <TL_BLE_Init+0x64>)
 800aa7a:	6013      	str	r3, [r2, #0]

  return 0;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20030a24 	.word	0x20030a24
 800aa8c:	20030000 	.word	0x20030000
 800aa90:	20030a14 	.word	0x20030a14
 800aa94:	200012e0 	.word	0x200012e0
 800aa98:	200012e4 	.word	0x200012e4

0800aa9c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800aaa8:	4b05      	ldr	r3, [pc, #20]	; (800aac0 <TL_BLE_SendCmd+0x24>)
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2201      	movs	r2, #1
 800aab0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800aab2:	f7f8 fe95 	bl	80037e0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	20030000 	.word	0x20030000

0800aac4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800aaca:	e009      	b.n	800aae0 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800aacc:	1d3b      	adds	r3, r7, #4
 800aace:	4619      	mov	r1, r3
 800aad0:	4808      	ldr	r0, [pc, #32]	; (800aaf4 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800aad2:	f7ff fa46 	bl	8009f62 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800aad6:	4b08      	ldr	r3, [pc, #32]	; (800aaf8 <HW_IPCC_BLE_RxEvtNot+0x34>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	4610      	mov	r0, r2
 800aade:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800aae0:	4804      	ldr	r0, [pc, #16]	; (800aaf4 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800aae2:	f7ff f9b7 	bl	8009e54 <LST_is_empty>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d0ef      	beq.n	800aacc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800aaec:	bf00      	nop
}
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	20030a24 	.word	0x20030a24
 800aaf8:	200012e0 	.word	0x200012e0

0800aafc <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800ab00:	4b02      	ldr	r3, [pc, #8]	; (800ab0c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4798      	blx	r3

  return;
 800ab06:	bf00      	nop
}
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	200012e4 	.word	0x200012e4

0800ab10 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800ab1c:	480d      	ldr	r0, [pc, #52]	; (800ab54 <TL_SYS_Init+0x44>)
 800ab1e:	f7ff f989 	bl	8009e34 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800ab22:	4b0d      	ldr	r3, [pc, #52]	; (800ab58 <TL_SYS_Init+0x48>)
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	689a      	ldr	r2, [r3, #8]
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	4a08      	ldr	r2, [pc, #32]	; (800ab54 <TL_SYS_Init+0x44>)
 800ab34:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800ab36:	f7f8 fe75 	bl	8003824 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a07      	ldr	r2, [pc, #28]	; (800ab5c <TL_SYS_Init+0x4c>)
 800ab40:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	4a06      	ldr	r2, [pc, #24]	; (800ab60 <TL_SYS_Init+0x50>)
 800ab48:	6013      	str	r3, [r2, #0]

  return 0;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3710      	adds	r7, #16
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	20030a2c 	.word	0x20030a2c
 800ab58:	20030000 	.word	0x20030000
 800ab5c:	200012e8 	.word	0x200012e8
 800ab60:	200012ec 	.word	0x200012ec

0800ab64 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800ab70:	4b05      	ldr	r3, [pc, #20]	; (800ab88 <TL_SYS_SendCmd+0x24>)
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2210      	movs	r2, #16
 800ab78:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800ab7a:	f7f8 fe5d 	bl	8003838 <HW_IPCC_SYS_SendCmd>

  return 0;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	20030000 	.word	0x20030000

0800ab8c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ab90:	4b04      	ldr	r3, [pc, #16]	; (800aba4 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a04      	ldr	r2, [pc, #16]	; (800aba8 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800ab96:	68d2      	ldr	r2, [r2, #12]
 800ab98:	6812      	ldr	r2, [r2, #0]
 800ab9a:	4610      	mov	r0, r2
 800ab9c:	4798      	blx	r3

  return;
 800ab9e:	bf00      	nop
}
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	200012e8 	.word	0x200012e8
 800aba8:	20030000 	.word	0x20030000

0800abac <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800abb2:	e009      	b.n	800abc8 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800abb4:	1d3b      	adds	r3, r7, #4
 800abb6:	4619      	mov	r1, r3
 800abb8:	4808      	ldr	r0, [pc, #32]	; (800abdc <HW_IPCC_SYS_EvtNot+0x30>)
 800abba:	f7ff f9d2 	bl	8009f62 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800abbe:	4b08      	ldr	r3, [pc, #32]	; (800abe0 <HW_IPCC_SYS_EvtNot+0x34>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	4610      	mov	r0, r2
 800abc6:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800abc8:	4804      	ldr	r0, [pc, #16]	; (800abdc <HW_IPCC_SYS_EvtNot+0x30>)
 800abca:	f7ff f943 	bl	8009e54 <LST_is_empty>
 800abce:	4603      	mov	r3, r0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d0ef      	beq.n	800abb4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800abd4:	bf00      	nop
}
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	20030a2c 	.word	0x20030a2c
 800abe0:	200012ec 	.word	0x200012ec

0800abe4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800abec:	4817      	ldr	r0, [pc, #92]	; (800ac4c <TL_MM_Init+0x68>)
 800abee:	f7ff f921 	bl	8009e34 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800abf2:	4817      	ldr	r0, [pc, #92]	; (800ac50 <TL_MM_Init+0x6c>)
 800abf4:	f7ff f91e 	bl	8009e34 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800abf8:	4b16      	ldr	r3, [pc, #88]	; (800ac54 <TL_MM_Init+0x70>)
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	4a16      	ldr	r2, [pc, #88]	; (800ac58 <TL_MM_Init+0x74>)
 800abfe:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800ac00:	4b15      	ldr	r3, [pc, #84]	; (800ac58 <TL_MM_Init+0x74>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	6892      	ldr	r2, [r2, #8]
 800ac08:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ac0a:	4b13      	ldr	r3, [pc, #76]	; (800ac58 <TL_MM_Init+0x74>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	68d2      	ldr	r2, [r2, #12]
 800ac12:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800ac14:	4b10      	ldr	r3, [pc, #64]	; (800ac58 <TL_MM_Init+0x74>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a0c      	ldr	r2, [pc, #48]	; (800ac4c <TL_MM_Init+0x68>)
 800ac1a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800ac1c:	4b0e      	ldr	r3, [pc, #56]	; (800ac58 <TL_MM_Init+0x74>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	6812      	ldr	r2, [r2, #0]
 800ac24:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800ac26:	4b0c      	ldr	r3, [pc, #48]	; (800ac58 <TL_MM_Init+0x74>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	6852      	ldr	r2, [r2, #4]
 800ac2e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800ac30:	4b09      	ldr	r3, [pc, #36]	; (800ac58 <TL_MM_Init+0x74>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	6912      	ldr	r2, [r2, #16]
 800ac38:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800ac3a:	4b07      	ldr	r3, [pc, #28]	; (800ac58 <TL_MM_Init+0x74>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	6952      	ldr	r2, [r2, #20]
 800ac42:	619a      	str	r2, [r3, #24]

  return;
 800ac44:	bf00      	nop
}
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	200301a4 	.word	0x200301a4
 800ac50:	200012d8 	.word	0x200012d8
 800ac54:	20030000 	.word	0x20030000
 800ac58:	200012f0 	.word	0x200012f0

0800ac5c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800ac64:	6879      	ldr	r1, [r7, #4]
 800ac66:	4805      	ldr	r0, [pc, #20]	; (800ac7c <TL_MM_EvtDone+0x20>)
 800ac68:	f7ff f938 	bl	8009edc <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800ac6c:	4804      	ldr	r0, [pc, #16]	; (800ac80 <TL_MM_EvtDone+0x24>)
 800ac6e:	f7f8 fe09 	bl	8003884 <HW_IPCC_MM_SendFreeBuf>

  return;
 800ac72:	bf00      	nop
}
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	200012d8 	.word	0x200012d8
 800ac80:	0800ac85 	.word	0x0800ac85

0800ac84 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ac8a:	e00c      	b.n	800aca6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800ac8c:	1d3b      	adds	r3, r7, #4
 800ac8e:	4619      	mov	r1, r3
 800ac90:	480a      	ldr	r0, [pc, #40]	; (800acbc <SendFreeBuf+0x38>)
 800ac92:	f7ff f966 	bl	8009f62 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800ac96:	4b0a      	ldr	r3, [pc, #40]	; (800acc0 <SendFreeBuf+0x3c>)
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	691b      	ldr	r3, [r3, #16]
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	4611      	mov	r1, r2
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7ff f91b 	bl	8009edc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800aca6:	4805      	ldr	r0, [pc, #20]	; (800acbc <SendFreeBuf+0x38>)
 800aca8:	f7ff f8d4 	bl	8009e54 <LST_is_empty>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d0ec      	beq.n	800ac8c <SendFreeBuf+0x8>
  }

  return;
 800acb2:	bf00      	nop
}
 800acb4:	3708      	adds	r7, #8
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	200012d8 	.word	0x200012d8
 800acc0:	20030000 	.word	0x20030000

0800acc4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800acc8:	4805      	ldr	r0, [pc, #20]	; (800ace0 <TL_TRACES_Init+0x1c>)
 800acca:	f7ff f8b3 	bl	8009e34 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800acce:	4b05      	ldr	r3, [pc, #20]	; (800ace4 <TL_TRACES_Init+0x20>)
 800acd0:	695b      	ldr	r3, [r3, #20]
 800acd2:	4a03      	ldr	r2, [pc, #12]	; (800ace0 <TL_TRACES_Init+0x1c>)
 800acd4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800acd6:	f7f8 fe0b 	bl	80038f0 <HW_IPCC_TRACES_Init>

  return;
 800acda:	bf00      	nop
}
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	200301ac 	.word	0x200301ac
 800ace4:	20030000 	.word	0x20030000

0800ace8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800acee:	e008      	b.n	800ad02 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800acf0:	1d3b      	adds	r3, r7, #4
 800acf2:	4619      	mov	r1, r3
 800acf4:	4808      	ldr	r0, [pc, #32]	; (800ad18 <HW_IPCC_TRACES_EvtNot+0x30>)
 800acf6:	f7ff f934 	bl	8009f62 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4618      	mov	r0, r3
 800acfe:	f000 f80d 	bl	800ad1c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ad02:	4805      	ldr	r0, [pc, #20]	; (800ad18 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ad04:	f7ff f8a6 	bl	8009e54 <LST_is_empty>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d0f0      	beq.n	800acf0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800ad0e:	bf00      	nop
}
 800ad10:	3708      	adds	r7, #8
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	200301ac 	.word	0x200301ac

0800ad1c <TL_TRACES_EvtReceived>:

__weak void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 800ad30:	b480      	push	{r7}
 800ad32:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ad34:	4b05      	ldr	r3, [pc, #20]	; (800ad4c <UTIL_LPM_Init+0x1c>)
 800ad36:	2200      	movs	r2, #0
 800ad38:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ad3a:	4b05      	ldr	r3, [pc, #20]	; (800ad50 <UTIL_LPM_Init+0x20>)
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800ad40:	bf00      	nop
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	200012f4 	.word	0x200012f4
 800ad50:	200012f8 	.word	0x200012f8

0800ad54 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ad54:	b480      	push	{r7}
 800ad56:	b087      	sub	sp, #28
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad60:	f3ef 8310 	mrs	r3, PRIMASK
 800ad64:	613b      	str	r3, [r7, #16]
  return(result);
 800ad66:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ad68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad6a:	b672      	cpsid	i
  
  switch(state)
 800ad6c:	78fb      	ldrb	r3, [r7, #3]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d009      	beq.n	800ad86 <UTIL_LPM_SetOffMode+0x32>
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d000      	beq.n	800ad78 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 800ad76:	e00e      	b.n	800ad96 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 800ad78:	4b0c      	ldr	r3, [pc, #48]	; (800adac <UTIL_LPM_SetOffMode+0x58>)
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	4a0a      	ldr	r2, [pc, #40]	; (800adac <UTIL_LPM_SetOffMode+0x58>)
 800ad82:	6013      	str	r3, [r2, #0]
      break;
 800ad84:	e007      	b.n	800ad96 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	43da      	mvns	r2, r3
 800ad8a:	4b08      	ldr	r3, [pc, #32]	; (800adac <UTIL_LPM_SetOffMode+0x58>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4013      	ands	r3, r2
 800ad90:	4a06      	ldr	r2, [pc, #24]	; (800adac <UTIL_LPM_SetOffMode+0x58>)
 800ad92:	6013      	str	r3, [r2, #0]
      break;
 800ad94:	bf00      	nop
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ada0:	bf00      	nop
 800ada2:	371c      	adds	r7, #28
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	200012f8 	.word	0x200012f8

0800adb0 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t mask_bm )
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b08c      	sub	sp, #48	; 0x30
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800adb8:	4b63      	ldr	r3, [pc, #396]	; (800af48 <UTIL_SEQ_Run+0x198>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= mask_bm;
 800adbe:	4b62      	ldr	r3, [pc, #392]	; (800af48 <UTIL_SEQ_Run+0x198>)
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4013      	ands	r3, r2
 800adc6:	4a60      	ldr	r2, [pc, #384]	; (800af48 <UTIL_SEQ_Run+0x198>)
 800adc8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800adca:	e082      	b.n	800aed2 <UTIL_SEQ_Run+0x122>
  {
    counter = 0;
 800adcc:	2300      	movs	r3, #0
 800adce:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 800add0:	e002      	b.n	800add8 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800add2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add4:	3301      	adds	r3, #1
 800add6:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 800add8:	4a5c      	ldr	r2, [pc, #368]	; (800af4c <UTIL_SEQ_Run+0x19c>)
 800adda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800addc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ade0:	4b5b      	ldr	r3, [pc, #364]	; (800af50 <UTIL_SEQ_Run+0x1a0>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	401a      	ands	r2, r3
 800ade6:	4b58      	ldr	r3, [pc, #352]	; (800af48 <UTIL_SEQ_Run+0x198>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4013      	ands	r3, r2
 800adec:	2b00      	cmp	r3, #0
 800adee:	d0f0      	beq.n	800add2 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800adf0:	4a56      	ldr	r2, [pc, #344]	; (800af4c <UTIL_SEQ_Run+0x19c>)
 800adf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800adf8:	4b55      	ldr	r3, [pc, #340]	; (800af50 <UTIL_SEQ_Run+0x1a0>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	401a      	ands	r2, r3
 800adfe:	4b52      	ldr	r3, [pc, #328]	; (800af48 <UTIL_SEQ_Run+0x198>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4013      	ands	r3, r2
 800ae04:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if (!(TaskPrio[counter].round_robin & current_task_set))
 800ae06:	4a51      	ldr	r2, [pc, #324]	; (800af4c <UTIL_SEQ_Run+0x19c>)
 800ae08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0a:	00db      	lsls	r3, r3, #3
 800ae0c:	4413      	add	r3, r2
 800ae0e:	685a      	ldr	r2, [r3, #4]
 800ae10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae12:	4013      	ands	r3, r2
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d106      	bne.n	800ae26 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800ae18:	4a4c      	ldr	r2, [pc, #304]	; (800af4c <UTIL_SEQ_Run+0x19c>)
 800ae1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae1c:	00db      	lsls	r3, r3, #3
 800ae1e:	4413      	add	r3, r2
 800ae20:	f04f 32ff 	mov.w	r2, #4294967295
 800ae24:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 800ae26:	4a49      	ldr	r2, [pc, #292]	; (800af4c <UTIL_SEQ_Run+0x19c>)
 800ae28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2a:	00db      	lsls	r3, r3, #3
 800ae2c:	4413      	add	r3, r2
 800ae2e:	685a      	ldr	r2, [r3, #4]
 800ae30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae32:	4013      	ands	r3, r2
 800ae34:	4618      	mov	r0, r3
 800ae36:	f000 f97d 	bl	800b134 <bit_position>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	4b45      	ldr	r3, [pc, #276]	; (800af54 <UTIL_SEQ_Run+0x1a4>)
 800ae3e:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 800ae40:	4a42      	ldr	r2, [pc, #264]	; (800af4c <UTIL_SEQ_Run+0x19c>)
 800ae42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae44:	00db      	lsls	r3, r3, #3
 800ae46:	4413      	add	r3, r2
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	4a42      	ldr	r2, [pc, #264]	; (800af54 <UTIL_SEQ_Run+0x1a4>)
 800ae4c:	6812      	ldr	r2, [r2, #0]
 800ae4e:	2101      	movs	r1, #1
 800ae50:	fa01 f202 	lsl.w	r2, r1, r2
 800ae54:	43d2      	mvns	r2, r2
 800ae56:	401a      	ands	r2, r3
 800ae58:	493c      	ldr	r1, [pc, #240]	; (800af4c <UTIL_SEQ_Run+0x19c>)
 800ae5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5c:	00db      	lsls	r3, r3, #3
 800ae5e:	440b      	add	r3, r1
 800ae60:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae62:	f3ef 8310 	mrs	r3, PRIMASK
 800ae66:	61bb      	str	r3, [r7, #24]
  return(result);
 800ae68:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ae6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae6c:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1 << (CurrentTaskIdx));
 800ae6e:	4b39      	ldr	r3, [pc, #228]	; (800af54 <UTIL_SEQ_Run+0x1a4>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2201      	movs	r2, #1
 800ae74:	fa02 f303 	lsl.w	r3, r2, r3
 800ae78:	43db      	mvns	r3, r3
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	4b36      	ldr	r3, [pc, #216]	; (800af58 <UTIL_SEQ_Run+0x1a8>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4013      	ands	r3, r2
 800ae82:	4a35      	ldr	r2, [pc, #212]	; (800af58 <UTIL_SEQ_Run+0x1a8>)
 800ae84:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 800ae86:	2302      	movs	r3, #2
 800ae88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae8a:	e014      	b.n	800aeb6 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 800ae8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	4a2e      	ldr	r2, [pc, #184]	; (800af4c <UTIL_SEQ_Run+0x19c>)
 800ae92:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ae96:	4b2f      	ldr	r3, [pc, #188]	; (800af54 <UTIL_SEQ_Run+0x1a4>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2101      	movs	r1, #1
 800ae9c:	fa01 f303 	lsl.w	r3, r1, r3
 800aea0:	43db      	mvns	r3, r3
 800aea2:	4619      	mov	r1, r3
 800aea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea6:	3b01      	subs	r3, #1
 800aea8:	400a      	ands	r2, r1
 800aeaa:	4928      	ldr	r1, [pc, #160]	; (800af4c <UTIL_SEQ_Run+0x19c>)
 800aeac:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 800aeb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aeb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d1e7      	bne.n	800ae8c <UTIL_SEQ_Run+0xdc>
 800aebc:	6a3b      	ldr	r3, [r7, #32]
 800aebe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800aec6:	4b23      	ldr	r3, [pc, #140]	; (800af54 <UTIL_SEQ_Run+0x1a4>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4a24      	ldr	r2, [pc, #144]	; (800af5c <UTIL_SEQ_Run+0x1ac>)
 800aecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aed0:	4798      	blx	r3
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800aed2:	4b21      	ldr	r3, [pc, #132]	; (800af58 <UTIL_SEQ_Run+0x1a8>)
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	4b1e      	ldr	r3, [pc, #120]	; (800af50 <UTIL_SEQ_Run+0x1a0>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	401a      	ands	r2, r3
 800aedc:	4b1a      	ldr	r3, [pc, #104]	; (800af48 <UTIL_SEQ_Run+0x198>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4013      	ands	r3, r2
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d007      	beq.n	800aef6 <UTIL_SEQ_Run+0x146>
 800aee6:	4b1e      	ldr	r3, [pc, #120]	; (800af60 <UTIL_SEQ_Run+0x1b0>)
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	4b1e      	ldr	r3, [pc, #120]	; (800af64 <UTIL_SEQ_Run+0x1b4>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4013      	ands	r3, r2
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f43f af6b 	beq.w	800adcc <UTIL_SEQ_Run+0x1c>
  }

  UTIL_SEQ_PreIdle( );
 800aef6:	f000 f90f 	bl	800b118 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aefa:	f3ef 8310 	mrs	r3, PRIMASK
 800aefe:	613b      	str	r3, [r7, #16]
  return(result);
 800af00:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800af02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800af04:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 800af06:	4b14      	ldr	r3, [pc, #80]	; (800af58 <UTIL_SEQ_Run+0x1a8>)
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	4b11      	ldr	r3, [pc, #68]	; (800af50 <UTIL_SEQ_Run+0x1a0>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	401a      	ands	r2, r3
 800af10:	4b0d      	ldr	r3, [pc, #52]	; (800af48 <UTIL_SEQ_Run+0x198>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4013      	ands	r3, r2
 800af16:	2b00      	cmp	r3, #0
 800af18:	d108      	bne.n	800af2c <UTIL_SEQ_Run+0x17c>
 800af1a:	4b11      	ldr	r3, [pc, #68]	; (800af60 <UTIL_SEQ_Run+0x1b0>)
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	4b11      	ldr	r3, [pc, #68]	; (800af64 <UTIL_SEQ_Run+0x1b4>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4013      	ands	r3, r2
 800af24:	2b00      	cmp	r3, #0
 800af26:	d101      	bne.n	800af2c <UTIL_SEQ_Run+0x17c>
  {
    UTIL_SEQ_Idle( );
 800af28:	f7f5 fc7f 	bl	800082a <UTIL_SEQ_Idle>
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 800af36:	f000 f8f6 	bl	800b126 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800af3a:	4a03      	ldr	r2, [pc, #12]	; (800af48 <UTIL_SEQ_Run+0x198>)
 800af3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3e:	6013      	str	r3, [r2, #0]

  return;
 800af40:	bf00      	nop
}
 800af42:	3730      	adds	r7, #48	; 0x30
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	20000034 	.word	0x20000034
 800af4c:	2000138c 	.word	0x2000138c
 800af50:	20000030 	.word	0x20000030
 800af54:	20001308 	.word	0x20001308
 800af58:	200012fc 	.word	0x200012fc
 800af5c:	2000130c 	.word	0x2000130c
 800af60:	20001300 	.word	0x20001300
 800af64:	20001304 	.word	0x20001304

0800af68 <UTIL_SEQ_RegTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_RegTask( UTIL_SEQ_bm_t task_id_bm , uint32_t flags, void (*task)( void ) )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b088      	sub	sp, #32
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af74:	f3ef 8310 	mrs	r3, PRIMASK
 800af78:	617b      	str	r3, [r7, #20]
  return(result);
 800af7a:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800af7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800af7e:	b672      	cpsid	i

  TaskCb[bit_position(task_id_bm)] = task;
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f000 f8d7 	bl	800b134 <bit_position>
 800af86:	4601      	mov	r1, r0
 800af88:	4a06      	ldr	r2, [pc, #24]	; (800afa4 <UTIL_SEQ_RegTask+0x3c>)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800af9a:	bf00      	nop
}
 800af9c:	3720      	adds	r7, #32
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	2000130c 	.word	0x2000130c

0800afa8 <UTIL_SEQ_SetTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t task_id_bm , uint32_t task_prio )
{
 800afa8:	b480      	push	{r7}
 800afaa:	b087      	sub	sp, #28
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afb2:	f3ef 8310 	mrs	r3, PRIMASK
 800afb6:	60fb      	str	r3, [r7, #12]
  return(result);
 800afb8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800afba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800afbc:	b672      	cpsid	i

  TaskSet |= task_id_bm;
 800afbe:	4b0d      	ldr	r3, [pc, #52]	; (800aff4 <UTIL_SEQ_SetTask+0x4c>)
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4313      	orrs	r3, r2
 800afc6:	4a0b      	ldr	r2, [pc, #44]	; (800aff4 <UTIL_SEQ_SetTask+0x4c>)
 800afc8:	6013      	str	r3, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 800afca:	4a0b      	ldr	r2, [pc, #44]	; (800aff8 <UTIL_SEQ_SetTask+0x50>)
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	431a      	orrs	r2, r3
 800afd6:	4908      	ldr	r1, [pc, #32]	; (800aff8 <UTIL_SEQ_SetTask+0x50>)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800afe8:	bf00      	nop
}
 800afea:	371c      	adds	r7, #28
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr
 800aff4:	200012fc 	.word	0x200012fc
 800aff8:	2000138c 	.word	0x2000138c

0800affc <UTIL_SEQ_PauseTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t task_id_bm )
{
 800affc:	b480      	push	{r7}
 800affe:	b087      	sub	sp, #28
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b004:	f3ef 8310 	mrs	r3, PRIMASK
 800b008:	60fb      	str	r3, [r7, #12]
  return(result);
 800b00a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b00c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b00e:	b672      	cpsid	i

  TaskMask &= (~task_id_bm);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	43da      	mvns	r2, r3
 800b014:	4b07      	ldr	r3, [pc, #28]	; (800b034 <UTIL_SEQ_PauseTask+0x38>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4013      	ands	r3, r2
 800b01a:	4a06      	ldr	r2, [pc, #24]	; (800b034 <UTIL_SEQ_PauseTask+0x38>)
 800b01c:	6013      	str	r3, [r2, #0]
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b028:	bf00      	nop
}
 800b02a:	371c      	adds	r7, #28
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr
 800b034:	20000030 	.word	0x20000030

0800b038 <UTIL_SEQ_ResumeTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t task_id_bm )
{
 800b038:	b480      	push	{r7}
 800b03a:	b087      	sub	sp, #28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b040:	f3ef 8310 	mrs	r3, PRIMASK
 800b044:	60fb      	str	r3, [r7, #12]
  return(result);
 800b046:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b048:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b04a:	b672      	cpsid	i

  TaskMask |= task_id_bm;
 800b04c:	4b08      	ldr	r3, [pc, #32]	; (800b070 <UTIL_SEQ_ResumeTask+0x38>)
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4313      	orrs	r3, r2
 800b054:	4a06      	ldr	r2, [pc, #24]	; (800b070 <UTIL_SEQ_ResumeTask+0x38>)
 800b056:	6013      	str	r3, [r2, #0]
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b062:	bf00      	nop
}
 800b064:	371c      	adds	r7, #28
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	20000030 	.word	0x20000030

0800b074 <UTIL_SEQ_SetEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 800b074:	b480      	push	{r7}
 800b076:	b087      	sub	sp, #28
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b07c:	f3ef 8310 	mrs	r3, PRIMASK
 800b080:	60fb      	str	r3, [r7, #12]
  return(result);
 800b082:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b084:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b086:	b672      	cpsid	i

  EvtSet |= evt_id_bm;
 800b088:	4b08      	ldr	r3, [pc, #32]	; (800b0ac <UTIL_SEQ_SetEvt+0x38>)
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4313      	orrs	r3, r2
 800b090:	4a06      	ldr	r2, [pc, #24]	; (800b0ac <UTIL_SEQ_SetEvt+0x38>)
 800b092:	6013      	str	r3, [r2, #0]
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b09e:	bf00      	nop
}
 800b0a0:	371c      	adds	r7, #28
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	20001300 	.word	0x20001300

0800b0b0 <UTIL_SEQ_WaitEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_WaitEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_id_bm;

  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_id_bm = (1 << CurrentTaskIdx);
 800b0b8:	4b14      	ldr	r3, [pc, #80]	; (800b10c <UTIL_SEQ_WaitEvt+0x5c>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2201      	movs	r2, #1
 800b0be:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c2:	60fb      	str	r3, [r7, #12]

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800b0c4:	4b12      	ldr	r3, [pc, #72]	; (800b110 <UTIL_SEQ_WaitEvt+0x60>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	60bb      	str	r3, [r7, #8]
  EvtWaited = evt_id_bm;
 800b0ca:	4a11      	ldr	r2, [pc, #68]	; (800b110 <UTIL_SEQ_WaitEvt+0x60>)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 800b0d0:	e005      	b.n	800b0de <UTIL_SEQ_WaitEvt+0x2e>
  {
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 800b0d2:	4b0f      	ldr	r3, [pc, #60]	; (800b110 <UTIL_SEQ_WaitEvt+0x60>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f7f5 fbad 	bl	8000838 <UTIL_SEQ_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 800b0de:	4b0d      	ldr	r3, [pc, #52]	; (800b114 <UTIL_SEQ_WaitEvt+0x64>)
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	4b0b      	ldr	r3, [pc, #44]	; (800b110 <UTIL_SEQ_WaitEvt+0x60>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d0f2      	beq.n	800b0d2 <UTIL_SEQ_WaitEvt+0x22>
  }
  EvtSet &= (~EvtWaited);
 800b0ec:	4b08      	ldr	r3, [pc, #32]	; (800b110 <UTIL_SEQ_WaitEvt+0x60>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	43da      	mvns	r2, r3
 800b0f2:	4b08      	ldr	r3, [pc, #32]	; (800b114 <UTIL_SEQ_WaitEvt+0x64>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4013      	ands	r3, r2
 800b0f8:	4a06      	ldr	r2, [pc, #24]	; (800b114 <UTIL_SEQ_WaitEvt+0x64>)
 800b0fa:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800b0fc:	4a04      	ldr	r2, [pc, #16]	; (800b110 <UTIL_SEQ_WaitEvt+0x60>)
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	6013      	str	r3, [r2, #0]

  return;
 800b102:	bf00      	nop
}
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	20001308 	.word	0x20001308
 800b110:	20001304 	.word	0x20001304
 800b114:	20001300 	.word	0x20001300

0800b118 <UTIL_SEQ_PreIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b118:	b480      	push	{r7}
 800b11a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b11c:	bf00      	nop
}
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr

0800b126 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b126:	b480      	push	{r7}
 800b128:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b12a:	bf00      	nop
}
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <bit_position>:

#if( __CORTEX_M == 0)
static const uint8_t clz_table_4bit[16] = { 4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };	
static uint32_t bit_position(uint32_t value)
{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]

  uint32_t n = 0;
 800b13c:	2300      	movs	r3, #0
 800b13e:	60fb      	str	r3, [r7, #12]

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	0c1b      	lsrs	r3, r3, #16
 800b144:	041b      	lsls	r3, r3, #16
 800b146:	2b00      	cmp	r3, #0
 800b148:	d104      	bne.n	800b154 <bit_position+0x20>
 800b14a:	2310      	movs	r3, #16
 800b14c:	60fb      	str	r3, [r7, #12]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	041b      	lsls	r3, r3, #16
 800b152:	607b      	str	r3, [r7, #4]
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d105      	bne.n	800b16a <bit_position+0x36>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	3308      	adds	r3, #8
 800b162:	60fb      	str	r3, [r7, #12]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	021b      	lsls	r3, r3, #8
 800b168:	607b      	str	r3, [r7, #4]
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d105      	bne.n	800b180 <bit_position+0x4c>
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	3304      	adds	r3, #4
 800b178:	60fb      	str	r3, [r7, #12]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	011b      	lsls	r3, r3, #4
 800b17e:	607b      	str	r3, [r7, #4]

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	0f1b      	lsrs	r3, r3, #28
 800b184:	4a07      	ldr	r2, [pc, #28]	; (800b1a4 <bit_position+0x70>)
 800b186:	5cd3      	ldrb	r3, [r2, r3]
 800b188:	461a      	mov	r2, r3
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	4413      	add	r3, r2
 800b18e:	60fb      	str	r3, [r7, #12]

  return (31-n);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f1c3 031f 	rsb	r3, r3, #31
}
 800b196:	4618      	mov	r0, r3
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	0800c874 	.word	0x0800c874

0800b1a8 <__errno>:
 800b1a8:	4b01      	ldr	r3, [pc, #4]	; (800b1b0 <__errno+0x8>)
 800b1aa:	6818      	ldr	r0, [r3, #0]
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	20000038 	.word	0x20000038

0800b1b4 <__libc_init_array>:
 800b1b4:	b570      	push	{r4, r5, r6, lr}
 800b1b6:	4e0d      	ldr	r6, [pc, #52]	; (800b1ec <__libc_init_array+0x38>)
 800b1b8:	4c0d      	ldr	r4, [pc, #52]	; (800b1f0 <__libc_init_array+0x3c>)
 800b1ba:	1ba4      	subs	r4, r4, r6
 800b1bc:	10a4      	asrs	r4, r4, #2
 800b1be:	2500      	movs	r5, #0
 800b1c0:	42a5      	cmp	r5, r4
 800b1c2:	d109      	bne.n	800b1d8 <__libc_init_array+0x24>
 800b1c4:	4e0b      	ldr	r6, [pc, #44]	; (800b1f4 <__libc_init_array+0x40>)
 800b1c6:	4c0c      	ldr	r4, [pc, #48]	; (800b1f8 <__libc_init_array+0x44>)
 800b1c8:	f000 ffd8 	bl	800c17c <_init>
 800b1cc:	1ba4      	subs	r4, r4, r6
 800b1ce:	10a4      	asrs	r4, r4, #2
 800b1d0:	2500      	movs	r5, #0
 800b1d2:	42a5      	cmp	r5, r4
 800b1d4:	d105      	bne.n	800b1e2 <__libc_init_array+0x2e>
 800b1d6:	bd70      	pop	{r4, r5, r6, pc}
 800b1d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b1dc:	4798      	blx	r3
 800b1de:	3501      	adds	r5, #1
 800b1e0:	e7ee      	b.n	800b1c0 <__libc_init_array+0xc>
 800b1e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b1e6:	4798      	blx	r3
 800b1e8:	3501      	adds	r5, #1
 800b1ea:	e7f2      	b.n	800b1d2 <__libc_init_array+0x1e>
 800b1ec:	0800c924 	.word	0x0800c924
 800b1f0:	0800c924 	.word	0x0800c924
 800b1f4:	0800c924 	.word	0x0800c924
 800b1f8:	0800c928 	.word	0x0800c928

0800b1fc <memcpy>:
 800b1fc:	b510      	push	{r4, lr}
 800b1fe:	1e43      	subs	r3, r0, #1
 800b200:	440a      	add	r2, r1
 800b202:	4291      	cmp	r1, r2
 800b204:	d100      	bne.n	800b208 <memcpy+0xc>
 800b206:	bd10      	pop	{r4, pc}
 800b208:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b20c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b210:	e7f7      	b.n	800b202 <memcpy+0x6>

0800b212 <memset>:
 800b212:	4402      	add	r2, r0
 800b214:	4603      	mov	r3, r0
 800b216:	4293      	cmp	r3, r2
 800b218:	d100      	bne.n	800b21c <memset+0xa>
 800b21a:	4770      	bx	lr
 800b21c:	f803 1b01 	strb.w	r1, [r3], #1
 800b220:	e7f9      	b.n	800b216 <memset+0x4>
	...

0800b224 <iprintf>:
 800b224:	b40f      	push	{r0, r1, r2, r3}
 800b226:	4b0a      	ldr	r3, [pc, #40]	; (800b250 <iprintf+0x2c>)
 800b228:	b513      	push	{r0, r1, r4, lr}
 800b22a:	681c      	ldr	r4, [r3, #0]
 800b22c:	b124      	cbz	r4, 800b238 <iprintf+0x14>
 800b22e:	69a3      	ldr	r3, [r4, #24]
 800b230:	b913      	cbnz	r3, 800b238 <iprintf+0x14>
 800b232:	4620      	mov	r0, r4
 800b234:	f000 fa50 	bl	800b6d8 <__sinit>
 800b238:	ab05      	add	r3, sp, #20
 800b23a:	9a04      	ldr	r2, [sp, #16]
 800b23c:	68a1      	ldr	r1, [r4, #8]
 800b23e:	9301      	str	r3, [sp, #4]
 800b240:	4620      	mov	r0, r4
 800b242:	f000 fc09 	bl	800ba58 <_vfiprintf_r>
 800b246:	b002      	add	sp, #8
 800b248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b24c:	b004      	add	sp, #16
 800b24e:	4770      	bx	lr
 800b250:	20000038 	.word	0x20000038

0800b254 <putchar>:
 800b254:	b538      	push	{r3, r4, r5, lr}
 800b256:	4b08      	ldr	r3, [pc, #32]	; (800b278 <putchar+0x24>)
 800b258:	681c      	ldr	r4, [r3, #0]
 800b25a:	4605      	mov	r5, r0
 800b25c:	b124      	cbz	r4, 800b268 <putchar+0x14>
 800b25e:	69a3      	ldr	r3, [r4, #24]
 800b260:	b913      	cbnz	r3, 800b268 <putchar+0x14>
 800b262:	4620      	mov	r0, r4
 800b264:	f000 fa38 	bl	800b6d8 <__sinit>
 800b268:	68a2      	ldr	r2, [r4, #8]
 800b26a:	4629      	mov	r1, r5
 800b26c:	4620      	mov	r0, r4
 800b26e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b272:	f000 be8f 	b.w	800bf94 <_putc_r>
 800b276:	bf00      	nop
 800b278:	20000038 	.word	0x20000038

0800b27c <_puts_r>:
 800b27c:	b570      	push	{r4, r5, r6, lr}
 800b27e:	460e      	mov	r6, r1
 800b280:	4605      	mov	r5, r0
 800b282:	b118      	cbz	r0, 800b28c <_puts_r+0x10>
 800b284:	6983      	ldr	r3, [r0, #24]
 800b286:	b90b      	cbnz	r3, 800b28c <_puts_r+0x10>
 800b288:	f000 fa26 	bl	800b6d8 <__sinit>
 800b28c:	69ab      	ldr	r3, [r5, #24]
 800b28e:	68ac      	ldr	r4, [r5, #8]
 800b290:	b913      	cbnz	r3, 800b298 <_puts_r+0x1c>
 800b292:	4628      	mov	r0, r5
 800b294:	f000 fa20 	bl	800b6d8 <__sinit>
 800b298:	4b23      	ldr	r3, [pc, #140]	; (800b328 <_puts_r+0xac>)
 800b29a:	429c      	cmp	r4, r3
 800b29c:	d117      	bne.n	800b2ce <_puts_r+0x52>
 800b29e:	686c      	ldr	r4, [r5, #4]
 800b2a0:	89a3      	ldrh	r3, [r4, #12]
 800b2a2:	071b      	lsls	r3, r3, #28
 800b2a4:	d51d      	bpl.n	800b2e2 <_puts_r+0x66>
 800b2a6:	6923      	ldr	r3, [r4, #16]
 800b2a8:	b1db      	cbz	r3, 800b2e2 <_puts_r+0x66>
 800b2aa:	3e01      	subs	r6, #1
 800b2ac:	68a3      	ldr	r3, [r4, #8]
 800b2ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	60a3      	str	r3, [r4, #8]
 800b2b6:	b9e9      	cbnz	r1, 800b2f4 <_puts_r+0x78>
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	da2e      	bge.n	800b31a <_puts_r+0x9e>
 800b2bc:	4622      	mov	r2, r4
 800b2be:	210a      	movs	r1, #10
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	f000 f859 	bl	800b378 <__swbuf_r>
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	d011      	beq.n	800b2ee <_puts_r+0x72>
 800b2ca:	200a      	movs	r0, #10
 800b2cc:	e011      	b.n	800b2f2 <_puts_r+0x76>
 800b2ce:	4b17      	ldr	r3, [pc, #92]	; (800b32c <_puts_r+0xb0>)
 800b2d0:	429c      	cmp	r4, r3
 800b2d2:	d101      	bne.n	800b2d8 <_puts_r+0x5c>
 800b2d4:	68ac      	ldr	r4, [r5, #8]
 800b2d6:	e7e3      	b.n	800b2a0 <_puts_r+0x24>
 800b2d8:	4b15      	ldr	r3, [pc, #84]	; (800b330 <_puts_r+0xb4>)
 800b2da:	429c      	cmp	r4, r3
 800b2dc:	bf08      	it	eq
 800b2de:	68ec      	ldreq	r4, [r5, #12]
 800b2e0:	e7de      	b.n	800b2a0 <_puts_r+0x24>
 800b2e2:	4621      	mov	r1, r4
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	f000 f899 	bl	800b41c <__swsetup_r>
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	d0dd      	beq.n	800b2aa <_puts_r+0x2e>
 800b2ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f2:	bd70      	pop	{r4, r5, r6, pc}
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	da04      	bge.n	800b302 <_puts_r+0x86>
 800b2f8:	69a2      	ldr	r2, [r4, #24]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	dc06      	bgt.n	800b30c <_puts_r+0x90>
 800b2fe:	290a      	cmp	r1, #10
 800b300:	d004      	beq.n	800b30c <_puts_r+0x90>
 800b302:	6823      	ldr	r3, [r4, #0]
 800b304:	1c5a      	adds	r2, r3, #1
 800b306:	6022      	str	r2, [r4, #0]
 800b308:	7019      	strb	r1, [r3, #0]
 800b30a:	e7cf      	b.n	800b2ac <_puts_r+0x30>
 800b30c:	4622      	mov	r2, r4
 800b30e:	4628      	mov	r0, r5
 800b310:	f000 f832 	bl	800b378 <__swbuf_r>
 800b314:	3001      	adds	r0, #1
 800b316:	d1c9      	bne.n	800b2ac <_puts_r+0x30>
 800b318:	e7e9      	b.n	800b2ee <_puts_r+0x72>
 800b31a:	6823      	ldr	r3, [r4, #0]
 800b31c:	200a      	movs	r0, #10
 800b31e:	1c5a      	adds	r2, r3, #1
 800b320:	6022      	str	r2, [r4, #0]
 800b322:	7018      	strb	r0, [r3, #0]
 800b324:	e7e5      	b.n	800b2f2 <_puts_r+0x76>
 800b326:	bf00      	nop
 800b328:	0800c8a8 	.word	0x0800c8a8
 800b32c:	0800c8c8 	.word	0x0800c8c8
 800b330:	0800c888 	.word	0x0800c888

0800b334 <puts>:
 800b334:	4b02      	ldr	r3, [pc, #8]	; (800b340 <puts+0xc>)
 800b336:	4601      	mov	r1, r0
 800b338:	6818      	ldr	r0, [r3, #0]
 800b33a:	f7ff bf9f 	b.w	800b27c <_puts_r>
 800b33e:	bf00      	nop
 800b340:	20000038 	.word	0x20000038

0800b344 <strstr>:
 800b344:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b346:	7803      	ldrb	r3, [r0, #0]
 800b348:	b17b      	cbz	r3, 800b36a <strstr+0x26>
 800b34a:	4604      	mov	r4, r0
 800b34c:	7823      	ldrb	r3, [r4, #0]
 800b34e:	4620      	mov	r0, r4
 800b350:	1c66      	adds	r6, r4, #1
 800b352:	b17b      	cbz	r3, 800b374 <strstr+0x30>
 800b354:	1e4a      	subs	r2, r1, #1
 800b356:	1e63      	subs	r3, r4, #1
 800b358:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800b35c:	b14d      	cbz	r5, 800b372 <strstr+0x2e>
 800b35e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800b362:	42af      	cmp	r7, r5
 800b364:	4634      	mov	r4, r6
 800b366:	d0f7      	beq.n	800b358 <strstr+0x14>
 800b368:	e7f0      	b.n	800b34c <strstr+0x8>
 800b36a:	780b      	ldrb	r3, [r1, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	bf18      	it	ne
 800b370:	2000      	movne	r0, #0
 800b372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b374:	4618      	mov	r0, r3
 800b376:	e7fc      	b.n	800b372 <strstr+0x2e>

0800b378 <__swbuf_r>:
 800b378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37a:	460e      	mov	r6, r1
 800b37c:	4614      	mov	r4, r2
 800b37e:	4605      	mov	r5, r0
 800b380:	b118      	cbz	r0, 800b38a <__swbuf_r+0x12>
 800b382:	6983      	ldr	r3, [r0, #24]
 800b384:	b90b      	cbnz	r3, 800b38a <__swbuf_r+0x12>
 800b386:	f000 f9a7 	bl	800b6d8 <__sinit>
 800b38a:	4b21      	ldr	r3, [pc, #132]	; (800b410 <__swbuf_r+0x98>)
 800b38c:	429c      	cmp	r4, r3
 800b38e:	d12a      	bne.n	800b3e6 <__swbuf_r+0x6e>
 800b390:	686c      	ldr	r4, [r5, #4]
 800b392:	69a3      	ldr	r3, [r4, #24]
 800b394:	60a3      	str	r3, [r4, #8]
 800b396:	89a3      	ldrh	r3, [r4, #12]
 800b398:	071a      	lsls	r2, r3, #28
 800b39a:	d52e      	bpl.n	800b3fa <__swbuf_r+0x82>
 800b39c:	6923      	ldr	r3, [r4, #16]
 800b39e:	b363      	cbz	r3, 800b3fa <__swbuf_r+0x82>
 800b3a0:	6923      	ldr	r3, [r4, #16]
 800b3a2:	6820      	ldr	r0, [r4, #0]
 800b3a4:	1ac0      	subs	r0, r0, r3
 800b3a6:	6963      	ldr	r3, [r4, #20]
 800b3a8:	b2f6      	uxtb	r6, r6
 800b3aa:	4283      	cmp	r3, r0
 800b3ac:	4637      	mov	r7, r6
 800b3ae:	dc04      	bgt.n	800b3ba <__swbuf_r+0x42>
 800b3b0:	4621      	mov	r1, r4
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	f000 f926 	bl	800b604 <_fflush_r>
 800b3b8:	bb28      	cbnz	r0, 800b406 <__swbuf_r+0x8e>
 800b3ba:	68a3      	ldr	r3, [r4, #8]
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	60a3      	str	r3, [r4, #8]
 800b3c0:	6823      	ldr	r3, [r4, #0]
 800b3c2:	1c5a      	adds	r2, r3, #1
 800b3c4:	6022      	str	r2, [r4, #0]
 800b3c6:	701e      	strb	r6, [r3, #0]
 800b3c8:	6963      	ldr	r3, [r4, #20]
 800b3ca:	3001      	adds	r0, #1
 800b3cc:	4283      	cmp	r3, r0
 800b3ce:	d004      	beq.n	800b3da <__swbuf_r+0x62>
 800b3d0:	89a3      	ldrh	r3, [r4, #12]
 800b3d2:	07db      	lsls	r3, r3, #31
 800b3d4:	d519      	bpl.n	800b40a <__swbuf_r+0x92>
 800b3d6:	2e0a      	cmp	r6, #10
 800b3d8:	d117      	bne.n	800b40a <__swbuf_r+0x92>
 800b3da:	4621      	mov	r1, r4
 800b3dc:	4628      	mov	r0, r5
 800b3de:	f000 f911 	bl	800b604 <_fflush_r>
 800b3e2:	b190      	cbz	r0, 800b40a <__swbuf_r+0x92>
 800b3e4:	e00f      	b.n	800b406 <__swbuf_r+0x8e>
 800b3e6:	4b0b      	ldr	r3, [pc, #44]	; (800b414 <__swbuf_r+0x9c>)
 800b3e8:	429c      	cmp	r4, r3
 800b3ea:	d101      	bne.n	800b3f0 <__swbuf_r+0x78>
 800b3ec:	68ac      	ldr	r4, [r5, #8]
 800b3ee:	e7d0      	b.n	800b392 <__swbuf_r+0x1a>
 800b3f0:	4b09      	ldr	r3, [pc, #36]	; (800b418 <__swbuf_r+0xa0>)
 800b3f2:	429c      	cmp	r4, r3
 800b3f4:	bf08      	it	eq
 800b3f6:	68ec      	ldreq	r4, [r5, #12]
 800b3f8:	e7cb      	b.n	800b392 <__swbuf_r+0x1a>
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	4628      	mov	r0, r5
 800b3fe:	f000 f80d 	bl	800b41c <__swsetup_r>
 800b402:	2800      	cmp	r0, #0
 800b404:	d0cc      	beq.n	800b3a0 <__swbuf_r+0x28>
 800b406:	f04f 37ff 	mov.w	r7, #4294967295
 800b40a:	4638      	mov	r0, r7
 800b40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b40e:	bf00      	nop
 800b410:	0800c8a8 	.word	0x0800c8a8
 800b414:	0800c8c8 	.word	0x0800c8c8
 800b418:	0800c888 	.word	0x0800c888

0800b41c <__swsetup_r>:
 800b41c:	4b32      	ldr	r3, [pc, #200]	; (800b4e8 <__swsetup_r+0xcc>)
 800b41e:	b570      	push	{r4, r5, r6, lr}
 800b420:	681d      	ldr	r5, [r3, #0]
 800b422:	4606      	mov	r6, r0
 800b424:	460c      	mov	r4, r1
 800b426:	b125      	cbz	r5, 800b432 <__swsetup_r+0x16>
 800b428:	69ab      	ldr	r3, [r5, #24]
 800b42a:	b913      	cbnz	r3, 800b432 <__swsetup_r+0x16>
 800b42c:	4628      	mov	r0, r5
 800b42e:	f000 f953 	bl	800b6d8 <__sinit>
 800b432:	4b2e      	ldr	r3, [pc, #184]	; (800b4ec <__swsetup_r+0xd0>)
 800b434:	429c      	cmp	r4, r3
 800b436:	d10f      	bne.n	800b458 <__swsetup_r+0x3c>
 800b438:	686c      	ldr	r4, [r5, #4]
 800b43a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b43e:	b29a      	uxth	r2, r3
 800b440:	0715      	lsls	r5, r2, #28
 800b442:	d42c      	bmi.n	800b49e <__swsetup_r+0x82>
 800b444:	06d0      	lsls	r0, r2, #27
 800b446:	d411      	bmi.n	800b46c <__swsetup_r+0x50>
 800b448:	2209      	movs	r2, #9
 800b44a:	6032      	str	r2, [r6, #0]
 800b44c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b450:	81a3      	strh	r3, [r4, #12]
 800b452:	f04f 30ff 	mov.w	r0, #4294967295
 800b456:	e03e      	b.n	800b4d6 <__swsetup_r+0xba>
 800b458:	4b25      	ldr	r3, [pc, #148]	; (800b4f0 <__swsetup_r+0xd4>)
 800b45a:	429c      	cmp	r4, r3
 800b45c:	d101      	bne.n	800b462 <__swsetup_r+0x46>
 800b45e:	68ac      	ldr	r4, [r5, #8]
 800b460:	e7eb      	b.n	800b43a <__swsetup_r+0x1e>
 800b462:	4b24      	ldr	r3, [pc, #144]	; (800b4f4 <__swsetup_r+0xd8>)
 800b464:	429c      	cmp	r4, r3
 800b466:	bf08      	it	eq
 800b468:	68ec      	ldreq	r4, [r5, #12]
 800b46a:	e7e6      	b.n	800b43a <__swsetup_r+0x1e>
 800b46c:	0751      	lsls	r1, r2, #29
 800b46e:	d512      	bpl.n	800b496 <__swsetup_r+0x7a>
 800b470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b472:	b141      	cbz	r1, 800b486 <__swsetup_r+0x6a>
 800b474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b478:	4299      	cmp	r1, r3
 800b47a:	d002      	beq.n	800b482 <__swsetup_r+0x66>
 800b47c:	4630      	mov	r0, r6
 800b47e:	f000 fa19 	bl	800b8b4 <_free_r>
 800b482:	2300      	movs	r3, #0
 800b484:	6363      	str	r3, [r4, #52]	; 0x34
 800b486:	89a3      	ldrh	r3, [r4, #12]
 800b488:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b48c:	81a3      	strh	r3, [r4, #12]
 800b48e:	2300      	movs	r3, #0
 800b490:	6063      	str	r3, [r4, #4]
 800b492:	6923      	ldr	r3, [r4, #16]
 800b494:	6023      	str	r3, [r4, #0]
 800b496:	89a3      	ldrh	r3, [r4, #12]
 800b498:	f043 0308 	orr.w	r3, r3, #8
 800b49c:	81a3      	strh	r3, [r4, #12]
 800b49e:	6923      	ldr	r3, [r4, #16]
 800b4a0:	b94b      	cbnz	r3, 800b4b6 <__swsetup_r+0x9a>
 800b4a2:	89a3      	ldrh	r3, [r4, #12]
 800b4a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4ac:	d003      	beq.n	800b4b6 <__swsetup_r+0x9a>
 800b4ae:	4621      	mov	r1, r4
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	f000 f9bf 	bl	800b834 <__smakebuf_r>
 800b4b6:	89a2      	ldrh	r2, [r4, #12]
 800b4b8:	f012 0301 	ands.w	r3, r2, #1
 800b4bc:	d00c      	beq.n	800b4d8 <__swsetup_r+0xbc>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	60a3      	str	r3, [r4, #8]
 800b4c2:	6963      	ldr	r3, [r4, #20]
 800b4c4:	425b      	negs	r3, r3
 800b4c6:	61a3      	str	r3, [r4, #24]
 800b4c8:	6923      	ldr	r3, [r4, #16]
 800b4ca:	b953      	cbnz	r3, 800b4e2 <__swsetup_r+0xc6>
 800b4cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b4d4:	d1ba      	bne.n	800b44c <__swsetup_r+0x30>
 800b4d6:	bd70      	pop	{r4, r5, r6, pc}
 800b4d8:	0792      	lsls	r2, r2, #30
 800b4da:	bf58      	it	pl
 800b4dc:	6963      	ldrpl	r3, [r4, #20]
 800b4de:	60a3      	str	r3, [r4, #8]
 800b4e0:	e7f2      	b.n	800b4c8 <__swsetup_r+0xac>
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	e7f7      	b.n	800b4d6 <__swsetup_r+0xba>
 800b4e6:	bf00      	nop
 800b4e8:	20000038 	.word	0x20000038
 800b4ec:	0800c8a8 	.word	0x0800c8a8
 800b4f0:	0800c8c8 	.word	0x0800c8c8
 800b4f4:	0800c888 	.word	0x0800c888

0800b4f8 <__sflush_r>:
 800b4f8:	898a      	ldrh	r2, [r1, #12]
 800b4fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4fe:	4605      	mov	r5, r0
 800b500:	0710      	lsls	r0, r2, #28
 800b502:	460c      	mov	r4, r1
 800b504:	d458      	bmi.n	800b5b8 <__sflush_r+0xc0>
 800b506:	684b      	ldr	r3, [r1, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	dc05      	bgt.n	800b518 <__sflush_r+0x20>
 800b50c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b50e:	2b00      	cmp	r3, #0
 800b510:	dc02      	bgt.n	800b518 <__sflush_r+0x20>
 800b512:	2000      	movs	r0, #0
 800b514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b51a:	2e00      	cmp	r6, #0
 800b51c:	d0f9      	beq.n	800b512 <__sflush_r+0x1a>
 800b51e:	2300      	movs	r3, #0
 800b520:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b524:	682f      	ldr	r7, [r5, #0]
 800b526:	6a21      	ldr	r1, [r4, #32]
 800b528:	602b      	str	r3, [r5, #0]
 800b52a:	d032      	beq.n	800b592 <__sflush_r+0x9a>
 800b52c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b52e:	89a3      	ldrh	r3, [r4, #12]
 800b530:	075a      	lsls	r2, r3, #29
 800b532:	d505      	bpl.n	800b540 <__sflush_r+0x48>
 800b534:	6863      	ldr	r3, [r4, #4]
 800b536:	1ac0      	subs	r0, r0, r3
 800b538:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b53a:	b10b      	cbz	r3, 800b540 <__sflush_r+0x48>
 800b53c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b53e:	1ac0      	subs	r0, r0, r3
 800b540:	2300      	movs	r3, #0
 800b542:	4602      	mov	r2, r0
 800b544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b546:	6a21      	ldr	r1, [r4, #32]
 800b548:	4628      	mov	r0, r5
 800b54a:	47b0      	blx	r6
 800b54c:	1c43      	adds	r3, r0, #1
 800b54e:	89a3      	ldrh	r3, [r4, #12]
 800b550:	d106      	bne.n	800b560 <__sflush_r+0x68>
 800b552:	6829      	ldr	r1, [r5, #0]
 800b554:	291d      	cmp	r1, #29
 800b556:	d848      	bhi.n	800b5ea <__sflush_r+0xf2>
 800b558:	4a29      	ldr	r2, [pc, #164]	; (800b600 <__sflush_r+0x108>)
 800b55a:	40ca      	lsrs	r2, r1
 800b55c:	07d6      	lsls	r6, r2, #31
 800b55e:	d544      	bpl.n	800b5ea <__sflush_r+0xf2>
 800b560:	2200      	movs	r2, #0
 800b562:	6062      	str	r2, [r4, #4]
 800b564:	04d9      	lsls	r1, r3, #19
 800b566:	6922      	ldr	r2, [r4, #16]
 800b568:	6022      	str	r2, [r4, #0]
 800b56a:	d504      	bpl.n	800b576 <__sflush_r+0x7e>
 800b56c:	1c42      	adds	r2, r0, #1
 800b56e:	d101      	bne.n	800b574 <__sflush_r+0x7c>
 800b570:	682b      	ldr	r3, [r5, #0]
 800b572:	b903      	cbnz	r3, 800b576 <__sflush_r+0x7e>
 800b574:	6560      	str	r0, [r4, #84]	; 0x54
 800b576:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b578:	602f      	str	r7, [r5, #0]
 800b57a:	2900      	cmp	r1, #0
 800b57c:	d0c9      	beq.n	800b512 <__sflush_r+0x1a>
 800b57e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b582:	4299      	cmp	r1, r3
 800b584:	d002      	beq.n	800b58c <__sflush_r+0x94>
 800b586:	4628      	mov	r0, r5
 800b588:	f000 f994 	bl	800b8b4 <_free_r>
 800b58c:	2000      	movs	r0, #0
 800b58e:	6360      	str	r0, [r4, #52]	; 0x34
 800b590:	e7c0      	b.n	800b514 <__sflush_r+0x1c>
 800b592:	2301      	movs	r3, #1
 800b594:	4628      	mov	r0, r5
 800b596:	47b0      	blx	r6
 800b598:	1c41      	adds	r1, r0, #1
 800b59a:	d1c8      	bne.n	800b52e <__sflush_r+0x36>
 800b59c:	682b      	ldr	r3, [r5, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d0c5      	beq.n	800b52e <__sflush_r+0x36>
 800b5a2:	2b1d      	cmp	r3, #29
 800b5a4:	d001      	beq.n	800b5aa <__sflush_r+0xb2>
 800b5a6:	2b16      	cmp	r3, #22
 800b5a8:	d101      	bne.n	800b5ae <__sflush_r+0xb6>
 800b5aa:	602f      	str	r7, [r5, #0]
 800b5ac:	e7b1      	b.n	800b512 <__sflush_r+0x1a>
 800b5ae:	89a3      	ldrh	r3, [r4, #12]
 800b5b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5b4:	81a3      	strh	r3, [r4, #12]
 800b5b6:	e7ad      	b.n	800b514 <__sflush_r+0x1c>
 800b5b8:	690f      	ldr	r7, [r1, #16]
 800b5ba:	2f00      	cmp	r7, #0
 800b5bc:	d0a9      	beq.n	800b512 <__sflush_r+0x1a>
 800b5be:	0793      	lsls	r3, r2, #30
 800b5c0:	680e      	ldr	r6, [r1, #0]
 800b5c2:	bf08      	it	eq
 800b5c4:	694b      	ldreq	r3, [r1, #20]
 800b5c6:	600f      	str	r7, [r1, #0]
 800b5c8:	bf18      	it	ne
 800b5ca:	2300      	movne	r3, #0
 800b5cc:	eba6 0807 	sub.w	r8, r6, r7
 800b5d0:	608b      	str	r3, [r1, #8]
 800b5d2:	f1b8 0f00 	cmp.w	r8, #0
 800b5d6:	dd9c      	ble.n	800b512 <__sflush_r+0x1a>
 800b5d8:	4643      	mov	r3, r8
 800b5da:	463a      	mov	r2, r7
 800b5dc:	6a21      	ldr	r1, [r4, #32]
 800b5de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	47b0      	blx	r6
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	dc06      	bgt.n	800b5f6 <__sflush_r+0xfe>
 800b5e8:	89a3      	ldrh	r3, [r4, #12]
 800b5ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5ee:	81a3      	strh	r3, [r4, #12]
 800b5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f4:	e78e      	b.n	800b514 <__sflush_r+0x1c>
 800b5f6:	4407      	add	r7, r0
 800b5f8:	eba8 0800 	sub.w	r8, r8, r0
 800b5fc:	e7e9      	b.n	800b5d2 <__sflush_r+0xda>
 800b5fe:	bf00      	nop
 800b600:	20400001 	.word	0x20400001

0800b604 <_fflush_r>:
 800b604:	b538      	push	{r3, r4, r5, lr}
 800b606:	690b      	ldr	r3, [r1, #16]
 800b608:	4605      	mov	r5, r0
 800b60a:	460c      	mov	r4, r1
 800b60c:	b1db      	cbz	r3, 800b646 <_fflush_r+0x42>
 800b60e:	b118      	cbz	r0, 800b618 <_fflush_r+0x14>
 800b610:	6983      	ldr	r3, [r0, #24]
 800b612:	b90b      	cbnz	r3, 800b618 <_fflush_r+0x14>
 800b614:	f000 f860 	bl	800b6d8 <__sinit>
 800b618:	4b0c      	ldr	r3, [pc, #48]	; (800b64c <_fflush_r+0x48>)
 800b61a:	429c      	cmp	r4, r3
 800b61c:	d109      	bne.n	800b632 <_fflush_r+0x2e>
 800b61e:	686c      	ldr	r4, [r5, #4]
 800b620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b624:	b17b      	cbz	r3, 800b646 <_fflush_r+0x42>
 800b626:	4621      	mov	r1, r4
 800b628:	4628      	mov	r0, r5
 800b62a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b62e:	f7ff bf63 	b.w	800b4f8 <__sflush_r>
 800b632:	4b07      	ldr	r3, [pc, #28]	; (800b650 <_fflush_r+0x4c>)
 800b634:	429c      	cmp	r4, r3
 800b636:	d101      	bne.n	800b63c <_fflush_r+0x38>
 800b638:	68ac      	ldr	r4, [r5, #8]
 800b63a:	e7f1      	b.n	800b620 <_fflush_r+0x1c>
 800b63c:	4b05      	ldr	r3, [pc, #20]	; (800b654 <_fflush_r+0x50>)
 800b63e:	429c      	cmp	r4, r3
 800b640:	bf08      	it	eq
 800b642:	68ec      	ldreq	r4, [r5, #12]
 800b644:	e7ec      	b.n	800b620 <_fflush_r+0x1c>
 800b646:	2000      	movs	r0, #0
 800b648:	bd38      	pop	{r3, r4, r5, pc}
 800b64a:	bf00      	nop
 800b64c:	0800c8a8 	.word	0x0800c8a8
 800b650:	0800c8c8 	.word	0x0800c8c8
 800b654:	0800c888 	.word	0x0800c888

0800b658 <std>:
 800b658:	2300      	movs	r3, #0
 800b65a:	b510      	push	{r4, lr}
 800b65c:	4604      	mov	r4, r0
 800b65e:	e9c0 3300 	strd	r3, r3, [r0]
 800b662:	6083      	str	r3, [r0, #8]
 800b664:	8181      	strh	r1, [r0, #12]
 800b666:	6643      	str	r3, [r0, #100]	; 0x64
 800b668:	81c2      	strh	r2, [r0, #14]
 800b66a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b66e:	6183      	str	r3, [r0, #24]
 800b670:	4619      	mov	r1, r3
 800b672:	2208      	movs	r2, #8
 800b674:	305c      	adds	r0, #92	; 0x5c
 800b676:	f7ff fdcc 	bl	800b212 <memset>
 800b67a:	4b05      	ldr	r3, [pc, #20]	; (800b690 <std+0x38>)
 800b67c:	6263      	str	r3, [r4, #36]	; 0x24
 800b67e:	4b05      	ldr	r3, [pc, #20]	; (800b694 <std+0x3c>)
 800b680:	62a3      	str	r3, [r4, #40]	; 0x28
 800b682:	4b05      	ldr	r3, [pc, #20]	; (800b698 <std+0x40>)
 800b684:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b686:	4b05      	ldr	r3, [pc, #20]	; (800b69c <std+0x44>)
 800b688:	6224      	str	r4, [r4, #32]
 800b68a:	6323      	str	r3, [r4, #48]	; 0x30
 800b68c:	bd10      	pop	{r4, pc}
 800b68e:	bf00      	nop
 800b690:	0800c021 	.word	0x0800c021
 800b694:	0800c043 	.word	0x0800c043
 800b698:	0800c07b 	.word	0x0800c07b
 800b69c:	0800c09f 	.word	0x0800c09f

0800b6a0 <_cleanup_r>:
 800b6a0:	4901      	ldr	r1, [pc, #4]	; (800b6a8 <_cleanup_r+0x8>)
 800b6a2:	f000 b885 	b.w	800b7b0 <_fwalk_reent>
 800b6a6:	bf00      	nop
 800b6a8:	0800b605 	.word	0x0800b605

0800b6ac <__sfmoreglue>:
 800b6ac:	b570      	push	{r4, r5, r6, lr}
 800b6ae:	1e4a      	subs	r2, r1, #1
 800b6b0:	2568      	movs	r5, #104	; 0x68
 800b6b2:	4355      	muls	r5, r2
 800b6b4:	460e      	mov	r6, r1
 800b6b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b6ba:	f000 f949 	bl	800b950 <_malloc_r>
 800b6be:	4604      	mov	r4, r0
 800b6c0:	b140      	cbz	r0, 800b6d4 <__sfmoreglue+0x28>
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	e9c0 1600 	strd	r1, r6, [r0]
 800b6c8:	300c      	adds	r0, #12
 800b6ca:	60a0      	str	r0, [r4, #8]
 800b6cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b6d0:	f7ff fd9f 	bl	800b212 <memset>
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	bd70      	pop	{r4, r5, r6, pc}

0800b6d8 <__sinit>:
 800b6d8:	6983      	ldr	r3, [r0, #24]
 800b6da:	b510      	push	{r4, lr}
 800b6dc:	4604      	mov	r4, r0
 800b6de:	bb33      	cbnz	r3, 800b72e <__sinit+0x56>
 800b6e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b6e4:	6503      	str	r3, [r0, #80]	; 0x50
 800b6e6:	4b12      	ldr	r3, [pc, #72]	; (800b730 <__sinit+0x58>)
 800b6e8:	4a12      	ldr	r2, [pc, #72]	; (800b734 <__sinit+0x5c>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	6282      	str	r2, [r0, #40]	; 0x28
 800b6ee:	4298      	cmp	r0, r3
 800b6f0:	bf04      	itt	eq
 800b6f2:	2301      	moveq	r3, #1
 800b6f4:	6183      	streq	r3, [r0, #24]
 800b6f6:	f000 f81f 	bl	800b738 <__sfp>
 800b6fa:	6060      	str	r0, [r4, #4]
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	f000 f81b 	bl	800b738 <__sfp>
 800b702:	60a0      	str	r0, [r4, #8]
 800b704:	4620      	mov	r0, r4
 800b706:	f000 f817 	bl	800b738 <__sfp>
 800b70a:	2200      	movs	r2, #0
 800b70c:	60e0      	str	r0, [r4, #12]
 800b70e:	2104      	movs	r1, #4
 800b710:	6860      	ldr	r0, [r4, #4]
 800b712:	f7ff ffa1 	bl	800b658 <std>
 800b716:	2201      	movs	r2, #1
 800b718:	2109      	movs	r1, #9
 800b71a:	68a0      	ldr	r0, [r4, #8]
 800b71c:	f7ff ff9c 	bl	800b658 <std>
 800b720:	2202      	movs	r2, #2
 800b722:	2112      	movs	r1, #18
 800b724:	68e0      	ldr	r0, [r4, #12]
 800b726:	f7ff ff97 	bl	800b658 <std>
 800b72a:	2301      	movs	r3, #1
 800b72c:	61a3      	str	r3, [r4, #24]
 800b72e:	bd10      	pop	{r4, pc}
 800b730:	0800c884 	.word	0x0800c884
 800b734:	0800b6a1 	.word	0x0800b6a1

0800b738 <__sfp>:
 800b738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b73a:	4b1b      	ldr	r3, [pc, #108]	; (800b7a8 <__sfp+0x70>)
 800b73c:	681e      	ldr	r6, [r3, #0]
 800b73e:	69b3      	ldr	r3, [r6, #24]
 800b740:	4607      	mov	r7, r0
 800b742:	b913      	cbnz	r3, 800b74a <__sfp+0x12>
 800b744:	4630      	mov	r0, r6
 800b746:	f7ff ffc7 	bl	800b6d8 <__sinit>
 800b74a:	3648      	adds	r6, #72	; 0x48
 800b74c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b750:	3b01      	subs	r3, #1
 800b752:	d503      	bpl.n	800b75c <__sfp+0x24>
 800b754:	6833      	ldr	r3, [r6, #0]
 800b756:	b133      	cbz	r3, 800b766 <__sfp+0x2e>
 800b758:	6836      	ldr	r6, [r6, #0]
 800b75a:	e7f7      	b.n	800b74c <__sfp+0x14>
 800b75c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b760:	b16d      	cbz	r5, 800b77e <__sfp+0x46>
 800b762:	3468      	adds	r4, #104	; 0x68
 800b764:	e7f4      	b.n	800b750 <__sfp+0x18>
 800b766:	2104      	movs	r1, #4
 800b768:	4638      	mov	r0, r7
 800b76a:	f7ff ff9f 	bl	800b6ac <__sfmoreglue>
 800b76e:	6030      	str	r0, [r6, #0]
 800b770:	2800      	cmp	r0, #0
 800b772:	d1f1      	bne.n	800b758 <__sfp+0x20>
 800b774:	230c      	movs	r3, #12
 800b776:	603b      	str	r3, [r7, #0]
 800b778:	4604      	mov	r4, r0
 800b77a:	4620      	mov	r0, r4
 800b77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b77e:	4b0b      	ldr	r3, [pc, #44]	; (800b7ac <__sfp+0x74>)
 800b780:	6665      	str	r5, [r4, #100]	; 0x64
 800b782:	e9c4 5500 	strd	r5, r5, [r4]
 800b786:	60a5      	str	r5, [r4, #8]
 800b788:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b78c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b790:	2208      	movs	r2, #8
 800b792:	4629      	mov	r1, r5
 800b794:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b798:	f7ff fd3b 	bl	800b212 <memset>
 800b79c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b7a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b7a4:	e7e9      	b.n	800b77a <__sfp+0x42>
 800b7a6:	bf00      	nop
 800b7a8:	0800c884 	.word	0x0800c884
 800b7ac:	ffff0001 	.word	0xffff0001

0800b7b0 <_fwalk_reent>:
 800b7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7b4:	4680      	mov	r8, r0
 800b7b6:	4689      	mov	r9, r1
 800b7b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b7bc:	2600      	movs	r6, #0
 800b7be:	b914      	cbnz	r4, 800b7c6 <_fwalk_reent+0x16>
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b7ca:	3f01      	subs	r7, #1
 800b7cc:	d501      	bpl.n	800b7d2 <_fwalk_reent+0x22>
 800b7ce:	6824      	ldr	r4, [r4, #0]
 800b7d0:	e7f5      	b.n	800b7be <_fwalk_reent+0xe>
 800b7d2:	89ab      	ldrh	r3, [r5, #12]
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d907      	bls.n	800b7e8 <_fwalk_reent+0x38>
 800b7d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	d003      	beq.n	800b7e8 <_fwalk_reent+0x38>
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	4640      	mov	r0, r8
 800b7e4:	47c8      	blx	r9
 800b7e6:	4306      	orrs	r6, r0
 800b7e8:	3568      	adds	r5, #104	; 0x68
 800b7ea:	e7ee      	b.n	800b7ca <_fwalk_reent+0x1a>

0800b7ec <__swhatbuf_r>:
 800b7ec:	b570      	push	{r4, r5, r6, lr}
 800b7ee:	460e      	mov	r6, r1
 800b7f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7f4:	2900      	cmp	r1, #0
 800b7f6:	b096      	sub	sp, #88	; 0x58
 800b7f8:	4614      	mov	r4, r2
 800b7fa:	461d      	mov	r5, r3
 800b7fc:	da07      	bge.n	800b80e <__swhatbuf_r+0x22>
 800b7fe:	2300      	movs	r3, #0
 800b800:	602b      	str	r3, [r5, #0]
 800b802:	89b3      	ldrh	r3, [r6, #12]
 800b804:	061a      	lsls	r2, r3, #24
 800b806:	d410      	bmi.n	800b82a <__swhatbuf_r+0x3e>
 800b808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b80c:	e00e      	b.n	800b82c <__swhatbuf_r+0x40>
 800b80e:	466a      	mov	r2, sp
 800b810:	f000 fc6c 	bl	800c0ec <_fstat_r>
 800b814:	2800      	cmp	r0, #0
 800b816:	dbf2      	blt.n	800b7fe <__swhatbuf_r+0x12>
 800b818:	9a01      	ldr	r2, [sp, #4]
 800b81a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b81e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b822:	425a      	negs	r2, r3
 800b824:	415a      	adcs	r2, r3
 800b826:	602a      	str	r2, [r5, #0]
 800b828:	e7ee      	b.n	800b808 <__swhatbuf_r+0x1c>
 800b82a:	2340      	movs	r3, #64	; 0x40
 800b82c:	2000      	movs	r0, #0
 800b82e:	6023      	str	r3, [r4, #0]
 800b830:	b016      	add	sp, #88	; 0x58
 800b832:	bd70      	pop	{r4, r5, r6, pc}

0800b834 <__smakebuf_r>:
 800b834:	898b      	ldrh	r3, [r1, #12]
 800b836:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b838:	079d      	lsls	r5, r3, #30
 800b83a:	4606      	mov	r6, r0
 800b83c:	460c      	mov	r4, r1
 800b83e:	d507      	bpl.n	800b850 <__smakebuf_r+0x1c>
 800b840:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b844:	6023      	str	r3, [r4, #0]
 800b846:	6123      	str	r3, [r4, #16]
 800b848:	2301      	movs	r3, #1
 800b84a:	6163      	str	r3, [r4, #20]
 800b84c:	b002      	add	sp, #8
 800b84e:	bd70      	pop	{r4, r5, r6, pc}
 800b850:	ab01      	add	r3, sp, #4
 800b852:	466a      	mov	r2, sp
 800b854:	f7ff ffca 	bl	800b7ec <__swhatbuf_r>
 800b858:	9900      	ldr	r1, [sp, #0]
 800b85a:	4605      	mov	r5, r0
 800b85c:	4630      	mov	r0, r6
 800b85e:	f000 f877 	bl	800b950 <_malloc_r>
 800b862:	b948      	cbnz	r0, 800b878 <__smakebuf_r+0x44>
 800b864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b868:	059a      	lsls	r2, r3, #22
 800b86a:	d4ef      	bmi.n	800b84c <__smakebuf_r+0x18>
 800b86c:	f023 0303 	bic.w	r3, r3, #3
 800b870:	f043 0302 	orr.w	r3, r3, #2
 800b874:	81a3      	strh	r3, [r4, #12]
 800b876:	e7e3      	b.n	800b840 <__smakebuf_r+0xc>
 800b878:	4b0d      	ldr	r3, [pc, #52]	; (800b8b0 <__smakebuf_r+0x7c>)
 800b87a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b87c:	89a3      	ldrh	r3, [r4, #12]
 800b87e:	6020      	str	r0, [r4, #0]
 800b880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b884:	81a3      	strh	r3, [r4, #12]
 800b886:	9b00      	ldr	r3, [sp, #0]
 800b888:	6163      	str	r3, [r4, #20]
 800b88a:	9b01      	ldr	r3, [sp, #4]
 800b88c:	6120      	str	r0, [r4, #16]
 800b88e:	b15b      	cbz	r3, 800b8a8 <__smakebuf_r+0x74>
 800b890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b894:	4630      	mov	r0, r6
 800b896:	f000 fc3b 	bl	800c110 <_isatty_r>
 800b89a:	b128      	cbz	r0, 800b8a8 <__smakebuf_r+0x74>
 800b89c:	89a3      	ldrh	r3, [r4, #12]
 800b89e:	f023 0303 	bic.w	r3, r3, #3
 800b8a2:	f043 0301 	orr.w	r3, r3, #1
 800b8a6:	81a3      	strh	r3, [r4, #12]
 800b8a8:	89a3      	ldrh	r3, [r4, #12]
 800b8aa:	431d      	orrs	r5, r3
 800b8ac:	81a5      	strh	r5, [r4, #12]
 800b8ae:	e7cd      	b.n	800b84c <__smakebuf_r+0x18>
 800b8b0:	0800b6a1 	.word	0x0800b6a1

0800b8b4 <_free_r>:
 800b8b4:	b538      	push	{r3, r4, r5, lr}
 800b8b6:	4605      	mov	r5, r0
 800b8b8:	2900      	cmp	r1, #0
 800b8ba:	d045      	beq.n	800b948 <_free_r+0x94>
 800b8bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8c0:	1f0c      	subs	r4, r1, #4
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	bfb8      	it	lt
 800b8c6:	18e4      	addlt	r4, r4, r3
 800b8c8:	f000 fc44 	bl	800c154 <__malloc_lock>
 800b8cc:	4a1f      	ldr	r2, [pc, #124]	; (800b94c <_free_r+0x98>)
 800b8ce:	6813      	ldr	r3, [r2, #0]
 800b8d0:	4610      	mov	r0, r2
 800b8d2:	b933      	cbnz	r3, 800b8e2 <_free_r+0x2e>
 800b8d4:	6063      	str	r3, [r4, #4]
 800b8d6:	6014      	str	r4, [r2, #0]
 800b8d8:	4628      	mov	r0, r5
 800b8da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8de:	f000 bc3a 	b.w	800c156 <__malloc_unlock>
 800b8e2:	42a3      	cmp	r3, r4
 800b8e4:	d90c      	bls.n	800b900 <_free_r+0x4c>
 800b8e6:	6821      	ldr	r1, [r4, #0]
 800b8e8:	1862      	adds	r2, r4, r1
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	bf04      	itt	eq
 800b8ee:	681a      	ldreq	r2, [r3, #0]
 800b8f0:	685b      	ldreq	r3, [r3, #4]
 800b8f2:	6063      	str	r3, [r4, #4]
 800b8f4:	bf04      	itt	eq
 800b8f6:	1852      	addeq	r2, r2, r1
 800b8f8:	6022      	streq	r2, [r4, #0]
 800b8fa:	6004      	str	r4, [r0, #0]
 800b8fc:	e7ec      	b.n	800b8d8 <_free_r+0x24>
 800b8fe:	4613      	mov	r3, r2
 800b900:	685a      	ldr	r2, [r3, #4]
 800b902:	b10a      	cbz	r2, 800b908 <_free_r+0x54>
 800b904:	42a2      	cmp	r2, r4
 800b906:	d9fa      	bls.n	800b8fe <_free_r+0x4a>
 800b908:	6819      	ldr	r1, [r3, #0]
 800b90a:	1858      	adds	r0, r3, r1
 800b90c:	42a0      	cmp	r0, r4
 800b90e:	d10b      	bne.n	800b928 <_free_r+0x74>
 800b910:	6820      	ldr	r0, [r4, #0]
 800b912:	4401      	add	r1, r0
 800b914:	1858      	adds	r0, r3, r1
 800b916:	4282      	cmp	r2, r0
 800b918:	6019      	str	r1, [r3, #0]
 800b91a:	d1dd      	bne.n	800b8d8 <_free_r+0x24>
 800b91c:	6810      	ldr	r0, [r2, #0]
 800b91e:	6852      	ldr	r2, [r2, #4]
 800b920:	605a      	str	r2, [r3, #4]
 800b922:	4401      	add	r1, r0
 800b924:	6019      	str	r1, [r3, #0]
 800b926:	e7d7      	b.n	800b8d8 <_free_r+0x24>
 800b928:	d902      	bls.n	800b930 <_free_r+0x7c>
 800b92a:	230c      	movs	r3, #12
 800b92c:	602b      	str	r3, [r5, #0]
 800b92e:	e7d3      	b.n	800b8d8 <_free_r+0x24>
 800b930:	6820      	ldr	r0, [r4, #0]
 800b932:	1821      	adds	r1, r4, r0
 800b934:	428a      	cmp	r2, r1
 800b936:	bf04      	itt	eq
 800b938:	6811      	ldreq	r1, [r2, #0]
 800b93a:	6852      	ldreq	r2, [r2, #4]
 800b93c:	6062      	str	r2, [r4, #4]
 800b93e:	bf04      	itt	eq
 800b940:	1809      	addeq	r1, r1, r0
 800b942:	6021      	streq	r1, [r4, #0]
 800b944:	605c      	str	r4, [r3, #4]
 800b946:	e7c7      	b.n	800b8d8 <_free_r+0x24>
 800b948:	bd38      	pop	{r3, r4, r5, pc}
 800b94a:	bf00      	nop
 800b94c:	2000139c 	.word	0x2000139c

0800b950 <_malloc_r>:
 800b950:	b570      	push	{r4, r5, r6, lr}
 800b952:	1ccd      	adds	r5, r1, #3
 800b954:	f025 0503 	bic.w	r5, r5, #3
 800b958:	3508      	adds	r5, #8
 800b95a:	2d0c      	cmp	r5, #12
 800b95c:	bf38      	it	cc
 800b95e:	250c      	movcc	r5, #12
 800b960:	2d00      	cmp	r5, #0
 800b962:	4606      	mov	r6, r0
 800b964:	db01      	blt.n	800b96a <_malloc_r+0x1a>
 800b966:	42a9      	cmp	r1, r5
 800b968:	d903      	bls.n	800b972 <_malloc_r+0x22>
 800b96a:	230c      	movs	r3, #12
 800b96c:	6033      	str	r3, [r6, #0]
 800b96e:	2000      	movs	r0, #0
 800b970:	bd70      	pop	{r4, r5, r6, pc}
 800b972:	f000 fbef 	bl	800c154 <__malloc_lock>
 800b976:	4a21      	ldr	r2, [pc, #132]	; (800b9fc <_malloc_r+0xac>)
 800b978:	6814      	ldr	r4, [r2, #0]
 800b97a:	4621      	mov	r1, r4
 800b97c:	b991      	cbnz	r1, 800b9a4 <_malloc_r+0x54>
 800b97e:	4c20      	ldr	r4, [pc, #128]	; (800ba00 <_malloc_r+0xb0>)
 800b980:	6823      	ldr	r3, [r4, #0]
 800b982:	b91b      	cbnz	r3, 800b98c <_malloc_r+0x3c>
 800b984:	4630      	mov	r0, r6
 800b986:	f000 fb3b 	bl	800c000 <_sbrk_r>
 800b98a:	6020      	str	r0, [r4, #0]
 800b98c:	4629      	mov	r1, r5
 800b98e:	4630      	mov	r0, r6
 800b990:	f000 fb36 	bl	800c000 <_sbrk_r>
 800b994:	1c43      	adds	r3, r0, #1
 800b996:	d124      	bne.n	800b9e2 <_malloc_r+0x92>
 800b998:	230c      	movs	r3, #12
 800b99a:	6033      	str	r3, [r6, #0]
 800b99c:	4630      	mov	r0, r6
 800b99e:	f000 fbda 	bl	800c156 <__malloc_unlock>
 800b9a2:	e7e4      	b.n	800b96e <_malloc_r+0x1e>
 800b9a4:	680b      	ldr	r3, [r1, #0]
 800b9a6:	1b5b      	subs	r3, r3, r5
 800b9a8:	d418      	bmi.n	800b9dc <_malloc_r+0x8c>
 800b9aa:	2b0b      	cmp	r3, #11
 800b9ac:	d90f      	bls.n	800b9ce <_malloc_r+0x7e>
 800b9ae:	600b      	str	r3, [r1, #0]
 800b9b0:	50cd      	str	r5, [r1, r3]
 800b9b2:	18cc      	adds	r4, r1, r3
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	f000 fbce 	bl	800c156 <__malloc_unlock>
 800b9ba:	f104 000b 	add.w	r0, r4, #11
 800b9be:	1d23      	adds	r3, r4, #4
 800b9c0:	f020 0007 	bic.w	r0, r0, #7
 800b9c4:	1ac3      	subs	r3, r0, r3
 800b9c6:	d0d3      	beq.n	800b970 <_malloc_r+0x20>
 800b9c8:	425a      	negs	r2, r3
 800b9ca:	50e2      	str	r2, [r4, r3]
 800b9cc:	e7d0      	b.n	800b970 <_malloc_r+0x20>
 800b9ce:	428c      	cmp	r4, r1
 800b9d0:	684b      	ldr	r3, [r1, #4]
 800b9d2:	bf16      	itet	ne
 800b9d4:	6063      	strne	r3, [r4, #4]
 800b9d6:	6013      	streq	r3, [r2, #0]
 800b9d8:	460c      	movne	r4, r1
 800b9da:	e7eb      	b.n	800b9b4 <_malloc_r+0x64>
 800b9dc:	460c      	mov	r4, r1
 800b9de:	6849      	ldr	r1, [r1, #4]
 800b9e0:	e7cc      	b.n	800b97c <_malloc_r+0x2c>
 800b9e2:	1cc4      	adds	r4, r0, #3
 800b9e4:	f024 0403 	bic.w	r4, r4, #3
 800b9e8:	42a0      	cmp	r0, r4
 800b9ea:	d005      	beq.n	800b9f8 <_malloc_r+0xa8>
 800b9ec:	1a21      	subs	r1, r4, r0
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	f000 fb06 	bl	800c000 <_sbrk_r>
 800b9f4:	3001      	adds	r0, #1
 800b9f6:	d0cf      	beq.n	800b998 <_malloc_r+0x48>
 800b9f8:	6025      	str	r5, [r4, #0]
 800b9fa:	e7db      	b.n	800b9b4 <_malloc_r+0x64>
 800b9fc:	2000139c 	.word	0x2000139c
 800ba00:	200013a0 	.word	0x200013a0

0800ba04 <__sfputc_r>:
 800ba04:	6893      	ldr	r3, [r2, #8]
 800ba06:	3b01      	subs	r3, #1
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	b410      	push	{r4}
 800ba0c:	6093      	str	r3, [r2, #8]
 800ba0e:	da08      	bge.n	800ba22 <__sfputc_r+0x1e>
 800ba10:	6994      	ldr	r4, [r2, #24]
 800ba12:	42a3      	cmp	r3, r4
 800ba14:	db01      	blt.n	800ba1a <__sfputc_r+0x16>
 800ba16:	290a      	cmp	r1, #10
 800ba18:	d103      	bne.n	800ba22 <__sfputc_r+0x1e>
 800ba1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba1e:	f7ff bcab 	b.w	800b378 <__swbuf_r>
 800ba22:	6813      	ldr	r3, [r2, #0]
 800ba24:	1c58      	adds	r0, r3, #1
 800ba26:	6010      	str	r0, [r2, #0]
 800ba28:	7019      	strb	r1, [r3, #0]
 800ba2a:	4608      	mov	r0, r1
 800ba2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba30:	4770      	bx	lr

0800ba32 <__sfputs_r>:
 800ba32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba34:	4606      	mov	r6, r0
 800ba36:	460f      	mov	r7, r1
 800ba38:	4614      	mov	r4, r2
 800ba3a:	18d5      	adds	r5, r2, r3
 800ba3c:	42ac      	cmp	r4, r5
 800ba3e:	d101      	bne.n	800ba44 <__sfputs_r+0x12>
 800ba40:	2000      	movs	r0, #0
 800ba42:	e007      	b.n	800ba54 <__sfputs_r+0x22>
 800ba44:	463a      	mov	r2, r7
 800ba46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f7ff ffda 	bl	800ba04 <__sfputc_r>
 800ba50:	1c43      	adds	r3, r0, #1
 800ba52:	d1f3      	bne.n	800ba3c <__sfputs_r+0xa>
 800ba54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba58 <_vfiprintf_r>:
 800ba58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5c:	460c      	mov	r4, r1
 800ba5e:	b09d      	sub	sp, #116	; 0x74
 800ba60:	4617      	mov	r7, r2
 800ba62:	461d      	mov	r5, r3
 800ba64:	4606      	mov	r6, r0
 800ba66:	b118      	cbz	r0, 800ba70 <_vfiprintf_r+0x18>
 800ba68:	6983      	ldr	r3, [r0, #24]
 800ba6a:	b90b      	cbnz	r3, 800ba70 <_vfiprintf_r+0x18>
 800ba6c:	f7ff fe34 	bl	800b6d8 <__sinit>
 800ba70:	4b7c      	ldr	r3, [pc, #496]	; (800bc64 <_vfiprintf_r+0x20c>)
 800ba72:	429c      	cmp	r4, r3
 800ba74:	d158      	bne.n	800bb28 <_vfiprintf_r+0xd0>
 800ba76:	6874      	ldr	r4, [r6, #4]
 800ba78:	89a3      	ldrh	r3, [r4, #12]
 800ba7a:	0718      	lsls	r0, r3, #28
 800ba7c:	d55e      	bpl.n	800bb3c <_vfiprintf_r+0xe4>
 800ba7e:	6923      	ldr	r3, [r4, #16]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d05b      	beq.n	800bb3c <_vfiprintf_r+0xe4>
 800ba84:	2300      	movs	r3, #0
 800ba86:	9309      	str	r3, [sp, #36]	; 0x24
 800ba88:	2320      	movs	r3, #32
 800ba8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba8e:	2330      	movs	r3, #48	; 0x30
 800ba90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba94:	9503      	str	r5, [sp, #12]
 800ba96:	f04f 0b01 	mov.w	fp, #1
 800ba9a:	46b8      	mov	r8, r7
 800ba9c:	4645      	mov	r5, r8
 800ba9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800baa2:	b10b      	cbz	r3, 800baa8 <_vfiprintf_r+0x50>
 800baa4:	2b25      	cmp	r3, #37	; 0x25
 800baa6:	d154      	bne.n	800bb52 <_vfiprintf_r+0xfa>
 800baa8:	ebb8 0a07 	subs.w	sl, r8, r7
 800baac:	d00b      	beq.n	800bac6 <_vfiprintf_r+0x6e>
 800baae:	4653      	mov	r3, sl
 800bab0:	463a      	mov	r2, r7
 800bab2:	4621      	mov	r1, r4
 800bab4:	4630      	mov	r0, r6
 800bab6:	f7ff ffbc 	bl	800ba32 <__sfputs_r>
 800baba:	3001      	adds	r0, #1
 800babc:	f000 80c2 	beq.w	800bc44 <_vfiprintf_r+0x1ec>
 800bac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bac2:	4453      	add	r3, sl
 800bac4:	9309      	str	r3, [sp, #36]	; 0x24
 800bac6:	f898 3000 	ldrb.w	r3, [r8]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f000 80ba 	beq.w	800bc44 <_vfiprintf_r+0x1ec>
 800bad0:	2300      	movs	r3, #0
 800bad2:	f04f 32ff 	mov.w	r2, #4294967295
 800bad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bada:	9304      	str	r3, [sp, #16]
 800badc:	9307      	str	r3, [sp, #28]
 800bade:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bae2:	931a      	str	r3, [sp, #104]	; 0x68
 800bae4:	46a8      	mov	r8, r5
 800bae6:	2205      	movs	r2, #5
 800bae8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800baec:	485e      	ldr	r0, [pc, #376]	; (800bc68 <_vfiprintf_r+0x210>)
 800baee:	f7f4 fb4f 	bl	8000190 <memchr>
 800baf2:	9b04      	ldr	r3, [sp, #16]
 800baf4:	bb78      	cbnz	r0, 800bb56 <_vfiprintf_r+0xfe>
 800baf6:	06d9      	lsls	r1, r3, #27
 800baf8:	bf44      	itt	mi
 800bafa:	2220      	movmi	r2, #32
 800bafc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb00:	071a      	lsls	r2, r3, #28
 800bb02:	bf44      	itt	mi
 800bb04:	222b      	movmi	r2, #43	; 0x2b
 800bb06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb0a:	782a      	ldrb	r2, [r5, #0]
 800bb0c:	2a2a      	cmp	r2, #42	; 0x2a
 800bb0e:	d02a      	beq.n	800bb66 <_vfiprintf_r+0x10e>
 800bb10:	9a07      	ldr	r2, [sp, #28]
 800bb12:	46a8      	mov	r8, r5
 800bb14:	2000      	movs	r0, #0
 800bb16:	250a      	movs	r5, #10
 800bb18:	4641      	mov	r1, r8
 800bb1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb1e:	3b30      	subs	r3, #48	; 0x30
 800bb20:	2b09      	cmp	r3, #9
 800bb22:	d969      	bls.n	800bbf8 <_vfiprintf_r+0x1a0>
 800bb24:	b360      	cbz	r0, 800bb80 <_vfiprintf_r+0x128>
 800bb26:	e024      	b.n	800bb72 <_vfiprintf_r+0x11a>
 800bb28:	4b50      	ldr	r3, [pc, #320]	; (800bc6c <_vfiprintf_r+0x214>)
 800bb2a:	429c      	cmp	r4, r3
 800bb2c:	d101      	bne.n	800bb32 <_vfiprintf_r+0xda>
 800bb2e:	68b4      	ldr	r4, [r6, #8]
 800bb30:	e7a2      	b.n	800ba78 <_vfiprintf_r+0x20>
 800bb32:	4b4f      	ldr	r3, [pc, #316]	; (800bc70 <_vfiprintf_r+0x218>)
 800bb34:	429c      	cmp	r4, r3
 800bb36:	bf08      	it	eq
 800bb38:	68f4      	ldreq	r4, [r6, #12]
 800bb3a:	e79d      	b.n	800ba78 <_vfiprintf_r+0x20>
 800bb3c:	4621      	mov	r1, r4
 800bb3e:	4630      	mov	r0, r6
 800bb40:	f7ff fc6c 	bl	800b41c <__swsetup_r>
 800bb44:	2800      	cmp	r0, #0
 800bb46:	d09d      	beq.n	800ba84 <_vfiprintf_r+0x2c>
 800bb48:	f04f 30ff 	mov.w	r0, #4294967295
 800bb4c:	b01d      	add	sp, #116	; 0x74
 800bb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb52:	46a8      	mov	r8, r5
 800bb54:	e7a2      	b.n	800ba9c <_vfiprintf_r+0x44>
 800bb56:	4a44      	ldr	r2, [pc, #272]	; (800bc68 <_vfiprintf_r+0x210>)
 800bb58:	1a80      	subs	r0, r0, r2
 800bb5a:	fa0b f000 	lsl.w	r0, fp, r0
 800bb5e:	4318      	orrs	r0, r3
 800bb60:	9004      	str	r0, [sp, #16]
 800bb62:	4645      	mov	r5, r8
 800bb64:	e7be      	b.n	800bae4 <_vfiprintf_r+0x8c>
 800bb66:	9a03      	ldr	r2, [sp, #12]
 800bb68:	1d11      	adds	r1, r2, #4
 800bb6a:	6812      	ldr	r2, [r2, #0]
 800bb6c:	9103      	str	r1, [sp, #12]
 800bb6e:	2a00      	cmp	r2, #0
 800bb70:	db01      	blt.n	800bb76 <_vfiprintf_r+0x11e>
 800bb72:	9207      	str	r2, [sp, #28]
 800bb74:	e004      	b.n	800bb80 <_vfiprintf_r+0x128>
 800bb76:	4252      	negs	r2, r2
 800bb78:	f043 0302 	orr.w	r3, r3, #2
 800bb7c:	9207      	str	r2, [sp, #28]
 800bb7e:	9304      	str	r3, [sp, #16]
 800bb80:	f898 3000 	ldrb.w	r3, [r8]
 800bb84:	2b2e      	cmp	r3, #46	; 0x2e
 800bb86:	d10e      	bne.n	800bba6 <_vfiprintf_r+0x14e>
 800bb88:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bb8c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb8e:	d138      	bne.n	800bc02 <_vfiprintf_r+0x1aa>
 800bb90:	9b03      	ldr	r3, [sp, #12]
 800bb92:	1d1a      	adds	r2, r3, #4
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	9203      	str	r2, [sp, #12]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	bfb8      	it	lt
 800bb9c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bba0:	f108 0802 	add.w	r8, r8, #2
 800bba4:	9305      	str	r3, [sp, #20]
 800bba6:	4d33      	ldr	r5, [pc, #204]	; (800bc74 <_vfiprintf_r+0x21c>)
 800bba8:	f898 1000 	ldrb.w	r1, [r8]
 800bbac:	2203      	movs	r2, #3
 800bbae:	4628      	mov	r0, r5
 800bbb0:	f7f4 faee 	bl	8000190 <memchr>
 800bbb4:	b140      	cbz	r0, 800bbc8 <_vfiprintf_r+0x170>
 800bbb6:	2340      	movs	r3, #64	; 0x40
 800bbb8:	1b40      	subs	r0, r0, r5
 800bbba:	fa03 f000 	lsl.w	r0, r3, r0
 800bbbe:	9b04      	ldr	r3, [sp, #16]
 800bbc0:	4303      	orrs	r3, r0
 800bbc2:	f108 0801 	add.w	r8, r8, #1
 800bbc6:	9304      	str	r3, [sp, #16]
 800bbc8:	f898 1000 	ldrb.w	r1, [r8]
 800bbcc:	482a      	ldr	r0, [pc, #168]	; (800bc78 <_vfiprintf_r+0x220>)
 800bbce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbd2:	2206      	movs	r2, #6
 800bbd4:	f108 0701 	add.w	r7, r8, #1
 800bbd8:	f7f4 fada 	bl	8000190 <memchr>
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	d037      	beq.n	800bc50 <_vfiprintf_r+0x1f8>
 800bbe0:	4b26      	ldr	r3, [pc, #152]	; (800bc7c <_vfiprintf_r+0x224>)
 800bbe2:	bb1b      	cbnz	r3, 800bc2c <_vfiprintf_r+0x1d4>
 800bbe4:	9b03      	ldr	r3, [sp, #12]
 800bbe6:	3307      	adds	r3, #7
 800bbe8:	f023 0307 	bic.w	r3, r3, #7
 800bbec:	3308      	adds	r3, #8
 800bbee:	9303      	str	r3, [sp, #12]
 800bbf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbf2:	444b      	add	r3, r9
 800bbf4:	9309      	str	r3, [sp, #36]	; 0x24
 800bbf6:	e750      	b.n	800ba9a <_vfiprintf_r+0x42>
 800bbf8:	fb05 3202 	mla	r2, r5, r2, r3
 800bbfc:	2001      	movs	r0, #1
 800bbfe:	4688      	mov	r8, r1
 800bc00:	e78a      	b.n	800bb18 <_vfiprintf_r+0xc0>
 800bc02:	2300      	movs	r3, #0
 800bc04:	f108 0801 	add.w	r8, r8, #1
 800bc08:	9305      	str	r3, [sp, #20]
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	250a      	movs	r5, #10
 800bc0e:	4640      	mov	r0, r8
 800bc10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc14:	3a30      	subs	r2, #48	; 0x30
 800bc16:	2a09      	cmp	r2, #9
 800bc18:	d903      	bls.n	800bc22 <_vfiprintf_r+0x1ca>
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d0c3      	beq.n	800bba6 <_vfiprintf_r+0x14e>
 800bc1e:	9105      	str	r1, [sp, #20]
 800bc20:	e7c1      	b.n	800bba6 <_vfiprintf_r+0x14e>
 800bc22:	fb05 2101 	mla	r1, r5, r1, r2
 800bc26:	2301      	movs	r3, #1
 800bc28:	4680      	mov	r8, r0
 800bc2a:	e7f0      	b.n	800bc0e <_vfiprintf_r+0x1b6>
 800bc2c:	ab03      	add	r3, sp, #12
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	4622      	mov	r2, r4
 800bc32:	4b13      	ldr	r3, [pc, #76]	; (800bc80 <_vfiprintf_r+0x228>)
 800bc34:	a904      	add	r1, sp, #16
 800bc36:	4630      	mov	r0, r6
 800bc38:	f3af 8000 	nop.w
 800bc3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bc40:	4681      	mov	r9, r0
 800bc42:	d1d5      	bne.n	800bbf0 <_vfiprintf_r+0x198>
 800bc44:	89a3      	ldrh	r3, [r4, #12]
 800bc46:	065b      	lsls	r3, r3, #25
 800bc48:	f53f af7e 	bmi.w	800bb48 <_vfiprintf_r+0xf0>
 800bc4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc4e:	e77d      	b.n	800bb4c <_vfiprintf_r+0xf4>
 800bc50:	ab03      	add	r3, sp, #12
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	4622      	mov	r2, r4
 800bc56:	4b0a      	ldr	r3, [pc, #40]	; (800bc80 <_vfiprintf_r+0x228>)
 800bc58:	a904      	add	r1, sp, #16
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	f000 f888 	bl	800bd70 <_printf_i>
 800bc60:	e7ec      	b.n	800bc3c <_vfiprintf_r+0x1e4>
 800bc62:	bf00      	nop
 800bc64:	0800c8a8 	.word	0x0800c8a8
 800bc68:	0800c8e8 	.word	0x0800c8e8
 800bc6c:	0800c8c8 	.word	0x0800c8c8
 800bc70:	0800c888 	.word	0x0800c888
 800bc74:	0800c8ee 	.word	0x0800c8ee
 800bc78:	0800c8f2 	.word	0x0800c8f2
 800bc7c:	00000000 	.word	0x00000000
 800bc80:	0800ba33 	.word	0x0800ba33

0800bc84 <_printf_common>:
 800bc84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc88:	4691      	mov	r9, r2
 800bc8a:	461f      	mov	r7, r3
 800bc8c:	688a      	ldr	r2, [r1, #8]
 800bc8e:	690b      	ldr	r3, [r1, #16]
 800bc90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc94:	4293      	cmp	r3, r2
 800bc96:	bfb8      	it	lt
 800bc98:	4613      	movlt	r3, r2
 800bc9a:	f8c9 3000 	str.w	r3, [r9]
 800bc9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bca2:	4606      	mov	r6, r0
 800bca4:	460c      	mov	r4, r1
 800bca6:	b112      	cbz	r2, 800bcae <_printf_common+0x2a>
 800bca8:	3301      	adds	r3, #1
 800bcaa:	f8c9 3000 	str.w	r3, [r9]
 800bcae:	6823      	ldr	r3, [r4, #0]
 800bcb0:	0699      	lsls	r1, r3, #26
 800bcb2:	bf42      	ittt	mi
 800bcb4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bcb8:	3302      	addmi	r3, #2
 800bcba:	f8c9 3000 	strmi.w	r3, [r9]
 800bcbe:	6825      	ldr	r5, [r4, #0]
 800bcc0:	f015 0506 	ands.w	r5, r5, #6
 800bcc4:	d107      	bne.n	800bcd6 <_printf_common+0x52>
 800bcc6:	f104 0a19 	add.w	sl, r4, #25
 800bcca:	68e3      	ldr	r3, [r4, #12]
 800bccc:	f8d9 2000 	ldr.w	r2, [r9]
 800bcd0:	1a9b      	subs	r3, r3, r2
 800bcd2:	42ab      	cmp	r3, r5
 800bcd4:	dc28      	bgt.n	800bd28 <_printf_common+0xa4>
 800bcd6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bcda:	6822      	ldr	r2, [r4, #0]
 800bcdc:	3300      	adds	r3, #0
 800bcde:	bf18      	it	ne
 800bce0:	2301      	movne	r3, #1
 800bce2:	0692      	lsls	r2, r2, #26
 800bce4:	d42d      	bmi.n	800bd42 <_printf_common+0xbe>
 800bce6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bcea:	4639      	mov	r1, r7
 800bcec:	4630      	mov	r0, r6
 800bcee:	47c0      	blx	r8
 800bcf0:	3001      	adds	r0, #1
 800bcf2:	d020      	beq.n	800bd36 <_printf_common+0xb2>
 800bcf4:	6823      	ldr	r3, [r4, #0]
 800bcf6:	68e5      	ldr	r5, [r4, #12]
 800bcf8:	f8d9 2000 	ldr.w	r2, [r9]
 800bcfc:	f003 0306 	and.w	r3, r3, #6
 800bd00:	2b04      	cmp	r3, #4
 800bd02:	bf08      	it	eq
 800bd04:	1aad      	subeq	r5, r5, r2
 800bd06:	68a3      	ldr	r3, [r4, #8]
 800bd08:	6922      	ldr	r2, [r4, #16]
 800bd0a:	bf0c      	ite	eq
 800bd0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd10:	2500      	movne	r5, #0
 800bd12:	4293      	cmp	r3, r2
 800bd14:	bfc4      	itt	gt
 800bd16:	1a9b      	subgt	r3, r3, r2
 800bd18:	18ed      	addgt	r5, r5, r3
 800bd1a:	f04f 0900 	mov.w	r9, #0
 800bd1e:	341a      	adds	r4, #26
 800bd20:	454d      	cmp	r5, r9
 800bd22:	d11a      	bne.n	800bd5a <_printf_common+0xd6>
 800bd24:	2000      	movs	r0, #0
 800bd26:	e008      	b.n	800bd3a <_printf_common+0xb6>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	4652      	mov	r2, sl
 800bd2c:	4639      	mov	r1, r7
 800bd2e:	4630      	mov	r0, r6
 800bd30:	47c0      	blx	r8
 800bd32:	3001      	adds	r0, #1
 800bd34:	d103      	bne.n	800bd3e <_printf_common+0xba>
 800bd36:	f04f 30ff 	mov.w	r0, #4294967295
 800bd3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd3e:	3501      	adds	r5, #1
 800bd40:	e7c3      	b.n	800bcca <_printf_common+0x46>
 800bd42:	18e1      	adds	r1, r4, r3
 800bd44:	1c5a      	adds	r2, r3, #1
 800bd46:	2030      	movs	r0, #48	; 0x30
 800bd48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd4c:	4422      	add	r2, r4
 800bd4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd56:	3302      	adds	r3, #2
 800bd58:	e7c5      	b.n	800bce6 <_printf_common+0x62>
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	4622      	mov	r2, r4
 800bd5e:	4639      	mov	r1, r7
 800bd60:	4630      	mov	r0, r6
 800bd62:	47c0      	blx	r8
 800bd64:	3001      	adds	r0, #1
 800bd66:	d0e6      	beq.n	800bd36 <_printf_common+0xb2>
 800bd68:	f109 0901 	add.w	r9, r9, #1
 800bd6c:	e7d8      	b.n	800bd20 <_printf_common+0x9c>
	...

0800bd70 <_printf_i>:
 800bd70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bd78:	460c      	mov	r4, r1
 800bd7a:	7e09      	ldrb	r1, [r1, #24]
 800bd7c:	b085      	sub	sp, #20
 800bd7e:	296e      	cmp	r1, #110	; 0x6e
 800bd80:	4617      	mov	r7, r2
 800bd82:	4606      	mov	r6, r0
 800bd84:	4698      	mov	r8, r3
 800bd86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd88:	f000 80b3 	beq.w	800bef2 <_printf_i+0x182>
 800bd8c:	d822      	bhi.n	800bdd4 <_printf_i+0x64>
 800bd8e:	2963      	cmp	r1, #99	; 0x63
 800bd90:	d036      	beq.n	800be00 <_printf_i+0x90>
 800bd92:	d80a      	bhi.n	800bdaa <_printf_i+0x3a>
 800bd94:	2900      	cmp	r1, #0
 800bd96:	f000 80b9 	beq.w	800bf0c <_printf_i+0x19c>
 800bd9a:	2958      	cmp	r1, #88	; 0x58
 800bd9c:	f000 8083 	beq.w	800bea6 <_printf_i+0x136>
 800bda0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bda4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bda8:	e032      	b.n	800be10 <_printf_i+0xa0>
 800bdaa:	2964      	cmp	r1, #100	; 0x64
 800bdac:	d001      	beq.n	800bdb2 <_printf_i+0x42>
 800bdae:	2969      	cmp	r1, #105	; 0x69
 800bdb0:	d1f6      	bne.n	800bda0 <_printf_i+0x30>
 800bdb2:	6820      	ldr	r0, [r4, #0]
 800bdb4:	6813      	ldr	r3, [r2, #0]
 800bdb6:	0605      	lsls	r5, r0, #24
 800bdb8:	f103 0104 	add.w	r1, r3, #4
 800bdbc:	d52a      	bpl.n	800be14 <_printf_i+0xa4>
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	6011      	str	r1, [r2, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	da03      	bge.n	800bdce <_printf_i+0x5e>
 800bdc6:	222d      	movs	r2, #45	; 0x2d
 800bdc8:	425b      	negs	r3, r3
 800bdca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bdce:	486f      	ldr	r0, [pc, #444]	; (800bf8c <_printf_i+0x21c>)
 800bdd0:	220a      	movs	r2, #10
 800bdd2:	e039      	b.n	800be48 <_printf_i+0xd8>
 800bdd4:	2973      	cmp	r1, #115	; 0x73
 800bdd6:	f000 809d 	beq.w	800bf14 <_printf_i+0x1a4>
 800bdda:	d808      	bhi.n	800bdee <_printf_i+0x7e>
 800bddc:	296f      	cmp	r1, #111	; 0x6f
 800bdde:	d020      	beq.n	800be22 <_printf_i+0xb2>
 800bde0:	2970      	cmp	r1, #112	; 0x70
 800bde2:	d1dd      	bne.n	800bda0 <_printf_i+0x30>
 800bde4:	6823      	ldr	r3, [r4, #0]
 800bde6:	f043 0320 	orr.w	r3, r3, #32
 800bdea:	6023      	str	r3, [r4, #0]
 800bdec:	e003      	b.n	800bdf6 <_printf_i+0x86>
 800bdee:	2975      	cmp	r1, #117	; 0x75
 800bdf0:	d017      	beq.n	800be22 <_printf_i+0xb2>
 800bdf2:	2978      	cmp	r1, #120	; 0x78
 800bdf4:	d1d4      	bne.n	800bda0 <_printf_i+0x30>
 800bdf6:	2378      	movs	r3, #120	; 0x78
 800bdf8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bdfc:	4864      	ldr	r0, [pc, #400]	; (800bf90 <_printf_i+0x220>)
 800bdfe:	e055      	b.n	800beac <_printf_i+0x13c>
 800be00:	6813      	ldr	r3, [r2, #0]
 800be02:	1d19      	adds	r1, r3, #4
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	6011      	str	r1, [r2, #0]
 800be08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be10:	2301      	movs	r3, #1
 800be12:	e08c      	b.n	800bf2e <_printf_i+0x1be>
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	6011      	str	r1, [r2, #0]
 800be18:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be1c:	bf18      	it	ne
 800be1e:	b21b      	sxthne	r3, r3
 800be20:	e7cf      	b.n	800bdc2 <_printf_i+0x52>
 800be22:	6813      	ldr	r3, [r2, #0]
 800be24:	6825      	ldr	r5, [r4, #0]
 800be26:	1d18      	adds	r0, r3, #4
 800be28:	6010      	str	r0, [r2, #0]
 800be2a:	0628      	lsls	r0, r5, #24
 800be2c:	d501      	bpl.n	800be32 <_printf_i+0xc2>
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	e002      	b.n	800be38 <_printf_i+0xc8>
 800be32:	0668      	lsls	r0, r5, #25
 800be34:	d5fb      	bpl.n	800be2e <_printf_i+0xbe>
 800be36:	881b      	ldrh	r3, [r3, #0]
 800be38:	4854      	ldr	r0, [pc, #336]	; (800bf8c <_printf_i+0x21c>)
 800be3a:	296f      	cmp	r1, #111	; 0x6f
 800be3c:	bf14      	ite	ne
 800be3e:	220a      	movne	r2, #10
 800be40:	2208      	moveq	r2, #8
 800be42:	2100      	movs	r1, #0
 800be44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be48:	6865      	ldr	r5, [r4, #4]
 800be4a:	60a5      	str	r5, [r4, #8]
 800be4c:	2d00      	cmp	r5, #0
 800be4e:	f2c0 8095 	blt.w	800bf7c <_printf_i+0x20c>
 800be52:	6821      	ldr	r1, [r4, #0]
 800be54:	f021 0104 	bic.w	r1, r1, #4
 800be58:	6021      	str	r1, [r4, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d13d      	bne.n	800beda <_printf_i+0x16a>
 800be5e:	2d00      	cmp	r5, #0
 800be60:	f040 808e 	bne.w	800bf80 <_printf_i+0x210>
 800be64:	4665      	mov	r5, ip
 800be66:	2a08      	cmp	r2, #8
 800be68:	d10b      	bne.n	800be82 <_printf_i+0x112>
 800be6a:	6823      	ldr	r3, [r4, #0]
 800be6c:	07db      	lsls	r3, r3, #31
 800be6e:	d508      	bpl.n	800be82 <_printf_i+0x112>
 800be70:	6923      	ldr	r3, [r4, #16]
 800be72:	6862      	ldr	r2, [r4, #4]
 800be74:	429a      	cmp	r2, r3
 800be76:	bfde      	ittt	le
 800be78:	2330      	movle	r3, #48	; 0x30
 800be7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be82:	ebac 0305 	sub.w	r3, ip, r5
 800be86:	6123      	str	r3, [r4, #16]
 800be88:	f8cd 8000 	str.w	r8, [sp]
 800be8c:	463b      	mov	r3, r7
 800be8e:	aa03      	add	r2, sp, #12
 800be90:	4621      	mov	r1, r4
 800be92:	4630      	mov	r0, r6
 800be94:	f7ff fef6 	bl	800bc84 <_printf_common>
 800be98:	3001      	adds	r0, #1
 800be9a:	d14d      	bne.n	800bf38 <_printf_i+0x1c8>
 800be9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bea0:	b005      	add	sp, #20
 800bea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bea6:	4839      	ldr	r0, [pc, #228]	; (800bf8c <_printf_i+0x21c>)
 800bea8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800beac:	6813      	ldr	r3, [r2, #0]
 800beae:	6821      	ldr	r1, [r4, #0]
 800beb0:	1d1d      	adds	r5, r3, #4
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	6015      	str	r5, [r2, #0]
 800beb6:	060a      	lsls	r2, r1, #24
 800beb8:	d50b      	bpl.n	800bed2 <_printf_i+0x162>
 800beba:	07ca      	lsls	r2, r1, #31
 800bebc:	bf44      	itt	mi
 800bebe:	f041 0120 	orrmi.w	r1, r1, #32
 800bec2:	6021      	strmi	r1, [r4, #0]
 800bec4:	b91b      	cbnz	r3, 800bece <_printf_i+0x15e>
 800bec6:	6822      	ldr	r2, [r4, #0]
 800bec8:	f022 0220 	bic.w	r2, r2, #32
 800becc:	6022      	str	r2, [r4, #0]
 800bece:	2210      	movs	r2, #16
 800bed0:	e7b7      	b.n	800be42 <_printf_i+0xd2>
 800bed2:	064d      	lsls	r5, r1, #25
 800bed4:	bf48      	it	mi
 800bed6:	b29b      	uxthmi	r3, r3
 800bed8:	e7ef      	b.n	800beba <_printf_i+0x14a>
 800beda:	4665      	mov	r5, ip
 800bedc:	fbb3 f1f2 	udiv	r1, r3, r2
 800bee0:	fb02 3311 	mls	r3, r2, r1, r3
 800bee4:	5cc3      	ldrb	r3, [r0, r3]
 800bee6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800beea:	460b      	mov	r3, r1
 800beec:	2900      	cmp	r1, #0
 800beee:	d1f5      	bne.n	800bedc <_printf_i+0x16c>
 800bef0:	e7b9      	b.n	800be66 <_printf_i+0xf6>
 800bef2:	6813      	ldr	r3, [r2, #0]
 800bef4:	6825      	ldr	r5, [r4, #0]
 800bef6:	6961      	ldr	r1, [r4, #20]
 800bef8:	1d18      	adds	r0, r3, #4
 800befa:	6010      	str	r0, [r2, #0]
 800befc:	0628      	lsls	r0, r5, #24
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	d501      	bpl.n	800bf06 <_printf_i+0x196>
 800bf02:	6019      	str	r1, [r3, #0]
 800bf04:	e002      	b.n	800bf0c <_printf_i+0x19c>
 800bf06:	066a      	lsls	r2, r5, #25
 800bf08:	d5fb      	bpl.n	800bf02 <_printf_i+0x192>
 800bf0a:	8019      	strh	r1, [r3, #0]
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	6123      	str	r3, [r4, #16]
 800bf10:	4665      	mov	r5, ip
 800bf12:	e7b9      	b.n	800be88 <_printf_i+0x118>
 800bf14:	6813      	ldr	r3, [r2, #0]
 800bf16:	1d19      	adds	r1, r3, #4
 800bf18:	6011      	str	r1, [r2, #0]
 800bf1a:	681d      	ldr	r5, [r3, #0]
 800bf1c:	6862      	ldr	r2, [r4, #4]
 800bf1e:	2100      	movs	r1, #0
 800bf20:	4628      	mov	r0, r5
 800bf22:	f7f4 f935 	bl	8000190 <memchr>
 800bf26:	b108      	cbz	r0, 800bf2c <_printf_i+0x1bc>
 800bf28:	1b40      	subs	r0, r0, r5
 800bf2a:	6060      	str	r0, [r4, #4]
 800bf2c:	6863      	ldr	r3, [r4, #4]
 800bf2e:	6123      	str	r3, [r4, #16]
 800bf30:	2300      	movs	r3, #0
 800bf32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf36:	e7a7      	b.n	800be88 <_printf_i+0x118>
 800bf38:	6923      	ldr	r3, [r4, #16]
 800bf3a:	462a      	mov	r2, r5
 800bf3c:	4639      	mov	r1, r7
 800bf3e:	4630      	mov	r0, r6
 800bf40:	47c0      	blx	r8
 800bf42:	3001      	adds	r0, #1
 800bf44:	d0aa      	beq.n	800be9c <_printf_i+0x12c>
 800bf46:	6823      	ldr	r3, [r4, #0]
 800bf48:	079b      	lsls	r3, r3, #30
 800bf4a:	d413      	bmi.n	800bf74 <_printf_i+0x204>
 800bf4c:	68e0      	ldr	r0, [r4, #12]
 800bf4e:	9b03      	ldr	r3, [sp, #12]
 800bf50:	4298      	cmp	r0, r3
 800bf52:	bfb8      	it	lt
 800bf54:	4618      	movlt	r0, r3
 800bf56:	e7a3      	b.n	800bea0 <_printf_i+0x130>
 800bf58:	2301      	movs	r3, #1
 800bf5a:	464a      	mov	r2, r9
 800bf5c:	4639      	mov	r1, r7
 800bf5e:	4630      	mov	r0, r6
 800bf60:	47c0      	blx	r8
 800bf62:	3001      	adds	r0, #1
 800bf64:	d09a      	beq.n	800be9c <_printf_i+0x12c>
 800bf66:	3501      	adds	r5, #1
 800bf68:	68e3      	ldr	r3, [r4, #12]
 800bf6a:	9a03      	ldr	r2, [sp, #12]
 800bf6c:	1a9b      	subs	r3, r3, r2
 800bf6e:	42ab      	cmp	r3, r5
 800bf70:	dcf2      	bgt.n	800bf58 <_printf_i+0x1e8>
 800bf72:	e7eb      	b.n	800bf4c <_printf_i+0x1dc>
 800bf74:	2500      	movs	r5, #0
 800bf76:	f104 0919 	add.w	r9, r4, #25
 800bf7a:	e7f5      	b.n	800bf68 <_printf_i+0x1f8>
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d1ac      	bne.n	800beda <_printf_i+0x16a>
 800bf80:	7803      	ldrb	r3, [r0, #0]
 800bf82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf8a:	e76c      	b.n	800be66 <_printf_i+0xf6>
 800bf8c:	0800c8f9 	.word	0x0800c8f9
 800bf90:	0800c90a 	.word	0x0800c90a

0800bf94 <_putc_r>:
 800bf94:	b570      	push	{r4, r5, r6, lr}
 800bf96:	460d      	mov	r5, r1
 800bf98:	4614      	mov	r4, r2
 800bf9a:	4606      	mov	r6, r0
 800bf9c:	b118      	cbz	r0, 800bfa6 <_putc_r+0x12>
 800bf9e:	6983      	ldr	r3, [r0, #24]
 800bfa0:	b90b      	cbnz	r3, 800bfa6 <_putc_r+0x12>
 800bfa2:	f7ff fb99 	bl	800b6d8 <__sinit>
 800bfa6:	4b13      	ldr	r3, [pc, #76]	; (800bff4 <_putc_r+0x60>)
 800bfa8:	429c      	cmp	r4, r3
 800bfaa:	d112      	bne.n	800bfd2 <_putc_r+0x3e>
 800bfac:	6874      	ldr	r4, [r6, #4]
 800bfae:	68a3      	ldr	r3, [r4, #8]
 800bfb0:	3b01      	subs	r3, #1
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	60a3      	str	r3, [r4, #8]
 800bfb6:	da16      	bge.n	800bfe6 <_putc_r+0x52>
 800bfb8:	69a2      	ldr	r2, [r4, #24]
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	db02      	blt.n	800bfc4 <_putc_r+0x30>
 800bfbe:	b2eb      	uxtb	r3, r5
 800bfc0:	2b0a      	cmp	r3, #10
 800bfc2:	d110      	bne.n	800bfe6 <_putc_r+0x52>
 800bfc4:	4622      	mov	r2, r4
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	4630      	mov	r0, r6
 800bfca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bfce:	f7ff b9d3 	b.w	800b378 <__swbuf_r>
 800bfd2:	4b09      	ldr	r3, [pc, #36]	; (800bff8 <_putc_r+0x64>)
 800bfd4:	429c      	cmp	r4, r3
 800bfd6:	d101      	bne.n	800bfdc <_putc_r+0x48>
 800bfd8:	68b4      	ldr	r4, [r6, #8]
 800bfda:	e7e8      	b.n	800bfae <_putc_r+0x1a>
 800bfdc:	4b07      	ldr	r3, [pc, #28]	; (800bffc <_putc_r+0x68>)
 800bfde:	429c      	cmp	r4, r3
 800bfe0:	bf08      	it	eq
 800bfe2:	68f4      	ldreq	r4, [r6, #12]
 800bfe4:	e7e3      	b.n	800bfae <_putc_r+0x1a>
 800bfe6:	6823      	ldr	r3, [r4, #0]
 800bfe8:	1c5a      	adds	r2, r3, #1
 800bfea:	6022      	str	r2, [r4, #0]
 800bfec:	701d      	strb	r5, [r3, #0]
 800bfee:	b2e8      	uxtb	r0, r5
 800bff0:	bd70      	pop	{r4, r5, r6, pc}
 800bff2:	bf00      	nop
 800bff4:	0800c8a8 	.word	0x0800c8a8
 800bff8:	0800c8c8 	.word	0x0800c8c8
 800bffc:	0800c888 	.word	0x0800c888

0800c000 <_sbrk_r>:
 800c000:	b538      	push	{r3, r4, r5, lr}
 800c002:	4c06      	ldr	r4, [pc, #24]	; (800c01c <_sbrk_r+0x1c>)
 800c004:	2300      	movs	r3, #0
 800c006:	4605      	mov	r5, r0
 800c008:	4608      	mov	r0, r1
 800c00a:	6023      	str	r3, [r4, #0]
 800c00c:	f7f4 fad6 	bl	80005bc <_sbrk>
 800c010:	1c43      	adds	r3, r0, #1
 800c012:	d102      	bne.n	800c01a <_sbrk_r+0x1a>
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	b103      	cbz	r3, 800c01a <_sbrk_r+0x1a>
 800c018:	602b      	str	r3, [r5, #0]
 800c01a:	bd38      	pop	{r3, r4, r5, pc}
 800c01c:	200015c4 	.word	0x200015c4

0800c020 <__sread>:
 800c020:	b510      	push	{r4, lr}
 800c022:	460c      	mov	r4, r1
 800c024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c028:	f000 f896 	bl	800c158 <_read_r>
 800c02c:	2800      	cmp	r0, #0
 800c02e:	bfab      	itete	ge
 800c030:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c032:	89a3      	ldrhlt	r3, [r4, #12]
 800c034:	181b      	addge	r3, r3, r0
 800c036:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c03a:	bfac      	ite	ge
 800c03c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c03e:	81a3      	strhlt	r3, [r4, #12]
 800c040:	bd10      	pop	{r4, pc}

0800c042 <__swrite>:
 800c042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c046:	461f      	mov	r7, r3
 800c048:	898b      	ldrh	r3, [r1, #12]
 800c04a:	05db      	lsls	r3, r3, #23
 800c04c:	4605      	mov	r5, r0
 800c04e:	460c      	mov	r4, r1
 800c050:	4616      	mov	r6, r2
 800c052:	d505      	bpl.n	800c060 <__swrite+0x1e>
 800c054:	2302      	movs	r3, #2
 800c056:	2200      	movs	r2, #0
 800c058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c05c:	f000 f868 	bl	800c130 <_lseek_r>
 800c060:	89a3      	ldrh	r3, [r4, #12]
 800c062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c066:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c06a:	81a3      	strh	r3, [r4, #12]
 800c06c:	4632      	mov	r2, r6
 800c06e:	463b      	mov	r3, r7
 800c070:	4628      	mov	r0, r5
 800c072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c076:	f000 b817 	b.w	800c0a8 <_write_r>

0800c07a <__sseek>:
 800c07a:	b510      	push	{r4, lr}
 800c07c:	460c      	mov	r4, r1
 800c07e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c082:	f000 f855 	bl	800c130 <_lseek_r>
 800c086:	1c43      	adds	r3, r0, #1
 800c088:	89a3      	ldrh	r3, [r4, #12]
 800c08a:	bf15      	itete	ne
 800c08c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c08e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c092:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c096:	81a3      	strheq	r3, [r4, #12]
 800c098:	bf18      	it	ne
 800c09a:	81a3      	strhne	r3, [r4, #12]
 800c09c:	bd10      	pop	{r4, pc}

0800c09e <__sclose>:
 800c09e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0a2:	f000 b813 	b.w	800c0cc <_close_r>
	...

0800c0a8 <_write_r>:
 800c0a8:	b538      	push	{r3, r4, r5, lr}
 800c0aa:	4c07      	ldr	r4, [pc, #28]	; (800c0c8 <_write_r+0x20>)
 800c0ac:	4605      	mov	r5, r0
 800c0ae:	4608      	mov	r0, r1
 800c0b0:	4611      	mov	r1, r2
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	6022      	str	r2, [r4, #0]
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	f7fd fb4e 	bl	8009758 <_write>
 800c0bc:	1c43      	adds	r3, r0, #1
 800c0be:	d102      	bne.n	800c0c6 <_write_r+0x1e>
 800c0c0:	6823      	ldr	r3, [r4, #0]
 800c0c2:	b103      	cbz	r3, 800c0c6 <_write_r+0x1e>
 800c0c4:	602b      	str	r3, [r5, #0]
 800c0c6:	bd38      	pop	{r3, r4, r5, pc}
 800c0c8:	200015c4 	.word	0x200015c4

0800c0cc <_close_r>:
 800c0cc:	b538      	push	{r3, r4, r5, lr}
 800c0ce:	4c06      	ldr	r4, [pc, #24]	; (800c0e8 <_close_r+0x1c>)
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	4608      	mov	r0, r1
 800c0d6:	6023      	str	r3, [r4, #0]
 800c0d8:	f7f4 fa9c 	bl	8000614 <_close>
 800c0dc:	1c43      	adds	r3, r0, #1
 800c0de:	d102      	bne.n	800c0e6 <_close_r+0x1a>
 800c0e0:	6823      	ldr	r3, [r4, #0]
 800c0e2:	b103      	cbz	r3, 800c0e6 <_close_r+0x1a>
 800c0e4:	602b      	str	r3, [r5, #0]
 800c0e6:	bd38      	pop	{r3, r4, r5, pc}
 800c0e8:	200015c4 	.word	0x200015c4

0800c0ec <_fstat_r>:
 800c0ec:	b538      	push	{r3, r4, r5, lr}
 800c0ee:	4c07      	ldr	r4, [pc, #28]	; (800c10c <_fstat_r+0x20>)
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	4605      	mov	r5, r0
 800c0f4:	4608      	mov	r0, r1
 800c0f6:	4611      	mov	r1, r2
 800c0f8:	6023      	str	r3, [r4, #0]
 800c0fa:	f7f4 fa97 	bl	800062c <_fstat>
 800c0fe:	1c43      	adds	r3, r0, #1
 800c100:	d102      	bne.n	800c108 <_fstat_r+0x1c>
 800c102:	6823      	ldr	r3, [r4, #0]
 800c104:	b103      	cbz	r3, 800c108 <_fstat_r+0x1c>
 800c106:	602b      	str	r3, [r5, #0]
 800c108:	bd38      	pop	{r3, r4, r5, pc}
 800c10a:	bf00      	nop
 800c10c:	200015c4 	.word	0x200015c4

0800c110 <_isatty_r>:
 800c110:	b538      	push	{r3, r4, r5, lr}
 800c112:	4c06      	ldr	r4, [pc, #24]	; (800c12c <_isatty_r+0x1c>)
 800c114:	2300      	movs	r3, #0
 800c116:	4605      	mov	r5, r0
 800c118:	4608      	mov	r0, r1
 800c11a:	6023      	str	r3, [r4, #0]
 800c11c:	f7f4 fa96 	bl	800064c <_isatty>
 800c120:	1c43      	adds	r3, r0, #1
 800c122:	d102      	bne.n	800c12a <_isatty_r+0x1a>
 800c124:	6823      	ldr	r3, [r4, #0]
 800c126:	b103      	cbz	r3, 800c12a <_isatty_r+0x1a>
 800c128:	602b      	str	r3, [r5, #0]
 800c12a:	bd38      	pop	{r3, r4, r5, pc}
 800c12c:	200015c4 	.word	0x200015c4

0800c130 <_lseek_r>:
 800c130:	b538      	push	{r3, r4, r5, lr}
 800c132:	4c07      	ldr	r4, [pc, #28]	; (800c150 <_lseek_r+0x20>)
 800c134:	4605      	mov	r5, r0
 800c136:	4608      	mov	r0, r1
 800c138:	4611      	mov	r1, r2
 800c13a:	2200      	movs	r2, #0
 800c13c:	6022      	str	r2, [r4, #0]
 800c13e:	461a      	mov	r2, r3
 800c140:	f7f4 fa8f 	bl	8000662 <_lseek>
 800c144:	1c43      	adds	r3, r0, #1
 800c146:	d102      	bne.n	800c14e <_lseek_r+0x1e>
 800c148:	6823      	ldr	r3, [r4, #0]
 800c14a:	b103      	cbz	r3, 800c14e <_lseek_r+0x1e>
 800c14c:	602b      	str	r3, [r5, #0]
 800c14e:	bd38      	pop	{r3, r4, r5, pc}
 800c150:	200015c4 	.word	0x200015c4

0800c154 <__malloc_lock>:
 800c154:	4770      	bx	lr

0800c156 <__malloc_unlock>:
 800c156:	4770      	bx	lr

0800c158 <_read_r>:
 800c158:	b538      	push	{r3, r4, r5, lr}
 800c15a:	4c07      	ldr	r4, [pc, #28]	; (800c178 <_read_r+0x20>)
 800c15c:	4605      	mov	r5, r0
 800c15e:	4608      	mov	r0, r1
 800c160:	4611      	mov	r1, r2
 800c162:	2200      	movs	r2, #0
 800c164:	6022      	str	r2, [r4, #0]
 800c166:	461a      	mov	r2, r3
 800c168:	f7f4 fa0b 	bl	8000582 <_read>
 800c16c:	1c43      	adds	r3, r0, #1
 800c16e:	d102      	bne.n	800c176 <_read_r+0x1e>
 800c170:	6823      	ldr	r3, [r4, #0]
 800c172:	b103      	cbz	r3, 800c176 <_read_r+0x1e>
 800c174:	602b      	str	r3, [r5, #0]
 800c176:	bd38      	pop	{r3, r4, r5, pc}
 800c178:	200015c4 	.word	0x200015c4

0800c17c <_init>:
 800c17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c17e:	bf00      	nop
 800c180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c182:	bc08      	pop	{r3}
 800c184:	469e      	mov	lr, r3
 800c186:	4770      	bx	lr

0800c188 <_fini>:
 800c188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c18a:	bf00      	nop
 800c18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c18e:	bc08      	pop	{r3}
 800c190:	469e      	mov	lr, r3
 800c192:	4770      	bx	lr
